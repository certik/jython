// Autogenerated AST node
package org.python.antlr.ast;
import org.python.antlr.PythonTree;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import java.io.DataOutputStream;
import java.io.IOException;

public class BinOp extends exprType {
    public exprType left;
    public operatorType op;
    public exprType right;

    public static final String[] _fields = new String[] {"left","op","right"};

    public BinOp(Token token, exprType left, operatorType op, exprType right) {
        super(token);
        this.left = left;
        this.op = op;
        this.right = right;
    }

    public BinOp(int ttype, Token token, exprType left, operatorType op,
    exprType right) {
        super(ttype, token);
        this.left = left;
        this.op = op;
        this.right = right;
    }

    public BinOp(PythonTree tree, exprType left, operatorType op, exprType
    right) {
        super(tree);
        this.left = left;
        this.op = op;
        this.right = right;
    }

    public String toString() {
        return "BinOp";
    }

    public String toStringTree() {
        StringBuffer sb = new StringBuffer("BinOp(");
        sb.append("left=");
        sb.append(dumpThis(left));
        sb.append(",");
        sb.append("op=");
        sb.append(dumpThis(op));
        sb.append(",");
        sb.append("right=");
        sb.append(dumpThis(right));
        sb.append(",");
        sb.append(")");
        return sb.toString();
    }

    public <R> R accept(VisitorIF<R> visitor) throws Exception {
        return visitor.visitBinOp(this);
    }

    public void traverse(VisitorIF visitor) throws Exception {
        if (left != null)
            left.accept(visitor);
        if (right != null)
            right.accept(visitor);
    }

    public int getLineno() {
        return getLine();
    }

    public int getCol_offset() {
        return getCharPositionInLine();
    }

}

// Autogenerated AST node
package org.python.antlr.ast;
import org.python.antlr.PythonTree;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import java.io.DataOutputStream;
import java.io.IOException;

public class ClassDef extends stmtType {
    public String name;
    public exprType[] bases;
    public stmtType[] body;
    public exprType[] decorators;

    public static final String[] _fields = new String[]
    {"name","bases","body","decorators"};

    public ClassDef(Token token, String name, exprType[] bases, stmtType[]
    body, exprType[] decorators) {
        super(token);
        this.name = name;
        this.bases = bases;
        if (bases != null) {
            for(int ibases=0;ibases<bases.length;ibases++) {
                addChild(bases[ibases]);
            }
        }
        this.body = body;
        if (body != null) {
            for(int ibody=0;ibody<body.length;ibody++) {
                addChild(body[ibody]);
            }
        }
        this.decorators = decorators;
        if (decorators != null) {
            for(int idecorators=0;idecorators<decorators.length;idecorators++) {
                addChild(decorators[idecorators]);
            }
        }
    }

    public ClassDef(int ttype, Token token, String name, exprType[] bases,
    stmtType[] body, exprType[] decorators) {
        super(ttype, token);
        this.name = name;
        this.bases = bases;
        if (bases != null) {
            for(int ibases=0;ibases<bases.length;ibases++) {
                addChild(bases[ibases]);
            }
        }
        this.body = body;
        if (body != null) {
            for(int ibody=0;ibody<body.length;ibody++) {
                addChild(body[ibody]);
            }
        }
        this.decorators = decorators;
        if (decorators != null) {
            for(int idecorators=0;idecorators<decorators.length;idecorators++) {
                addChild(decorators[idecorators]);
            }
        }
    }

    public ClassDef(PythonTree tree, String name, exprType[] bases, stmtType[]
    body, exprType[] decorators) {
        super(tree);
        this.name = name;
        this.bases = bases;
        if (bases != null) {
            for(int ibases=0;ibases<bases.length;ibases++) {
                addChild(bases[ibases]);
            }
        }
        this.body = body;
        if (body != null) {
            for(int ibody=0;ibody<body.length;ibody++) {
                addChild(body[ibody]);
            }
        }
        this.decorators = decorators;
        if (decorators != null) {
            for(int idecorators=0;idecorators<decorators.length;idecorators++) {
                addChild(decorators[idecorators]);
            }
        }
    }

    public String toString() {
        return "ClassDef";
    }

    public String toStringTree() {
        StringBuffer sb = new StringBuffer("ClassDef(");
        sb.append("name=");
        sb.append(dumpThis(name));
        sb.append(",");
        sb.append("bases=");
        sb.append(dumpThis(bases));
        sb.append(",");
        sb.append("body=");
        sb.append(dumpThis(body));
        sb.append(",");
        sb.append("decorators=");
        sb.append(dumpThis(decorators));
        sb.append(",");
        sb.append(")");
        return sb.toString();
    }

    public <R> R accept(VisitorIF<R> visitor) throws Exception {
        return visitor.visitClassDef(this);
    }

    public void traverse(VisitorIF visitor) throws Exception {
        if (bases != null) {
            for (int i = 0; i < bases.length; i++) {
                if (bases[i] != null)
                    bases[i].accept(visitor);
            }
        }
        if (body != null) {
            for (int i = 0; i < body.length; i++) {
                if (body[i] != null)
                    body[i].accept(visitor);
            }
        }
        if (decorators != null) {
            for (int i = 0; i < decorators.length; i++) {
                if (decorators[i] != null)
                    decorators[i].accept(visitor);
            }
        }
    }

    public int getLineno() {
        return getLine();
    }

    public int getCol_offset() {
        return getCharPositionInLine();
    }

}

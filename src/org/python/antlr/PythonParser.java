// $ANTLR 3.0.1 /Users/frank/tmp/trunk/jython/grammar/Python.g 2008-03-19 16:53:20
 
package org.python.antlr;

import org.python.antlr.PythonTree;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

/** Python 2.3.3 Grammar
 *
 *  Terence Parr and Loring Craymer
 *  February 2004
 *
 *  Converted to ANTLR v3 November 2005 by Terence Parr.
 *
 *  This grammar was derived automatically from the Python 2.3.3
 *  parser grammar to get a syntactically correct ANTLR grammar
 *  for Python.  Then Terence hand tweaked it to be semantically
 *  correct; i.e., removed lookahead issues etc...  It is LL(1)
 *  except for the (sometimes optional) trailing commas and semi-colons.
 *  It needs two symbols of lookahead in this case.
 *
 *  Starting with Loring's preliminary lexer for Python, I modified it
 *  to do my version of the whole nasty INDENT/DEDENT issue just so I
 *  could understand the problem better.  This grammar requires
 *  PythonTokenStream.java to work.  Also I used some rules from the
 *  semi-formal grammar on the web for Python (automatically
 *  translated to ANTLR format by an ANTLR grammar, naturally <grin>).
 *  The lexical rules for python are particularly nasty and it took me
 *  a long time to get it 'right'; i.e., think about it in the proper
 *  way.  Resist changing the lexer unless you've used ANTLR a lot. ;)
 *
 *  I (Terence) tested this by running it on the jython-2.1/Lib
 *  directory of 40k lines of Python.
 *
 *  REQUIRES ANTLR v3
 *
 *
 *  Baby step towards an antlr based Jython parser.
 *  Terence's Lexer is intact pretty much unchanged, the parser has
 *  been altered to produce an AST - the AST work started from tne newcompiler
 *  grammar from Jim Baker minus post-2.3 features.  The current parsing
 *  and compiling strategy looks like this:
 *
 *  Python source->Python.g->simple antlr AST->PythonWalker.g->
 *  decorated AST (org/python/parser/ast/*)->CodeCompiler(ASM)->.class
 *
 *  for a very limited set of functionality.
 */
public class PythonParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "INDENT", "DEDENT", "Module", "Test", "Msg", "Import", "ImportFrom", "Level", "Name", "Body", "ClassDef", "Bases", "FunctionDef", "Arguments", "Args", "Arg", "Keyword", "StarArgs", "KWArgs", "Assign", "AugAssign", "Compare", "Expr", "Tuple", "List", "Dict", "If", "IfExp", "OrElse", "Elif", "While", "Pass", "Break", "Continue", "Print", "TryExcept", "TryFinally", "ExceptHandler", "For", "Return", "Yield", "Str", "Num", "IsNot", "In", "NotIn", "Raise", "Type", "Inst", "Tback", "Global", "Exec", "Globals", "Locals", "Assert", "Ellipsis", "Comprehension", "ListComp", "Lambda", "Repr", "BinOp", "Subscript", "SubscriptList", "Index", "Target", "Targets", "Value", "Lower", "Upper", "Step", "UnaryOp", "UAdd", "USub", "Invert", "Delete", "Default", "Alias", "Asname", "Decorator", "Decorators", "With", "GeneratorExp", "Id", "Iter", "Ifs", "Elts", "Ctx", "Attr", "Call", "Dest", "Values", "Newline", "FpList", "StepOp", "UpperOp", "GenFor", "GenIf", "ListFor", "ListIf", "FinalBody", "Parens", "NEWLINE", "AT", "LPAREN", "RPAREN", "NAME", "DOT", "COLON", "COMMA", "STAR", "DOUBLESTAR", "ASSIGN", "SEMI", "PLUSEQUAL", "MINUSEQUAL", "STAREQUAL", "SLASHEQUAL", "PERCENTEQUAL", "AMPEREQUAL", "VBAREQUAL", "CIRCUMFLEXEQUAL", "LEFTSHIFTEQUAL", "RIGHTSHIFTEQUAL", "DOUBLESTAREQUAL", "DOUBLESLASHEQUAL", "RIGHTSHIFT", "OR", "AND", "NOT", "LESS", "GREATER", "EQUAL", "GREATEREQUAL", "LESSEQUAL", "ALT_NOTEQUAL", "NOTEQUAL", "VBAR", "CIRCUMFLEX", "AMPER", "LEFTSHIFT", "PLUS", "MINUS", "SLASH", "PERCENT", "DOUBLESLASH", "TILDE", "LBRACK", "RBRACK", "LCURLY", "RCURLY", "BACKQUOTE", "INT", "LONGINT", "FLOAT", "COMPLEX", "STRING", "DIGITS", "Exponent", "TRIAPOS", "TRIQUOTE", "ESC", "CONTINUED_LINE", "WS", "LEADING_WS", "COMMENT", "'def'", "'print'", "'del'", "'pass'", "'break'", "'continue'", "'return'", "'raise'", "'import'", "'from'", "'as'", "'global'", "'exec'", "'in'", "'assert'", "'if'", "'else'", "'elif'", "'while'", "'for'", "'try'", "'finally'", "'with'", "'except'", "'is'", "'lambda'", "'class'", "'yield'"
    };
    public static final int COMMA=112;
    public static final int Dict=29;
    public static final int Str=45;
    public static final int MINUS=145;
    public static final int Args=18;
    public static final int DEDENT=5;
    public static final int Targets=69;
    public static final int Ctx=90;
    public static final int TRIQUOTE=163;
    public static final int Delete=78;
    public static final int Tback=53;
    public static final int COMPLEX=158;
    public static final int Ellipsis=59;
    public static final int Elts=89;
    public static final int ListFor=101;
    public static final int TILDE=149;
    public static final int DOUBLESLASHEQUAL=128;
    public static final int Default=79;
    public static final int Locals=57;
    public static final int DOT=110;
    public static final int NEWLINE=105;
    public static final int Index=67;
    public static final int Invert=77;
    public static final int AND=131;
    public static final int PLUSEQUAL=117;
    public static final int UpperOp=98;
    public static final int RIGHTSHIFTEQUAL=126;
    public static final int Compare=25;
    public static final int LCURLY=152;
    public static final int Exec=55;
    public static final int StarArgs=21;
    public static final int UnaryOp=74;
    public static final int RPAREN=108;
    public static final int TryExcept=39;
    public static final int FinalBody=103;
    public static final int IsNot=47;
    public static final int PLUS=144;
    public static final int Expr=26;
    public static final int ClassDef=14;
    public static final int Print=38;
    public static final int Decorator=82;
    public static final int AT=106;
    public static final int Subscript=65;
    public static final int Type=51;
    public static final int Continue=37;
    public static final int Raise=50;
    public static final int Pass=35;
    public static final int List=28;
    public static final int Assert=58;
    public static final int Import=9;
    public static final int WS=166;
    public static final int STRING=159;
    public static final int Msg=8;
    public static final int Upper=72;
    public static final int In=48;
    public static final int Name=12;
    public static final int LBRACK=150;
    public static final int SEMI=116;
    public static final int Call=92;
    public static final int Keyword=20;
    public static final int EQUAL=135;
    public static final int Values=94;
    public static final int LESSEQUAL=137;
    public static final int USub=76;
    public static final int Test=7;
    public static final int Asname=81;
    public static final int Newline=95;
    public static final int Body=13;
    public static final int Step=73;
    public static final int ALT_NOTEQUAL=138;
    public static final int COLON=111;
    public static final int AMPER=142;
    public static final int Dest=93;
    public static final int NAME=109;
    public static final int Lambda=62;
    public static final int DOUBLESTAREQUAL=127;
    public static final int For=42;
    public static final int Level=11;
    public static final int Assign=23;
    public static final int NotIn=49;
    public static final int PERCENT=147;
    public static final int Iter=87;
    public static final int ListIf=102;
    public static final int FpList=96;
    public static final int If=30;
    public static final int Inst=52;
    public static final int BinOp=64;
    public static final int Break=36;
    public static final int FLOAT=157;
    public static final int DOUBLESTAR=114;
    public static final int GenFor=99;
    public static final int SLASHEQUAL=120;
    public static final int Attr=91;
    public static final int Arg=19;
    public static final int KWArgs=22;
    public static final int Num=46;
    public static final int NOTEQUAL=139;
    public static final int OR=130;
    public static final int Decorators=83;
    public static final int Ifs=88;
    public static final int CIRCUMFLEX=141;
    public static final int Module=6;
    public static final int RCURLY=153;
    public static final int LESS=133;
    public static final int TryFinally=40;
    public static final int GeneratorExp=85;
    public static final int LONGINT=156;
    public static final int ExceptHandler=41;
    public static final int INT=155;
    public static final int OrElse=32;
    public static final int UAdd=75;
    public static final int LEADING_WS=167;
    public static final int ASSIGN=115;
    public static final int Arguments=17;
    public static final int VBAR=140;
    public static final int GREATER=134;
    public static final int LPAREN=107;
    public static final int SubscriptList=66;
    public static final int BACKQUOTE=154;
    public static final int Yield=44;
    public static final int CONTINUED_LINE=165;
    public static final int AugAssign=24;
    public static final int Alias=80;
    public static final int IfExp=31;
    public static final int Parens=104;
    public static final int Exponent=161;
    public static final int DIGITS=160;
    public static final int SLASH=146;
    public static final int Bases=15;
    public static final int Tuple=27;
    public static final int Repr=63;
    public static final int ImportFrom=10;
    public static final int COMMENT=168;
    public static final int TRIAPOS=162;
    public static final int AMPEREQUAL=122;
    public static final int ESC=164;
    public static final int GenIf=100;
    public static final int Elif=33;
    public static final int Target=68;
    public static final int With=84;
    public static final int Global=54;
    public static final int RIGHTSHIFT=129;
    public static final int MINUSEQUAL=118;
    public static final int StepOp=97;
    public static final int LEFTSHIFTEQUAL=125;
    public static final int PERCENTEQUAL=121;
    public static final int While=34;
    public static final int EOF=-1;
    public static final int CIRCUMFLEXEQUAL=124;
    public static final int INDENT=4;
    public static final int RBRACK=151;
    public static final int Value=70;
    public static final int GREATEREQUAL=136;
    public static final int FunctionDef=16;
    public static final int Comprehension=60;
    public static final int ListComp=61;
    public static final int DOUBLESLASH=148;
    public static final int Globals=56;
    public static final int VBAREQUAL=123;
    public static final int STAREQUAL=119;
    public static final int STAR=113;
    public static final int NOT=132;
    public static final int Lower=71;
    public static final int LEFTSHIFT=143;
    public static final int Return=43;
    public static final int Id=86;

        public PythonParser(TokenStream input) {
            super(input);
            ruleMemo = new HashMap[92+1];
         }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return tokenNames; }
    public String getGrammarFileName() { return "/Users/frank/tmp/trunk/jython/grammar/Python.g"; }


        boolean debugOn = false;

        private void debug(String message) {
            if (debugOn) {
                System.out.println(message);
            }
        }

        /**
         * A list holding the error message(s) encountered during parse.
         */
        private List<String> _errors = new ArrayList<String>();

        /**
         * @return <code>true</code> if the parser collected one or more error messages,
         *         <code>false</code> otherwise.
         */
        public boolean hasErrors() {
          return getErrors().size() > 0;
        }

        /**
         * @return A list of the error message(s) collected during parse.
         */
        public List<String> getErrors() {
            return _errors;
        }

        /**
         * Overridden to be able to collect error messages.
         * <p>
         * Since we do not want to lose the recovery mechanism and the verbose messages.
         */
        @Override
        public void emitErrorMessage(String msg) {
           super.emitErrorMessage(msg);
           getErrors().add(msg);
        }


    public static class single_input_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start single_input
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:246:1: single_input : ( NEWLINE | simple_stmt | compound_stmt NEWLINE );
    public final single_input_return single_input() throws RecognitionException {
        single_input_return retval = new single_input_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token NEWLINE1=null;
        Token NEWLINE4=null;
        simple_stmt_return simple_stmt2 = null;

        compound_stmt_return compound_stmt3 = null;


        PythonTree NEWLINE1_tree=null;
        PythonTree NEWLINE4_tree=null;

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:246:14: ( NEWLINE | simple_stmt | compound_stmt NEWLINE )
            int alt1=3;
            switch ( input.LA(1) ) {
            case NEWLINE:
                {
                alt1=1;
                }
                break;
            case LPAREN:
            case NAME:
            case NOT:
            case PLUS:
            case MINUS:
            case TILDE:
            case LBRACK:
            case LCURLY:
            case BACKQUOTE:
            case INT:
            case LONGINT:
            case FLOAT:
            case COMPLEX:
            case STRING:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 178:
            case 180:
            case 181:
            case 183:
            case 194:
            case 196:
                {
                alt1=2;
                }
                break;
            case AT:
            case 169:
            case 184:
            case 187:
            case 188:
            case 189:
            case 191:
            case 195:
                {
                alt1=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("246:1: single_input : ( NEWLINE | simple_stmt | compound_stmt NEWLINE );", 1, 0, input);

                throw nvae;
            }

            switch (alt1) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:246:16: NEWLINE
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    NEWLINE1=(Token)input.LT(1);
                    match(input,NEWLINE,FOLLOW_NEWLINE_in_single_input796); if (failed) return retval;

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:247:16: simple_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_simple_stmt_in_single_input814);
                    simple_stmt2=simple_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, simple_stmt2.getTree());

                    }
                    break;
                case 3 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:248:16: compound_stmt NEWLINE
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_compound_stmt_in_single_input831);
                    compound_stmt3=compound_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compound_stmt3.getTree());
                    NEWLINE4=(Token)input.LT(1);
                    match(input,NEWLINE,FOLLOW_NEWLINE_in_single_input833); if (failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end single_input

    public static class file_input_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start file_input
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:252:1: file_input : ( NEWLINE | stmt )* -> ^( Module ( stmt )* ) ;
    public final file_input_return file_input() throws RecognitionException {
        file_input_return retval = new file_input_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token NEWLINE5=null;
        stmt_return stmt6 = null;


        PythonTree NEWLINE5_tree=null;
        RewriteRuleTokenStream stream_NEWLINE=new RewriteRuleTokenStream(adaptor,"token NEWLINE");
        RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:252:12: ( ( NEWLINE | stmt )* -> ^( Module ( stmt )* ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:252:14: ( NEWLINE | stmt )*
            {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:252:14: ( NEWLINE | stmt )*
            loop2:
            do {
                int alt2=3;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==NEWLINE) ) {
                    alt2=1;
                }
                else if ( ((LA2_0>=AT && LA2_0<=LPAREN)||LA2_0==NAME||LA2_0==NOT||(LA2_0>=PLUS && LA2_0<=MINUS)||(LA2_0>=TILDE && LA2_0<=LBRACK)||LA2_0==LCURLY||(LA2_0>=BACKQUOTE && LA2_0<=STRING)||(LA2_0>=169 && LA2_0<=178)||(LA2_0>=180 && LA2_0<=181)||(LA2_0>=183 && LA2_0<=184)||(LA2_0>=187 && LA2_0<=189)||LA2_0==191||(LA2_0>=194 && LA2_0<=196)) ) {
                    alt2=2;
                }


                switch (alt2) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:252:15: NEWLINE
            	    {
            	    NEWLINE5=(Token)input.LT(1);
            	    match(input,NEWLINE,FOLLOW_NEWLINE_in_file_input858); if (failed) return retval;
            	    if ( backtracking==0 ) stream_NEWLINE.add(NEWLINE5);


            	    }
            	    break;
            	case 2 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:252:25: stmt
            	    {
            	    pushFollow(FOLLOW_stmt_in_file_input862);
            	    stmt6=stmt();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_stmt.add(stmt6.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            if ( backtracking==0 ) {
              debug("parsed file_input");
            }

            // AST REWRITE
            // elements: stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 253:11: -> ^( Module ( stmt )* )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:253:14: ^( Module ( stmt )* )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Module, "Module"), root_1);

                // /Users/frank/tmp/trunk/jython/grammar/Python.g:253:23: ( stmt )*
                while ( stream_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_stmt.next());

                }
                stream_stmt.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end file_input

    public static class eval_input_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start eval_input
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:257:1: eval_input : ( NEWLINE )* testlist ( NEWLINE )* ;
    public final eval_input_return eval_input() throws RecognitionException {
        eval_input_return retval = new eval_input_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token NEWLINE7=null;
        Token NEWLINE9=null;
        testlist_return testlist8 = null;


        PythonTree NEWLINE7_tree=null;
        PythonTree NEWLINE9_tree=null;

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:257:12: ( ( NEWLINE )* testlist ( NEWLINE )* )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:257:14: ( NEWLINE )* testlist ( NEWLINE )*
            {
            root_0 = (PythonTree)adaptor.nil();

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:257:14: ( NEWLINE )*
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==NEWLINE) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:257:15: NEWLINE
            	    {
            	    NEWLINE7=(Token)input.LT(1);
            	    match(input,NEWLINE,FOLLOW_NEWLINE_in_eval_input907); if (failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);

            pushFollow(FOLLOW_testlist_in_eval_input912);
            testlist8=testlist();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, testlist8.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:257:35: ( NEWLINE )*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==NEWLINE) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:257:36: NEWLINE
            	    {
            	    NEWLINE9=(Token)input.LT(1);
            	    match(input,NEWLINE,FOLLOW_NEWLINE_in_eval_input915); if (failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end eval_input

    public static class decorators_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start decorators
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:261:1: decorators : ( decorator )+ ;
    public final decorators_return decorators() throws RecognitionException {
        decorators_return retval = new decorators_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        decorator_return decorator10 = null;



        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:261:11: ( ( decorator )+ )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:261:13: ( decorator )+
            {
            root_0 = (PythonTree)adaptor.nil();

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:261:13: ( decorator )+
            int cnt5=0;
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==AT) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:261:13: decorator
            	    {
            	    pushFollow(FOLLOW_decorator_in_decorators938);
            	    decorator10=decorator();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, decorator10.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt5 >= 1 ) break loop5;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(5, input);
                        throw eee;
                }
                cnt5++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end decorators

    public static class decorator_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start decorator
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:265:1: decorator : AT dotted_attr ( ( LPAREN ( arglist )? RPAREN ) -> ^( Decorator dotted_attr ^( Call ( ^( Args arglist ) )? ) ) | -> ^( Decorator dotted_attr ) ) NEWLINE ;
    public final decorator_return decorator() throws RecognitionException {
        decorator_return retval = new decorator_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token AT11=null;
        Token LPAREN13=null;
        Token RPAREN15=null;
        Token NEWLINE16=null;
        dotted_attr_return dotted_attr12 = null;

        arglist_return arglist14 = null;


        PythonTree AT11_tree=null;
        PythonTree LPAREN13_tree=null;
        PythonTree RPAREN15_tree=null;
        PythonTree NEWLINE16_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_NEWLINE=new RewriteRuleTokenStream(adaptor,"token NEWLINE");
        RewriteRuleSubtreeStream stream_dotted_attr=new RewriteRuleSubtreeStream(adaptor,"rule dotted_attr");
        RewriteRuleSubtreeStream stream_arglist=new RewriteRuleSubtreeStream(adaptor,"rule arglist");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:265:10: ( AT dotted_attr ( ( LPAREN ( arglist )? RPAREN ) -> ^( Decorator dotted_attr ^( Call ( ^( Args arglist ) )? ) ) | -> ^( Decorator dotted_attr ) ) NEWLINE )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:265:12: AT dotted_attr ( ( LPAREN ( arglist )? RPAREN ) -> ^( Decorator dotted_attr ^( Call ( ^( Args arglist ) )? ) ) | -> ^( Decorator dotted_attr ) ) NEWLINE
            {
            AT11=(Token)input.LT(1);
            match(input,AT,FOLLOW_AT_in_decorator958); if (failed) return retval;
            if ( backtracking==0 ) stream_AT.add(AT11);

            pushFollow(FOLLOW_dotted_attr_in_decorator960);
            dotted_attr12=dotted_attr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_dotted_attr.add(dotted_attr12.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:266:12: ( ( LPAREN ( arglist )? RPAREN ) -> ^( Decorator dotted_attr ^( Call ( ^( Args arglist ) )? ) ) | -> ^( Decorator dotted_attr ) )
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==LPAREN) ) {
                alt7=1;
            }
            else if ( (LA7_0==NEWLINE) ) {
                alt7=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("266:12: ( ( LPAREN ( arglist )? RPAREN ) -> ^( Decorator dotted_attr ^( Call ( ^( Args arglist ) )? ) ) | -> ^( Decorator dotted_attr ) )", 7, 0, input);

                throw nvae;
            }
            switch (alt7) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:266:14: ( LPAREN ( arglist )? RPAREN )
                    {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:266:14: ( LPAREN ( arglist )? RPAREN )
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:266:15: LPAREN ( arglist )? RPAREN
                    {
                    LPAREN13=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_decorator977); if (failed) return retval;
                    if ( backtracking==0 ) stream_LPAREN.add(LPAREN13);

                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:266:22: ( arglist )?
                    int alt6=2;
                    int LA6_0 = input.LA(1);

                    if ( (LA6_0==LPAREN||LA6_0==NAME||(LA6_0>=STAR && LA6_0<=DOUBLESTAR)||LA6_0==NOT||(LA6_0>=PLUS && LA6_0<=MINUS)||(LA6_0>=TILDE && LA6_0<=LBRACK)||LA6_0==LCURLY||(LA6_0>=BACKQUOTE && LA6_0<=STRING)||LA6_0==194) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:266:22: arglist
                            {
                            pushFollow(FOLLOW_arglist_in_decorator979);
                            arglist14=arglist();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_arglist.add(arglist14.getTree());

                            }
                            break;

                    }

                    RPAREN15=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_decorator982); if (failed) return retval;
                    if ( backtracking==0 ) stream_RPAREN.add(RPAREN15);


                    }


                    // AST REWRITE
                    // elements: arglist, dotted_attr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 266:39: -> ^( Decorator dotted_attr ^( Call ( ^( Args arglist ) )? ) )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:266:42: ^( Decorator dotted_attr ^( Call ( ^( Args arglist ) )? ) )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Decorator, "Decorator"), root_1);

                        adaptor.addChild(root_1, stream_dotted_attr.next());
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:266:66: ^( Call ( ^( Args arglist ) )? )
                        {
                        PythonTree root_2 = (PythonTree)adaptor.nil();
                        root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Call, "Call"), root_2);

                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:266:73: ( ^( Args arglist ) )?
                        if ( stream_arglist.hasNext() ) {
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:266:73: ^( Args arglist )
                            {
                            PythonTree root_3 = (PythonTree)adaptor.nil();
                            root_3 = (PythonTree)adaptor.becomeRoot(adaptor.create(Args, "Args"), root_3);

                            adaptor.addChild(root_3, stream_arglist.next());

                            adaptor.addChild(root_2, root_3);
                            }

                        }
                        stream_arglist.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:267:14: 
                    {

                    // AST REWRITE
                    // elements: dotted_attr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 267:14: -> ^( Decorator dotted_attr )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:267:17: ^( Decorator dotted_attr )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Decorator, "Decorator"), root_1);

                        adaptor.addChild(root_1, stream_dotted_attr.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }

            NEWLINE16=(Token)input.LT(1);
            match(input,NEWLINE,FOLLOW_NEWLINE_in_decorator1038); if (failed) return retval;
            if ( backtracking==0 ) stream_NEWLINE.add(NEWLINE16);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end decorator

    public static class dotted_attr_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dotted_attr
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:271:1: dotted_attr : NAME ( DOT NAME )* ;
    public final dotted_attr_return dotted_attr() throws RecognitionException {
        dotted_attr_return retval = new dotted_attr_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token NAME17=null;
        Token DOT18=null;
        Token NAME19=null;

        PythonTree NAME17_tree=null;
        PythonTree DOT18_tree=null;
        PythonTree NAME19_tree=null;

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:272:5: ( NAME ( DOT NAME )* )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:272:7: NAME ( DOT NAME )*
            {
            root_0 = (PythonTree)adaptor.nil();

            NAME17=(Token)input.LT(1);
            match(input,NAME,FOLLOW_NAME_in_dotted_attr1060); if (failed) return retval;
            if ( backtracking==0 ) {
            NAME17_tree = (PythonTree)adaptor.create(NAME17);
            adaptor.addChild(root_0, NAME17_tree);
            }
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:272:12: ( DOT NAME )*
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==DOT) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:272:13: DOT NAME
            	    {
            	    DOT18=(Token)input.LT(1);
            	    match(input,DOT,FOLLOW_DOT_in_dotted_attr1063); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    DOT18_tree = (PythonTree)adaptor.create(DOT18);
            	    root_0 = (PythonTree)adaptor.becomeRoot(DOT18_tree, root_0);
            	    }
            	    NAME19=(Token)input.LT(1);
            	    match(input,NAME,FOLLOW_NAME_in_dotted_attr1066); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    NAME19_tree = (PythonTree)adaptor.create(NAME19);
            	    adaptor.addChild(root_0, NAME19_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dotted_attr

    public static class funcdef_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start funcdef
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:276:1: funcdef : ( decorators )? 'def' NAME parameters COLON suite -> ^( FunctionDef ^( Name NAME ) ^( Arguments parameters ) ^( Body suite ) ^( Decorators ( decorators )? ) ) ;
    public final funcdef_return funcdef() throws RecognitionException {
        funcdef_return retval = new funcdef_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal21=null;
        Token NAME22=null;
        Token COLON24=null;
        decorators_return decorators20 = null;

        parameters_return parameters23 = null;

        suite_return suite25 = null;


        PythonTree string_literal21_tree=null;
        PythonTree NAME22_tree=null;
        PythonTree COLON24_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleSubtreeStream stream_decorators=new RewriteRuleSubtreeStream(adaptor,"rule decorators");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:276:9: ( ( decorators )? 'def' NAME parameters COLON suite -> ^( FunctionDef ^( Name NAME ) ^( Arguments parameters ) ^( Body suite ) ^( Decorators ( decorators )? ) ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:276:11: ( decorators )? 'def' NAME parameters COLON suite
            {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:276:11: ( decorators )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==AT) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:276:11: decorators
                    {
                    pushFollow(FOLLOW_decorators_in_funcdef1082);
                    decorators20=decorators();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_decorators.add(decorators20.getTree());

                    }
                    break;

            }

            string_literal21=(Token)input.LT(1);
            match(input,169,FOLLOW_169_in_funcdef1085); if (failed) return retval;
            if ( backtracking==0 ) stream_169.add(string_literal21);

            NAME22=(Token)input.LT(1);
            match(input,NAME,FOLLOW_NAME_in_funcdef1087); if (failed) return retval;
            if ( backtracking==0 ) stream_NAME.add(NAME22);

            pushFollow(FOLLOW_parameters_in_funcdef1089);
            parameters23=parameters();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_parameters.add(parameters23.getTree());
            COLON24=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_funcdef1091); if (failed) return retval;
            if ( backtracking==0 ) stream_COLON.add(COLON24);

            pushFollow(FOLLOW_suite_in_funcdef1093);
            suite25=suite();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_suite.add(suite25.getTree());

            // AST REWRITE
            // elements: NAME, suite, parameters, decorators
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 277:8: -> ^( FunctionDef ^( Name NAME ) ^( Arguments parameters ) ^( Body suite ) ^( Decorators ( decorators )? ) )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:277:11: ^( FunctionDef ^( Name NAME ) ^( Arguments parameters ) ^( Body suite ) ^( Decorators ( decorators )? ) )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(FunctionDef, "FunctionDef"), root_1);

                // /Users/frank/tmp/trunk/jython/grammar/Python.g:277:25: ^( Name NAME )
                {
                PythonTree root_2 = (PythonTree)adaptor.nil();
                root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Name, "Name"), root_2);

                adaptor.addChild(root_2, stream_NAME.next());

                adaptor.addChild(root_1, root_2);
                }
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:277:38: ^( Arguments parameters )
                {
                PythonTree root_2 = (PythonTree)adaptor.nil();
                root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Arguments, "Arguments"), root_2);

                adaptor.addChild(root_2, stream_parameters.next());

                adaptor.addChild(root_1, root_2);
                }
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:277:62: ^( Body suite )
                {
                PythonTree root_2 = (PythonTree)adaptor.nil();
                root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Body, "Body"), root_2);

                adaptor.addChild(root_2, stream_suite.next());

                adaptor.addChild(root_1, root_2);
                }
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:277:76: ^( Decorators ( decorators )? )
                {
                PythonTree root_2 = (PythonTree)adaptor.nil();
                root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Decorators, "Decorators"), root_2);

                // /Users/frank/tmp/trunk/jython/grammar/Python.g:277:89: ( decorators )?
                if ( stream_decorators.hasNext() ) {
                    adaptor.addChild(root_2, stream_decorators.next());

                }
                stream_decorators.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end funcdef

    public static class parameters_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start parameters
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:281:1: parameters : LPAREN ( varargslist )? RPAREN -> ( varargslist )? ;
    public final parameters_return parameters() throws RecognitionException {
        parameters_return retval = new parameters_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token LPAREN26=null;
        Token RPAREN28=null;
        varargslist_return varargslist27 = null;


        PythonTree LPAREN26_tree=null;
        PythonTree RPAREN28_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_varargslist=new RewriteRuleSubtreeStream(adaptor,"rule varargslist");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:281:12: ( LPAREN ( varargslist )? RPAREN -> ( varargslist )? )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:281:14: LPAREN ( varargslist )? RPAREN
            {
            LPAREN26=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_parameters1149); if (failed) return retval;
            if ( backtracking==0 ) stream_LPAREN.add(LPAREN26);

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:281:21: ( varargslist )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==LPAREN||LA10_0==NAME||(LA10_0>=STAR && LA10_0<=DOUBLESTAR)) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:281:22: varargslist
                    {
                    pushFollow(FOLLOW_varargslist_in_parameters1152);
                    varargslist27=varargslist();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_varargslist.add(varargslist27.getTree());

                    }
                    break;

            }

            RPAREN28=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_parameters1156); if (failed) return retval;
            if ( backtracking==0 ) stream_RPAREN.add(RPAREN28);


            // AST REWRITE
            // elements: varargslist
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 282:11: -> ( varargslist )?
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:282:14: ( varargslist )?
                if ( stream_varargslist.hasNext() ) {
                    adaptor.addChild(root_0, stream_varargslist.next());

                }
                stream_varargslist.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end parameters

    public static class varargslist_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start varargslist
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:286:1: varargslist : ( defparameter ( options {greedy=true; } : COMMA defparameter )* ( COMMA ( STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? | DOUBLESTAR kwargs= NAME )? )? -> ^( Args ( defparameter )+ ) ( ^( StarArgs $starargs) )? ( ^( KWArgs $kwargs) )? | STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? -> ^( StarArgs $starargs) ( ^( KWArgs $kwargs) )? | DOUBLESTAR kwargs= NAME -> ^( KWArgs $kwargs) );
    public final varargslist_return varargslist() throws RecognitionException {
        varargslist_return retval = new varargslist_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token starargs=null;
        Token kwargs=null;
        Token COMMA30=null;
        Token COMMA32=null;
        Token STAR33=null;
        Token COMMA34=null;
        Token DOUBLESTAR35=null;
        Token DOUBLESTAR36=null;
        Token STAR37=null;
        Token COMMA38=null;
        Token DOUBLESTAR39=null;
        Token DOUBLESTAR40=null;
        defparameter_return defparameter29 = null;

        defparameter_return defparameter31 = null;


        PythonTree starargs_tree=null;
        PythonTree kwargs_tree=null;
        PythonTree COMMA30_tree=null;
        PythonTree COMMA32_tree=null;
        PythonTree STAR33_tree=null;
        PythonTree COMMA34_tree=null;
        PythonTree DOUBLESTAR35_tree=null;
        PythonTree DOUBLESTAR36_tree=null;
        PythonTree STAR37_tree=null;
        PythonTree COMMA38_tree=null;
        PythonTree DOUBLESTAR39_tree=null;
        PythonTree DOUBLESTAR40_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_DOUBLESTAR=new RewriteRuleTokenStream(adaptor,"token DOUBLESTAR");
        RewriteRuleSubtreeStream stream_defparameter=new RewriteRuleSubtreeStream(adaptor,"rule defparameter");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:286:13: ( defparameter ( options {greedy=true; } : COMMA defparameter )* ( COMMA ( STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? | DOUBLESTAR kwargs= NAME )? )? -> ^( Args ( defparameter )+ ) ( ^( StarArgs $starargs) )? ( ^( KWArgs $kwargs) )? | STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? -> ^( StarArgs $starargs) ( ^( KWArgs $kwargs) )? | DOUBLESTAR kwargs= NAME -> ^( KWArgs $kwargs) )
            int alt16=3;
            switch ( input.LA(1) ) {
            case LPAREN:
            case NAME:
                {
                alt16=1;
                }
                break;
            case STAR:
                {
                alt16=2;
                }
                break;
            case DOUBLESTAR:
                {
                alt16=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("286:1: varargslist : ( defparameter ( options {greedy=true; } : COMMA defparameter )* ( COMMA ( STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? | DOUBLESTAR kwargs= NAME )? )? -> ^( Args ( defparameter )+ ) ( ^( StarArgs $starargs) )? ( ^( KWArgs $kwargs) )? | STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? -> ^( StarArgs $starargs) ( ^( KWArgs $kwargs) )? | DOUBLESTAR kwargs= NAME -> ^( KWArgs $kwargs) );", 16, 0, input);

                throw nvae;
            }

            switch (alt16) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:286:15: defparameter ( options {greedy=true; } : COMMA defparameter )* ( COMMA ( STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? | DOUBLESTAR kwargs= NAME )? )?
                    {
                    pushFollow(FOLLOW_defparameter_in_varargslist1194);
                    defparameter29=defparameter();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_defparameter.add(defparameter29.getTree());
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:286:28: ( options {greedy=true; } : COMMA defparameter )*
                    loop11:
                    do {
                        int alt11=2;
                        int LA11_0 = input.LA(1);

                        if ( (LA11_0==COMMA) ) {
                            int LA11_1 = input.LA(2);

                            if ( (LA11_1==LPAREN||LA11_1==NAME) ) {
                                alt11=1;
                            }


                        }


                        switch (alt11) {
                    	case 1 :
                    	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:286:52: COMMA defparameter
                    	    {
                    	    COMMA30=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_varargslist1204); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_COMMA.add(COMMA30);

                    	    pushFollow(FOLLOW_defparameter_in_varargslist1206);
                    	    defparameter31=defparameter();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_defparameter.add(defparameter31.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop11;
                        }
                    } while (true);

                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:287:15: ( COMMA ( STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? | DOUBLESTAR kwargs= NAME )? )?
                    int alt14=2;
                    int LA14_0 = input.LA(1);

                    if ( (LA14_0==COMMA) ) {
                        alt14=1;
                    }
                    switch (alt14) {
                        case 1 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:287:16: COMMA ( STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? | DOUBLESTAR kwargs= NAME )?
                            {
                            COMMA32=(Token)input.LT(1);
                            match(input,COMMA,FOLLOW_COMMA_in_varargslist1225); if (failed) return retval;
                            if ( backtracking==0 ) stream_COMMA.add(COMMA32);

                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:288:19: ( STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? | DOUBLESTAR kwargs= NAME )?
                            int alt13=3;
                            int LA13_0 = input.LA(1);

                            if ( (LA13_0==STAR) ) {
                                alt13=1;
                            }
                            else if ( (LA13_0==DOUBLESTAR) ) {
                                alt13=2;
                            }
                            switch (alt13) {
                                case 1 :
                                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:288:21: STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )?
                                    {
                                    STAR33=(Token)input.LT(1);
                                    match(input,STAR,FOLLOW_STAR_in_varargslist1247); if (failed) return retval;
                                    if ( backtracking==0 ) stream_STAR.add(STAR33);

                                    starargs=(Token)input.LT(1);
                                    match(input,NAME,FOLLOW_NAME_in_varargslist1251); if (failed) return retval;
                                    if ( backtracking==0 ) stream_NAME.add(starargs);

                                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:288:40: ( COMMA DOUBLESTAR kwargs= NAME )?
                                    int alt12=2;
                                    int LA12_0 = input.LA(1);

                                    if ( (LA12_0==COMMA) ) {
                                        alt12=1;
                                    }
                                    switch (alt12) {
                                        case 1 :
                                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:288:41: COMMA DOUBLESTAR kwargs= NAME
                                            {
                                            COMMA34=(Token)input.LT(1);
                                            match(input,COMMA,FOLLOW_COMMA_in_varargslist1254); if (failed) return retval;
                                            if ( backtracking==0 ) stream_COMMA.add(COMMA34);

                                            DOUBLESTAR35=(Token)input.LT(1);
                                            match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_varargslist1256); if (failed) return retval;
                                            if ( backtracking==0 ) stream_DOUBLESTAR.add(DOUBLESTAR35);

                                            kwargs=(Token)input.LT(1);
                                            match(input,NAME,FOLLOW_NAME_in_varargslist1260); if (failed) return retval;
                                            if ( backtracking==0 ) stream_NAME.add(kwargs);


                                            }
                                            break;

                                    }


                                    }
                                    break;
                                case 2 :
                                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:289:21: DOUBLESTAR kwargs= NAME
                                    {
                                    DOUBLESTAR36=(Token)input.LT(1);
                                    match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_varargslist1284); if (failed) return retval;
                                    if ( backtracking==0 ) stream_DOUBLESTAR.add(DOUBLESTAR36);

                                    kwargs=(Token)input.LT(1);
                                    match(input,NAME,FOLLOW_NAME_in_varargslist1288); if (failed) return retval;
                                    if ( backtracking==0 ) stream_NAME.add(kwargs);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      debug("parsed varargslist");
                    }

                    // AST REWRITE
                    // elements: kwargs, starargs, defparameter
                    // token labels: starargs, kwargs
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_starargs=new RewriteRuleTokenStream(adaptor,"token starargs",starargs);
                    RewriteRuleTokenStream stream_kwargs=new RewriteRuleTokenStream(adaptor,"token kwargs",kwargs);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 292:12: -> ^( Args ( defparameter )+ ) ( ^( StarArgs $starargs) )? ( ^( KWArgs $kwargs) )?
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:292:15: ^( Args ( defparameter )+ )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Args, "Args"), root_1);

                        if ( !(stream_defparameter.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_defparameter.hasNext() ) {
                            adaptor.addChild(root_1, stream_defparameter.next());

                        }
                        stream_defparameter.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:292:37: ( ^( StarArgs $starargs) )?
                        if ( stream_starargs.hasNext() ) {
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:292:37: ^( StarArgs $starargs)
                            {
                            PythonTree root_1 = (PythonTree)adaptor.nil();
                            root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(StarArgs, "StarArgs"), root_1);

                            adaptor.addChild(root_1, stream_starargs.next());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_starargs.reset();
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:292:60: ( ^( KWArgs $kwargs) )?
                        if ( stream_kwargs.hasNext() ) {
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:292:60: ^( KWArgs $kwargs)
                            {
                            PythonTree root_1 = (PythonTree)adaptor.nil();
                            root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(KWArgs, "KWArgs"), root_1);

                            adaptor.addChild(root_1, stream_kwargs.next());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_kwargs.reset();

                    }

                    }

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:293:15: STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )?
                    {
                    STAR37=(Token)input.LT(1);
                    match(input,STAR,FOLLOW_STAR_in_varargslist1380); if (failed) return retval;
                    if ( backtracking==0 ) stream_STAR.add(STAR37);

                    starargs=(Token)input.LT(1);
                    match(input,NAME,FOLLOW_NAME_in_varargslist1384); if (failed) return retval;
                    if ( backtracking==0 ) stream_NAME.add(starargs);

                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:293:34: ( COMMA DOUBLESTAR kwargs= NAME )?
                    int alt15=2;
                    int LA15_0 = input.LA(1);

                    if ( (LA15_0==COMMA) ) {
                        alt15=1;
                    }
                    switch (alt15) {
                        case 1 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:293:35: COMMA DOUBLESTAR kwargs= NAME
                            {
                            COMMA38=(Token)input.LT(1);
                            match(input,COMMA,FOLLOW_COMMA_in_varargslist1387); if (failed) return retval;
                            if ( backtracking==0 ) stream_COMMA.add(COMMA38);

                            DOUBLESTAR39=(Token)input.LT(1);
                            match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_varargslist1389); if (failed) return retval;
                            if ( backtracking==0 ) stream_DOUBLESTAR.add(DOUBLESTAR39);

                            kwargs=(Token)input.LT(1);
                            match(input,NAME,FOLLOW_NAME_in_varargslist1393); if (failed) return retval;
                            if ( backtracking==0 ) stream_NAME.add(kwargs);


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      debug("parsed varargslist STARARGS");
                    }

                    // AST REWRITE
                    // elements: starargs, kwargs
                    // token labels: starargs, kwargs
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_starargs=new RewriteRuleTokenStream(adaptor,"token starargs",starargs);
                    RewriteRuleTokenStream stream_kwargs=new RewriteRuleTokenStream(adaptor,"token kwargs",kwargs);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 294:12: -> ^( StarArgs $starargs) ( ^( KWArgs $kwargs) )?
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:294:15: ^( StarArgs $starargs)
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(StarArgs, "StarArgs"), root_1);

                        adaptor.addChild(root_1, stream_starargs.next());

                        adaptor.addChild(root_0, root_1);
                        }
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:294:37: ( ^( KWArgs $kwargs) )?
                        if ( stream_kwargs.hasNext() ) {
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:294:37: ^( KWArgs $kwargs)
                            {
                            PythonTree root_1 = (PythonTree)adaptor.nil();
                            root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(KWArgs, "KWArgs"), root_1);

                            adaptor.addChild(root_1, stream_kwargs.next());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_kwargs.reset();

                    }

                    }

                    }
                    break;
                case 3 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:295:15: DOUBLESTAR kwargs= NAME
                    {
                    DOUBLESTAR40=(Token)input.LT(1);
                    match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_varargslist1440); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOUBLESTAR.add(DOUBLESTAR40);

                    kwargs=(Token)input.LT(1);
                    match(input,NAME,FOLLOW_NAME_in_varargslist1444); if (failed) return retval;
                    if ( backtracking==0 ) stream_NAME.add(kwargs);

                    if ( backtracking==0 ) {
                      debug("parsed varargslist KWS");
                    }

                    // AST REWRITE
                    // elements: kwargs
                    // token labels: kwargs
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_kwargs=new RewriteRuleTokenStream(adaptor,"token kwargs",kwargs);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 296:12: -> ^( KWArgs $kwargs)
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:296:15: ^( KWArgs $kwargs)
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(KWArgs, "KWArgs"), root_1);

                        adaptor.addChild(root_1, stream_kwargs.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end varargslist

    public static class defparameter_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start defparameter
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:300:1: defparameter : fpdef ( ASSIGN test )? ;
    public final defparameter_return defparameter() throws RecognitionException {
        defparameter_return retval = new defparameter_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token ASSIGN42=null;
        fpdef_return fpdef41 = null;

        test_return test43 = null;


        PythonTree ASSIGN42_tree=null;

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:300:14: ( fpdef ( ASSIGN test )? )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:300:16: fpdef ( ASSIGN test )?
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_fpdef_in_defparameter1488);
            fpdef41=fpdef();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, fpdef41.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:300:22: ( ASSIGN test )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==ASSIGN) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:300:23: ASSIGN test
                    {
                    ASSIGN42=(Token)input.LT(1);
                    match(input,ASSIGN,FOLLOW_ASSIGN_in_defparameter1491); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ASSIGN42_tree = (PythonTree)adaptor.create(ASSIGN42);
                    adaptor.addChild(root_0, ASSIGN42_tree);
                    }
                    pushFollow(FOLLOW_test_in_defparameter1493);
                    test43=test();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, test43.getTree());

                    }
                    break;

            }

            if ( backtracking==0 ) {
              debug("parsed defparameter");
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end defparameter

    public static class fpdef_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start fpdef
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:304:1: fpdef : ( NAME | LPAREN fplist RPAREN -> ^( FpList fplist ) );
    public final fpdef_return fpdef() throws RecognitionException {
        fpdef_return retval = new fpdef_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token NAME44=null;
        Token LPAREN45=null;
        Token RPAREN47=null;
        fplist_return fplist46 = null;


        PythonTree NAME44_tree=null;
        PythonTree LPAREN45_tree=null;
        PythonTree RPAREN47_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_fplist=new RewriteRuleSubtreeStream(adaptor,"rule fplist");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:304:7: ( NAME | LPAREN fplist RPAREN -> ^( FpList fplist ) )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==NAME) ) {
                alt18=1;
            }
            else if ( (LA18_0==LPAREN) ) {
                alt18=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("304:1: fpdef : ( NAME | LPAREN fplist RPAREN -> ^( FpList fplist ) );", 18, 0, input);

                throw nvae;
            }
            switch (alt18) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:304:9: NAME
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    NAME44=(Token)input.LT(1);
                    match(input,NAME,FOLLOW_NAME_in_fpdef1520); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NAME44_tree = (PythonTree)adaptor.create(NAME44);
                    adaptor.addChild(root_0, NAME44_tree);
                    }
                    if ( backtracking==0 ) {
                      debug("parsed fpdef NAME");
                    }

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:305:9: LPAREN fplist RPAREN
                    {
                    LPAREN45=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_fpdef1532); if (failed) return retval;
                    if ( backtracking==0 ) stream_LPAREN.add(LPAREN45);

                    pushFollow(FOLLOW_fplist_in_fpdef1534);
                    fplist46=fplist();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_fplist.add(fplist46.getTree());
                    RPAREN47=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_fpdef1536); if (failed) return retval;
                    if ( backtracking==0 ) stream_RPAREN.add(RPAREN47);

                    if ( backtracking==0 ) {
                      debug("parsed fpdef:fplist");
                    }

                    // AST REWRITE
                    // elements: fplist
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 306:6: -> ^( FpList fplist )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:306:9: ^( FpList fplist )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(FpList, "FpList"), root_1);

                        adaptor.addChild(root_1, stream_fplist.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end fpdef

    public static class fplist_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start fplist
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:310:1: fplist : fpdef ( options {greedy=true; } : COMMA fpdef )* ( COMMA )? -> ( fpdef )+ ;
    public final fplist_return fplist() throws RecognitionException {
        fplist_return retval = new fplist_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token COMMA49=null;
        Token COMMA51=null;
        fpdef_return fpdef48 = null;

        fpdef_return fpdef50 = null;


        PythonTree COMMA49_tree=null;
        PythonTree COMMA51_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_fpdef=new RewriteRuleSubtreeStream(adaptor,"rule fpdef");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:310:8: ( fpdef ( options {greedy=true; } : COMMA fpdef )* ( COMMA )? -> ( fpdef )+ )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:310:10: fpdef ( options {greedy=true; } : COMMA fpdef )* ( COMMA )?
            {
            pushFollow(FOLLOW_fpdef_in_fplist1567);
            fpdef48=fpdef();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_fpdef.add(fpdef48.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:310:16: ( options {greedy=true; } : COMMA fpdef )*
            loop19:
            do {
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( (LA19_0==COMMA) ) {
                    int LA19_1 = input.LA(2);

                    if ( (LA19_1==LPAREN||LA19_1==NAME) ) {
                        alt19=1;
                    }


                }


                switch (alt19) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:310:40: COMMA fpdef
            	    {
            	    COMMA49=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_fplist1577); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMA.add(COMMA49);

            	    pushFollow(FOLLOW_fpdef_in_fplist1579);
            	    fpdef50=fpdef();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_fpdef.add(fpdef50.getTree());

            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:310:54: ( COMMA )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==COMMA) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:310:55: COMMA
                    {
                    COMMA51=(Token)input.LT(1);
                    match(input,COMMA,FOLLOW_COMMA_in_fplist1584); if (failed) return retval;
                    if ( backtracking==0 ) stream_COMMA.add(COMMA51);


                    }
                    break;

            }

            if ( backtracking==0 ) {
              debug("parsed fplist");
            }

            // AST REWRITE
            // elements: fpdef
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 312:7: -> ( fpdef )+
            {
                if ( !(stream_fpdef.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_fpdef.hasNext() ) {
                    adaptor.addChild(root_0, stream_fpdef.next());

                }
                stream_fpdef.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end fplist

    public static class stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start stmt
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:316:1: stmt : ( simple_stmt | compound_stmt );
    public final stmt_return stmt() throws RecognitionException {
        stmt_return retval = new stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        simple_stmt_return simple_stmt52 = null;

        compound_stmt_return compound_stmt53 = null;



        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:316:6: ( simple_stmt | compound_stmt )
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==LPAREN||LA21_0==NAME||LA21_0==NOT||(LA21_0>=PLUS && LA21_0<=MINUS)||(LA21_0>=TILDE && LA21_0<=LBRACK)||LA21_0==LCURLY||(LA21_0>=BACKQUOTE && LA21_0<=STRING)||(LA21_0>=170 && LA21_0<=178)||(LA21_0>=180 && LA21_0<=181)||LA21_0==183||LA21_0==194||LA21_0==196) ) {
                alt21=1;
            }
            else if ( (LA21_0==AT||LA21_0==169||LA21_0==184||(LA21_0>=187 && LA21_0<=189)||LA21_0==191||LA21_0==195) ) {
                alt21=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("316:1: stmt : ( simple_stmt | compound_stmt );", 21, 0, input);

                throw nvae;
            }
            switch (alt21) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:316:8: simple_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_simple_stmt_in_stmt1623);
                    simple_stmt52=simple_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, simple_stmt52.getTree());

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:317:8: compound_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_compound_stmt_in_stmt1632);
                    compound_stmt53=compound_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compound_stmt53.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end stmt

    public static class simple_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start simple_stmt
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:321:1: simple_stmt : small_stmt ( options {greedy=true; } : SEMI small_stmt )* ( SEMI )? NEWLINE -> ( small_stmt )+ ;
    public final simple_stmt_return simple_stmt() throws RecognitionException {
        simple_stmt_return retval = new simple_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token SEMI55=null;
        Token SEMI57=null;
        Token NEWLINE58=null;
        small_stmt_return small_stmt54 = null;

        small_stmt_return small_stmt56 = null;


        PythonTree SEMI55_tree=null;
        PythonTree SEMI57_tree=null;
        PythonTree NEWLINE58_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_NEWLINE=new RewriteRuleTokenStream(adaptor,"token NEWLINE");
        RewriteRuleSubtreeStream stream_small_stmt=new RewriteRuleSubtreeStream(adaptor,"rule small_stmt");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:321:13: ( small_stmt ( options {greedy=true; } : SEMI small_stmt )* ( SEMI )? NEWLINE -> ( small_stmt )+ )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:321:15: small_stmt ( options {greedy=true; } : SEMI small_stmt )* ( SEMI )? NEWLINE
            {
            pushFollow(FOLLOW_small_stmt_in_simple_stmt1647);
            small_stmt54=small_stmt();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_small_stmt.add(small_stmt54.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:321:26: ( options {greedy=true; } : SEMI small_stmt )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==SEMI) ) {
                    int LA22_1 = input.LA(2);

                    if ( (LA22_1==LPAREN||LA22_1==NAME||LA22_1==NOT||(LA22_1>=PLUS && LA22_1<=MINUS)||(LA22_1>=TILDE && LA22_1<=LBRACK)||LA22_1==LCURLY||(LA22_1>=BACKQUOTE && LA22_1<=STRING)||(LA22_1>=170 && LA22_1<=178)||(LA22_1>=180 && LA22_1<=181)||LA22_1==183||LA22_1==194||LA22_1==196) ) {
                        alt22=1;
                    }


                }


                switch (alt22) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:321:50: SEMI small_stmt
            	    {
            	    SEMI55=(Token)input.LT(1);
            	    match(input,SEMI,FOLLOW_SEMI_in_simple_stmt1657); if (failed) return retval;
            	    if ( backtracking==0 ) stream_SEMI.add(SEMI55);

            	    pushFollow(FOLLOW_small_stmt_in_simple_stmt1659);
            	    small_stmt56=small_stmt();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_small_stmt.add(small_stmt56.getTree());

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:321:68: ( SEMI )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==SEMI) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:321:69: SEMI
                    {
                    SEMI57=(Token)input.LT(1);
                    match(input,SEMI,FOLLOW_SEMI_in_simple_stmt1664); if (failed) return retval;
                    if ( backtracking==0 ) stream_SEMI.add(SEMI57);


                    }
                    break;

            }

            NEWLINE58=(Token)input.LT(1);
            match(input,NEWLINE,FOLLOW_NEWLINE_in_simple_stmt1668); if (failed) return retval;
            if ( backtracking==0 ) stream_NEWLINE.add(NEWLINE58);


            // AST REWRITE
            // elements: small_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 322:12: -> ( small_stmt )+
            {
                if ( !(stream_small_stmt.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_small_stmt.hasNext() ) {
                    adaptor.addChild(root_0, stream_small_stmt.next());

                }
                stream_small_stmt.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end simple_stmt

    public static class small_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start small_stmt
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:326:1: small_stmt : ( expr_stmt | print_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt );
    public final small_stmt_return small_stmt() throws RecognitionException {
        small_stmt_return retval = new small_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        expr_stmt_return expr_stmt59 = null;

        print_stmt_return print_stmt60 = null;

        del_stmt_return del_stmt61 = null;

        pass_stmt_return pass_stmt62 = null;

        flow_stmt_return flow_stmt63 = null;

        import_stmt_return import_stmt64 = null;

        global_stmt_return global_stmt65 = null;

        exec_stmt_return exec_stmt66 = null;

        assert_stmt_return assert_stmt67 = null;



        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:326:12: ( expr_stmt | print_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt )
            int alt24=9;
            switch ( input.LA(1) ) {
            case LPAREN:
            case NAME:
            case NOT:
            case PLUS:
            case MINUS:
            case TILDE:
            case LBRACK:
            case LCURLY:
            case BACKQUOTE:
            case INT:
            case LONGINT:
            case FLOAT:
            case COMPLEX:
            case STRING:
            case 194:
                {
                alt24=1;
                }
                break;
            case 170:
                {
                alt24=2;
                }
                break;
            case 171:
                {
                alt24=3;
                }
                break;
            case 172:
                {
                alt24=4;
                }
                break;
            case 173:
            case 174:
            case 175:
            case 176:
            case 196:
                {
                alt24=5;
                }
                break;
            case 177:
            case 178:
                {
                alt24=6;
                }
                break;
            case 180:
                {
                alt24=7;
                }
                break;
            case 181:
                {
                alt24=8;
                }
                break;
            case 183:
                {
                alt24=9;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("326:1: small_stmt : ( expr_stmt | print_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt );", 24, 0, input);

                throw nvae;
            }

            switch (alt24) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:326:14: expr_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_expr_stmt_in_small_stmt1706);
                    expr_stmt59=expr_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr_stmt59.getTree());

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:327:14: print_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_print_stmt_in_small_stmt1721);
                    print_stmt60=print_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, print_stmt60.getTree());

                    }
                    break;
                case 3 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:328:14: del_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_del_stmt_in_small_stmt1736);
                    del_stmt61=del_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, del_stmt61.getTree());

                    }
                    break;
                case 4 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:329:14: pass_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_pass_stmt_in_small_stmt1751);
                    pass_stmt62=pass_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, pass_stmt62.getTree());

                    }
                    break;
                case 5 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:330:14: flow_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_flow_stmt_in_small_stmt1766);
                    flow_stmt63=flow_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, flow_stmt63.getTree());

                    }
                    break;
                case 6 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:331:14: import_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_import_stmt_in_small_stmt1781);
                    import_stmt64=import_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, import_stmt64.getTree());

                    }
                    break;
                case 7 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:332:14: global_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_global_stmt_in_small_stmt1796);
                    global_stmt65=global_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, global_stmt65.getTree());

                    }
                    break;
                case 8 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:333:14: exec_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_exec_stmt_in_small_stmt1811);
                    exec_stmt66=exec_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, exec_stmt66.getTree());

                    }
                    break;
                case 9 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:334:14: assert_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_assert_stmt_in_small_stmt1826);
                    assert_stmt67=assert_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, assert_stmt67.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end small_stmt

    public static class expr_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start expr_stmt
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:338:1: expr_stmt : lhs= testlist ( ( augassign yield_expr -> ^( augassign $lhs yield_expr ) ) | ( augassign rhs= testlist -> ^( augassign $lhs $rhs) ) | ( ( assigns ) -> ^( Assign ^( Target $lhs) assigns ) ) | -> $lhs) ;
    public final expr_stmt_return expr_stmt() throws RecognitionException {
        expr_stmt_return retval = new expr_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        testlist_return lhs = null;

        testlist_return rhs = null;

        augassign_return augassign68 = null;

        yield_expr_return yield_expr69 = null;

        augassign_return augassign70 = null;

        assigns_return assigns71 = null;


        RewriteRuleSubtreeStream stream_augassign=new RewriteRuleSubtreeStream(adaptor,"rule augassign");
        RewriteRuleSubtreeStream stream_assigns=new RewriteRuleSubtreeStream(adaptor,"rule assigns");
        RewriteRuleSubtreeStream stream_testlist=new RewriteRuleSubtreeStream(adaptor,"rule testlist");
        RewriteRuleSubtreeStream stream_yield_expr=new RewriteRuleSubtreeStream(adaptor,"rule yield_expr");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:338:11: (lhs= testlist ( ( augassign yield_expr -> ^( augassign $lhs yield_expr ) ) | ( augassign rhs= testlist -> ^( augassign $lhs $rhs) ) | ( ( assigns ) -> ^( Assign ^( Target $lhs) assigns ) ) | -> $lhs) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:338:13: lhs= testlist ( ( augassign yield_expr -> ^( augassign $lhs yield_expr ) ) | ( augassign rhs= testlist -> ^( augassign $lhs $rhs) ) | ( ( assigns ) -> ^( Assign ^( Target $lhs) assigns ) ) | -> $lhs)
            {
            pushFollow(FOLLOW_testlist_in_expr_stmt1849);
            lhs=testlist();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_testlist.add(lhs.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:339:13: ( ( augassign yield_expr -> ^( augassign $lhs yield_expr ) ) | ( augassign rhs= testlist -> ^( augassign $lhs $rhs) ) | ( ( assigns ) -> ^( Assign ^( Target $lhs) assigns ) ) | -> $lhs)
            int alt25=4;
            switch ( input.LA(1) ) {
            case PLUSEQUAL:
            case MINUSEQUAL:
            case STAREQUAL:
            case SLASHEQUAL:
            case PERCENTEQUAL:
            case AMPEREQUAL:
            case VBAREQUAL:
            case CIRCUMFLEXEQUAL:
            case LEFTSHIFTEQUAL:
            case RIGHTSHIFTEQUAL:
            case DOUBLESTAREQUAL:
            case DOUBLESLASHEQUAL:
                {
                int LA25_1 = input.LA(2);

                if ( (LA25_1==LPAREN||LA25_1==NAME||LA25_1==NOT||(LA25_1>=PLUS && LA25_1<=MINUS)||(LA25_1>=TILDE && LA25_1<=LBRACK)||LA25_1==LCURLY||(LA25_1>=BACKQUOTE && LA25_1<=STRING)||LA25_1==194) ) {
                    alt25=2;
                }
                else if ( (LA25_1==196) ) {
                    alt25=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("339:13: ( ( augassign yield_expr -> ^( augassign $lhs yield_expr ) ) | ( augassign rhs= testlist -> ^( augassign $lhs $rhs) ) | ( ( assigns ) -> ^( Assign ^( Target $lhs) assigns ) ) | -> $lhs)", 25, 1, input);

                    throw nvae;
                }
                }
                break;
            case ASSIGN:
                {
                alt25=3;
                }
                break;
            case NEWLINE:
            case SEMI:
                {
                alt25=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("339:13: ( ( augassign yield_expr -> ^( augassign $lhs yield_expr ) ) | ( augassign rhs= testlist -> ^( augassign $lhs $rhs) ) | ( ( assigns ) -> ^( Assign ^( Target $lhs) assigns ) ) | -> $lhs)", 25, 0, input);

                throw nvae;
            }

            switch (alt25) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:339:15: ( augassign yield_expr -> ^( augassign $lhs yield_expr ) )
                    {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:339:15: ( augassign yield_expr -> ^( augassign $lhs yield_expr ) )
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:339:16: augassign yield_expr
                    {
                    pushFollow(FOLLOW_augassign_in_expr_stmt1866);
                    augassign68=augassign();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_augassign.add(augassign68.getTree());
                    pushFollow(FOLLOW_yield_expr_in_expr_stmt1868);
                    yield_expr69=yield_expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_yield_expr.add(yield_expr69.getTree());

                    // AST REWRITE
                    // elements: yield_expr, lhs, augassign
                    // token labels: 
                    // rule labels: lhs, retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"token lhs",lhs!=null?lhs.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 339:37: -> ^( augassign $lhs yield_expr )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:339:40: ^( augassign $lhs yield_expr )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(stream_augassign.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_lhs.next());
                        adaptor.addChild(root_1, stream_yield_expr.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }


                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:340:15: ( augassign rhs= testlist -> ^( augassign $lhs $rhs) )
                    {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:340:15: ( augassign rhs= testlist -> ^( augassign $lhs $rhs) )
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:340:16: augassign rhs= testlist
                    {
                    pushFollow(FOLLOW_augassign_in_expr_stmt1897);
                    augassign70=augassign();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_augassign.add(augassign70.getTree());
                    pushFollow(FOLLOW_testlist_in_expr_stmt1901);
                    rhs=testlist();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_testlist.add(rhs.getTree());

                    // AST REWRITE
                    // elements: rhs, lhs, augassign
                    // token labels: 
                    // rule labels: lhs, retval, rhs
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"token lhs",lhs!=null?lhs.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_rhs=new RewriteRuleSubtreeStream(adaptor,"token rhs",rhs!=null?rhs.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 340:39: -> ^( augassign $lhs $rhs)
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:340:42: ^( augassign $lhs $rhs)
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(stream_augassign.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_lhs.next());
                        adaptor.addChild(root_1, stream_rhs.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }


                    }
                    break;
                case 3 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:341:15: ( ( assigns ) -> ^( Assign ^( Target $lhs) assigns ) )
                    {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:341:15: ( ( assigns ) -> ^( Assign ^( Target $lhs) assigns ) )
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:341:16: ( assigns )
                    {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:341:16: ( assigns )
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:341:17: assigns
                    {
                    pushFollow(FOLLOW_assigns_in_expr_stmt1932);
                    assigns71=assigns();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_assigns.add(assigns71.getTree());

                    }

                    if ( backtracking==0 ) {
                      debug("matched assigns");
                    }

                    // AST REWRITE
                    // elements: assigns, lhs
                    // token labels: 
                    // rule labels: lhs, retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"token lhs",lhs!=null?lhs.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 341:54: -> ^( Assign ^( Target $lhs) assigns )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:341:57: ^( Assign ^( Target $lhs) assigns )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Assign, "Assign"), root_1);

                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:341:66: ^( Target $lhs)
                        {
                        PythonTree root_2 = (PythonTree)adaptor.nil();
                        root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Target, "Target"), root_2);

                        adaptor.addChild(root_2, stream_lhs.next());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_assigns.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }


                    }
                    break;
                case 4 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:342:15: 
                    {

                    // AST REWRITE
                    // elements: lhs
                    // token labels: 
                    // rule labels: lhs, retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"token lhs",lhs!=null?lhs.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 342:15: -> $lhs
                    {
                        adaptor.addChild(root_0, stream_lhs.next());

                    }

                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end expr_stmt

    public static class assigns_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start assigns
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:347:1: assigns : ( ( assign_testlist )+ | ( assign_yield )+ );
    public final assigns_return assigns() throws RecognitionException {
        assigns_return retval = new assigns_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        assign_testlist_return assign_testlist72 = null;

        assign_yield_return assign_yield73 = null;



        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:358:5: ( ( assign_testlist )+ | ( assign_yield )+ )
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==ASSIGN) ) {
                int LA28_1 = input.LA(2);

                if ( (LA28_1==196) ) {
                    alt28=2;
                }
                else if ( (LA28_1==LPAREN||LA28_1==NAME||LA28_1==NOT||(LA28_1>=PLUS && LA28_1<=MINUS)||(LA28_1>=TILDE && LA28_1<=LBRACK)||LA28_1==LCURLY||(LA28_1>=BACKQUOTE && LA28_1<=STRING)||LA28_1==194) ) {
                    alt28=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("347:1: assigns : ( ( assign_testlist )+ | ( assign_yield )+ );", 28, 1, input);

                    throw nvae;
                }
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("347:1: assigns : ( ( assign_testlist )+ | ( assign_yield )+ );", 28, 0, input);

                throw nvae;
            }
            switch (alt28) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:358:7: ( assign_testlist )+
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:358:7: ( assign_testlist )+
                    int cnt26=0;
                    loop26:
                    do {
                        int alt26=2;
                        int LA26_0 = input.LA(1);

                        if ( (LA26_0==ASSIGN) ) {
                            alt26=1;
                        }


                        switch (alt26) {
                    	case 1 :
                    	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:358:7: assign_testlist
                    	    {
                    	    pushFollow(FOLLOW_assign_testlist_in_assigns2017);
                    	    assign_testlist72=assign_testlist();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, assign_testlist72.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt26 >= 1 ) break loop26;
                    	    if (backtracking>0) {failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(26, input);
                                throw eee;
                        }
                        cnt26++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:359:7: ( assign_yield )+
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:359:7: ( assign_yield )+
                    int cnt27=0;
                    loop27:
                    do {
                        int alt27=2;
                        int LA27_0 = input.LA(1);

                        if ( (LA27_0==ASSIGN) ) {
                            alt27=1;
                        }


                        switch (alt27) {
                    	case 1 :
                    	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:359:7: assign_yield
                    	    {
                    	    pushFollow(FOLLOW_assign_yield_in_assigns2026);
                    	    assign_yield73=assign_yield();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, assign_yield73.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt27 >= 1 ) break loop27;
                    	    if (backtracking>0) {failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(27, input);
                                throw eee;
                        }
                        cnt27++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( backtracking==0 ) {

                      PythonTree pt = ((PythonTree)((PythonTree)retval.tree));
                      int children = pt.getChildCount();
                      if (children == 1) {
                          pt.token = new CommonToken(Value, "Value");
                      } else {
                          PythonTree c = (PythonTree)pt.getChild(children - 1);
                          c.token = new CommonToken(Value, "Value");
                      }
                  
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end assigns

    public static class assign_testlist_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start assign_testlist
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:363:1: assign_testlist : ASSIGN testlist -> ^( Target testlist ) ;
    public final assign_testlist_return assign_testlist() throws RecognitionException {
        assign_testlist_return retval = new assign_testlist_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token ASSIGN74=null;
        testlist_return testlist75 = null;


        PythonTree ASSIGN74_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_testlist=new RewriteRuleSubtreeStream(adaptor,"rule testlist");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:364:8: ( ASSIGN testlist -> ^( Target testlist ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:364:10: ASSIGN testlist
            {
            ASSIGN74=(Token)input.LT(1);
            match(input,ASSIGN,FOLLOW_ASSIGN_in_assign_testlist2048); if (failed) return retval;
            if ( backtracking==0 ) stream_ASSIGN.add(ASSIGN74);

            pushFollow(FOLLOW_testlist_in_assign_testlist2050);
            testlist75=testlist();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_testlist.add(testlist75.getTree());

            // AST REWRITE
            // elements: testlist
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 364:26: -> ^( Target testlist )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:364:29: ^( Target testlist )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Target, "Target"), root_1);

                adaptor.addChild(root_1, stream_testlist.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end assign_testlist

    public static class assign_yield_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start assign_yield
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:368:1: assign_yield : ASSIGN yield_expr -> ^( Value yield_expr ) ;
    public final assign_yield_return assign_yield() throws RecognitionException {
        assign_yield_return retval = new assign_yield_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token ASSIGN76=null;
        yield_expr_return yield_expr77 = null;


        PythonTree ASSIGN76_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_yield_expr=new RewriteRuleSubtreeStream(adaptor,"rule yield_expr");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:369:5: ( ASSIGN yield_expr -> ^( Value yield_expr ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:369:7: ASSIGN yield_expr
            {
            ASSIGN76=(Token)input.LT(1);
            match(input,ASSIGN,FOLLOW_ASSIGN_in_assign_yield2079); if (failed) return retval;
            if ( backtracking==0 ) stream_ASSIGN.add(ASSIGN76);

            pushFollow(FOLLOW_yield_expr_in_assign_yield2081);
            yield_expr77=yield_expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_yield_expr.add(yield_expr77.getTree());

            // AST REWRITE
            // elements: yield_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 369:25: -> ^( Value yield_expr )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:369:28: ^( Value yield_expr )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Value, "Value"), root_1);

                adaptor.addChild(root_1, stream_yield_expr.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end assign_yield

    public static class augassign_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start augassign
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:373:1: augassign : ( PLUSEQUAL | MINUSEQUAL | STAREQUAL | SLASHEQUAL | PERCENTEQUAL | AMPEREQUAL | VBAREQUAL | CIRCUMFLEXEQUAL | LEFTSHIFTEQUAL | RIGHTSHIFTEQUAL | DOUBLESTAREQUAL | DOUBLESLASHEQUAL );
    public final augassign_return augassign() throws RecognitionException {
        augassign_return retval = new augassign_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token set78=null;

        PythonTree set78_tree=null;

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:373:11: ( PLUSEQUAL | MINUSEQUAL | STAREQUAL | SLASHEQUAL | PERCENTEQUAL | AMPEREQUAL | VBAREQUAL | CIRCUMFLEXEQUAL | LEFTSHIFTEQUAL | RIGHTSHIFTEQUAL | DOUBLESTAREQUAL | DOUBLESLASHEQUAL )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:
            {
            root_0 = (PythonTree)adaptor.nil();

            set78=(Token)input.LT(1);
            if ( (input.LA(1)>=PLUSEQUAL && input.LA(1)<=DOUBLESLASHEQUAL) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set78));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_augassign0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end augassign

    public static class print_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start print_stmt
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:388:1: print_stmt : 'print' (t1= printlist -> {$t1.newline}? ^( Print ^( Values $t1) ^( Newline ) ) -> ^( Print ^( Values $t1) ) | RIGHTSHIFT t2= printlist -> {$t2.newline}? ^( Print ^( Dest RIGHTSHIFT ) ^( Values $t2) ^( Newline ) ) -> ^( Print ^( Dest RIGHTSHIFT ) ^( Values $t2) ) | -> ^( Print ^( Newline ) ) ) ;
    public final print_stmt_return print_stmt() throws RecognitionException {
        print_stmt_return retval = new print_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal79=null;
        Token RIGHTSHIFT80=null;
        printlist_return t1 = null;

        printlist_return t2 = null;


        PythonTree string_literal79_tree=null;
        PythonTree RIGHTSHIFT80_tree=null;
        RewriteRuleTokenStream stream_RIGHTSHIFT=new RewriteRuleTokenStream(adaptor,"token RIGHTSHIFT");
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleSubtreeStream stream_printlist=new RewriteRuleSubtreeStream(adaptor,"rule printlist");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:388:12: ( 'print' (t1= printlist -> {$t1.newline}? ^( Print ^( Values $t1) ^( Newline ) ) -> ^( Print ^( Values $t1) ) | RIGHTSHIFT t2= printlist -> {$t2.newline}? ^( Print ^( Dest RIGHTSHIFT ) ^( Values $t2) ^( Newline ) ) -> ^( Print ^( Dest RIGHTSHIFT ) ^( Values $t2) ) | -> ^( Print ^( Newline ) ) ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:388:14: 'print' (t1= printlist -> {$t1.newline}? ^( Print ^( Values $t1) ^( Newline ) ) -> ^( Print ^( Values $t1) ) | RIGHTSHIFT t2= printlist -> {$t2.newline}? ^( Print ^( Dest RIGHTSHIFT ) ^( Values $t2) ^( Newline ) ) -> ^( Print ^( Dest RIGHTSHIFT ) ^( Values $t2) ) | -> ^( Print ^( Newline ) ) )
            {
            string_literal79=(Token)input.LT(1);
            match(input,170,FOLLOW_170_in_print_stmt2277); if (failed) return retval;
            if ( backtracking==0 ) stream_170.add(string_literal79);

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:389:14: (t1= printlist -> {$t1.newline}? ^( Print ^( Values $t1) ^( Newline ) ) -> ^( Print ^( Values $t1) ) | RIGHTSHIFT t2= printlist -> {$t2.newline}? ^( Print ^( Dest RIGHTSHIFT ) ^( Values $t2) ^( Newline ) ) -> ^( Print ^( Dest RIGHTSHIFT ) ^( Values $t2) ) | -> ^( Print ^( Newline ) ) )
            int alt29=3;
            switch ( input.LA(1) ) {
            case LPAREN:
            case NAME:
            case NOT:
            case PLUS:
            case MINUS:
            case TILDE:
            case LBRACK:
            case LCURLY:
            case BACKQUOTE:
            case INT:
            case LONGINT:
            case FLOAT:
            case COMPLEX:
            case STRING:
            case 194:
                {
                alt29=1;
                }
                break;
            case RIGHTSHIFT:
                {
                alt29=2;
                }
                break;
            case NEWLINE:
            case SEMI:
                {
                alt29=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("389:14: (t1= printlist -> {$t1.newline}? ^( Print ^( Values $t1) ^( Newline ) ) -> ^( Print ^( Values $t1) ) | RIGHTSHIFT t2= printlist -> {$t2.newline}? ^( Print ^( Dest RIGHTSHIFT ) ^( Values $t2) ^( Newline ) ) -> ^( Print ^( Dest RIGHTSHIFT ) ^( Values $t2) ) | -> ^( Print ^( Newline ) ) )", 29, 0, input);

                throw nvae;
            }

            switch (alt29) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:389:16: t1= printlist
                    {
                    pushFollow(FOLLOW_printlist_in_print_stmt2296);
                    t1=printlist();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_printlist.add(t1.getTree());

                    // AST REWRITE
                    // elements: t1, t1
                    // token labels: 
                    // rule labels: t1, retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_t1=new RewriteRuleSubtreeStream(adaptor,"token t1",t1!=null?t1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 389:29: -> {$t1.newline}? ^( Print ^( Values $t1) ^( Newline ) )
                    if (t1.newline) {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:389:47: ^( Print ^( Values $t1) ^( Newline ) )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Print, "Print"), root_1);

                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:389:55: ^( Values $t1)
                        {
                        PythonTree root_2 = (PythonTree)adaptor.nil();
                        root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Values, "Values"), root_2);

                        adaptor.addChild(root_2, stream_t1.next());

                        adaptor.addChild(root_1, root_2);
                        }
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:389:69: ^( Newline )
                        {
                        PythonTree root_2 = (PythonTree)adaptor.nil();
                        root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Newline, "Newline"), root_2);

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 390:28: -> ^( Print ^( Values $t1) )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:390:31: ^( Print ^( Values $t1) )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Print, "Print"), root_1);

                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:390:39: ^( Values $t1)
                        {
                        PythonTree root_2 = (PythonTree)adaptor.nil();
                        root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Values, "Values"), root_2);

                        adaptor.addChild(root_2, stream_t1.next());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:391:16: RIGHTSHIFT t2= printlist
                    {
                    RIGHTSHIFT80=(Token)input.LT(1);
                    match(input,RIGHTSHIFT,FOLLOW_RIGHTSHIFT_in_print_stmt2372); if (failed) return retval;
                    if ( backtracking==0 ) stream_RIGHTSHIFT.add(RIGHTSHIFT80);

                    pushFollow(FOLLOW_printlist_in_print_stmt2376);
                    t2=printlist();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_printlist.add(t2.getTree());

                    // AST REWRITE
                    // elements: RIGHTSHIFT, t2, t2, RIGHTSHIFT
                    // token labels: 
                    // rule labels: retval, t2
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_t2=new RewriteRuleSubtreeStream(adaptor,"token t2",t2!=null?t2.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 391:40: -> {$t2.newline}? ^( Print ^( Dest RIGHTSHIFT ) ^( Values $t2) ^( Newline ) )
                    if (t2.newline) {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:391:58: ^( Print ^( Dest RIGHTSHIFT ) ^( Values $t2) ^( Newline ) )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Print, "Print"), root_1);

                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:391:66: ^( Dest RIGHTSHIFT )
                        {
                        PythonTree root_2 = (PythonTree)adaptor.nil();
                        root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Dest, "Dest"), root_2);

                        adaptor.addChild(root_2, stream_RIGHTSHIFT.next());

                        adaptor.addChild(root_1, root_2);
                        }
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:391:85: ^( Values $t2)
                        {
                        PythonTree root_2 = (PythonTree)adaptor.nil();
                        root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Values, "Values"), root_2);

                        adaptor.addChild(root_2, stream_t2.next());

                        adaptor.addChild(root_1, root_2);
                        }
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:391:99: ^( Newline )
                        {
                        PythonTree root_2 = (PythonTree)adaptor.nil();
                        root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Newline, "Newline"), root_2);

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 392:39: -> ^( Print ^( Dest RIGHTSHIFT ) ^( Values $t2) )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:392:42: ^( Print ^( Dest RIGHTSHIFT ) ^( Values $t2) )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Print, "Print"), root_1);

                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:392:50: ^( Dest RIGHTSHIFT )
                        {
                        PythonTree root_2 = (PythonTree)adaptor.nil();
                        root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Dest, "Dest"), root_2);

                        adaptor.addChild(root_2, stream_RIGHTSHIFT.next());

                        adaptor.addChild(root_1, root_2);
                        }
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:392:69: ^( Values $t2)
                        {
                        PythonTree root_2 = (PythonTree)adaptor.nil();
                        root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Values, "Values"), root_2);

                        adaptor.addChild(root_2, stream_t2.next());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 3 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:393:16: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 393:16: -> ^( Print ^( Newline ) )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:393:19: ^( Print ^( Newline ) )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Print, "Print"), root_1);

                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:393:27: ^( Newline )
                        {
                        PythonTree root_2 = (PythonTree)adaptor.nil();
                        root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Newline, "Newline"), root_2);

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end print_stmt

    public static class printlist_return extends ParserRuleReturnScope {
        public boolean newline;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start printlist
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:398:1: printlist returns [boolean newline] : ( ( test COMMA )=> test ( options {k=2; } : COMMA test )* (trailcomma= COMMA )? -> ^( Elts ( test )+ ) | test -> ^( Elts test ) );
    public final printlist_return printlist() throws RecognitionException {
        printlist_return retval = new printlist_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token trailcomma=null;
        Token COMMA82=null;
        test_return test81 = null;

        test_return test83 = null;

        test_return test84 = null;


        PythonTree trailcomma_tree=null;
        PythonTree COMMA82_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:399:5: ( ( test COMMA )=> test ( options {k=2; } : COMMA test )* (trailcomma= COMMA )? -> ^( Elts ( test )+ ) | test -> ^( Elts test ) )
            int alt32=2;
            alt32 = dfa32.predict(input);
            switch (alt32) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:399:7: ( test COMMA )=> test ( options {k=2; } : COMMA test )* (trailcomma= COMMA )?
                    {
                    pushFollow(FOLLOW_test_in_printlist2535);
                    test81=test();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_test.add(test81.getTree());
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:399:28: ( options {k=2; } : COMMA test )*
                    loop30:
                    do {
                        int alt30=2;
                        int LA30_0 = input.LA(1);

                        if ( (LA30_0==COMMA) ) {
                            int LA30_1 = input.LA(2);

                            if ( (LA30_1==LPAREN||LA30_1==NAME||LA30_1==NOT||(LA30_1>=PLUS && LA30_1<=MINUS)||(LA30_1>=TILDE && LA30_1<=LBRACK)||LA30_1==LCURLY||(LA30_1>=BACKQUOTE && LA30_1<=STRING)||LA30_1==194) ) {
                                alt30=1;
                            }


                        }


                        switch (alt30) {
                    	case 1 :
                    	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:399:45: COMMA test
                    	    {
                    	    COMMA82=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_printlist2546); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_COMMA.add(COMMA82);

                    	    pushFollow(FOLLOW_test_in_printlist2548);
                    	    test83=test();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_test.add(test83.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop30;
                        }
                    } while (true);

                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:399:58: (trailcomma= COMMA )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==COMMA) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:399:59: trailcomma= COMMA
                            {
                            trailcomma=(Token)input.LT(1);
                            match(input,COMMA,FOLLOW_COMMA_in_printlist2555); if (failed) return retval;
                            if ( backtracking==0 ) stream_COMMA.add(trailcomma);


                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                       if (trailcomma == null) {
                                retval.newline = true;
                            } else {
                                retval.newline = false;
                            }
                          
                    }

                    // AST REWRITE
                    // elements: test
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 406:4: -> ^( Elts ( test )+ )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:406:7: ^( Elts ( test )+ )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Elts, "Elts"), root_1);

                        if ( !(stream_test.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_test.hasNext() ) {
                            adaptor.addChild(root_1, stream_test.next());

                        }
                        stream_test.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:407:7: test
                    {
                    pushFollow(FOLLOW_test_in_printlist2583);
                    test84=test();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_test.add(test84.getTree());
                    if ( backtracking==0 ) {
                      retval.newline = true;
                    }

                    // AST REWRITE
                    // elements: test
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 408:4: -> ^( Elts test )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:408:7: ^( Elts test )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Elts, "Elts"), root_1);

                        adaptor.addChild(root_1, stream_test.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end printlist

    public static class del_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start del_stmt
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:413:1: del_stmt : 'del' exprlist2 -> ^( Delete exprlist2 ) ;
    public final del_stmt_return del_stmt() throws RecognitionException {
        del_stmt_return retval = new del_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal85=null;
        exprlist2_return exprlist286 = null;


        PythonTree string_literal85_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleSubtreeStream stream_exprlist2=new RewriteRuleSubtreeStream(adaptor,"rule exprlist2");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:413:10: ( 'del' exprlist2 -> ^( Delete exprlist2 ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:413:12: 'del' exprlist2
            {
            string_literal85=(Token)input.LT(1);
            match(input,171,FOLLOW_171_in_del_stmt2611); if (failed) return retval;
            if ( backtracking==0 ) stream_171.add(string_literal85);

            pushFollow(FOLLOW_exprlist2_in_del_stmt2613);
            exprlist286=exprlist2();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprlist2.add(exprlist286.getTree());

            // AST REWRITE
            // elements: exprlist2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 414:9: -> ^( Delete exprlist2 )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:414:12: ^( Delete exprlist2 )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Delete, "Delete"), root_1);

                adaptor.addChild(root_1, stream_exprlist2.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end del_stmt

    public static class pass_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start pass_stmt
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:418:1: pass_stmt : 'pass' -> Pass ;
    public final pass_stmt_return pass_stmt() throws RecognitionException {
        pass_stmt_return retval = new pass_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal87=null;

        PythonTree string_literal87_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:418:11: ( 'pass' -> Pass )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:418:13: 'pass'
            {
            string_literal87=(Token)input.LT(1);
            match(input,172,FOLLOW_172_in_pass_stmt2648); if (failed) return retval;
            if ( backtracking==0 ) stream_172.add(string_literal87);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 419:10: -> Pass
            {
                adaptor.addChild(root_0, adaptor.create(Pass, "Pass"));

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end pass_stmt

    public static class flow_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start flow_stmt
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:423:1: flow_stmt : ( break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt );
    public final flow_stmt_return flow_stmt() throws RecognitionException {
        flow_stmt_return retval = new flow_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        break_stmt_return break_stmt88 = null;

        continue_stmt_return continue_stmt89 = null;

        return_stmt_return return_stmt90 = null;

        raise_stmt_return raise_stmt91 = null;

        yield_stmt_return yield_stmt92 = null;



        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:423:11: ( break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt )
            int alt33=5;
            switch ( input.LA(1) ) {
            case 173:
                {
                alt33=1;
                }
                break;
            case 174:
                {
                alt33=2;
                }
                break;
            case 175:
                {
                alt33=3;
                }
                break;
            case 176:
                {
                alt33=4;
                }
                break;
            case 196:
                {
                alt33=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("423:1: flow_stmt : ( break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt );", 33, 0, input);

                throw nvae;
            }

            switch (alt33) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:423:13: break_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_break_stmt_in_flow_stmt2681);
                    break_stmt88=break_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, break_stmt88.getTree());

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:424:13: continue_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_continue_stmt_in_flow_stmt2695);
                    continue_stmt89=continue_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, continue_stmt89.getTree());

                    }
                    break;
                case 3 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:425:13: return_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_return_stmt_in_flow_stmt2709);
                    return_stmt90=return_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, return_stmt90.getTree());

                    }
                    break;
                case 4 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:426:13: raise_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_raise_stmt_in_flow_stmt2723);
                    raise_stmt91=raise_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, raise_stmt91.getTree());

                    }
                    break;
                case 5 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:427:13: yield_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_yield_stmt_in_flow_stmt2737);
                    yield_stmt92=yield_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, yield_stmt92.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end flow_stmt

    public static class break_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start break_stmt
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:431:1: break_stmt : 'break' -> Break ;
    public final break_stmt_return break_stmt() throws RecognitionException {
        break_stmt_return retval = new break_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal93=null;

        PythonTree string_literal93_tree=null;
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:431:12: ( 'break' -> Break )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:431:14: 'break'
            {
            string_literal93=(Token)input.LT(1);
            match(input,173,FOLLOW_173_in_break_stmt2757); if (failed) return retval;
            if ( backtracking==0 ) stream_173.add(string_literal93);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 432:11: -> Break
            {
                adaptor.addChild(root_0, adaptor.create(Break, "Break"));

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end break_stmt

    public static class continue_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start continue_stmt
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:436:1: continue_stmt : 'continue' -> Continue ;
    public final continue_stmt_return continue_stmt() throws RecognitionException {
        continue_stmt_return retval = new continue_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal94=null;

        PythonTree string_literal94_tree=null;
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:436:15: ( 'continue' -> Continue )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:436:17: 'continue'
            {
            string_literal94=(Token)input.LT(1);
            match(input,174,FOLLOW_174_in_continue_stmt2792); if (failed) return retval;
            if ( backtracking==0 ) stream_174.add(string_literal94);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 437:14: -> Continue
            {
                adaptor.addChild(root_0, adaptor.create(Continue, "Continue"));

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end continue_stmt

    public static class return_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start return_stmt
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:441:1: return_stmt : 'return' ( testlist )? -> ^( Return ( ^( Value testlist ) )? ) ;
    public final return_stmt_return return_stmt() throws RecognitionException {
        return_stmt_return retval = new return_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal95=null;
        testlist_return testlist96 = null;


        PythonTree string_literal95_tree=null;
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleSubtreeStream stream_testlist=new RewriteRuleSubtreeStream(adaptor,"rule testlist");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:441:13: ( 'return' ( testlist )? -> ^( Return ( ^( Value testlist ) )? ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:441:15: 'return' ( testlist )?
            {
            string_literal95=(Token)input.LT(1);
            match(input,175,FOLLOW_175_in_return_stmt2833); if (failed) return retval;
            if ( backtracking==0 ) stream_175.add(string_literal95);

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:441:24: ( testlist )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==LPAREN||LA34_0==NAME||LA34_0==NOT||(LA34_0>=PLUS && LA34_0<=MINUS)||(LA34_0>=TILDE && LA34_0<=LBRACK)||LA34_0==LCURLY||(LA34_0>=BACKQUOTE && LA34_0<=STRING)||LA34_0==194) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:441:25: testlist
                    {
                    pushFollow(FOLLOW_testlist_in_return_stmt2836);
                    testlist96=testlist();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_testlist.add(testlist96.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: testlist
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 442:11: -> ^( Return ( ^( Value testlist ) )? )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:442:14: ^( Return ( ^( Value testlist ) )? )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Return, "Return"), root_1);

                // /Users/frank/tmp/trunk/jython/grammar/Python.g:442:23: ( ^( Value testlist ) )?
                if ( stream_testlist.hasNext() ) {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:442:23: ^( Value testlist )
                    {
                    PythonTree root_2 = (PythonTree)adaptor.nil();
                    root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Value, "Value"), root_2);

                    adaptor.addChild(root_2, stream_testlist.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_testlist.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end return_stmt

    public static class yield_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start yield_stmt
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:446:1: yield_stmt : yield_expr ;
    public final yield_stmt_return yield_stmt() throws RecognitionException {
        yield_stmt_return retval = new yield_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        yield_expr_return yield_expr97 = null;



        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:446:12: ( yield_expr )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:446:14: yield_expr
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_yield_expr_in_yield_stmt2883);
            yield_expr97=yield_expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, yield_expr97.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end yield_stmt

    public static class raise_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start raise_stmt
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:450:1: raise_stmt : 'raise' (t1= test ( COMMA t2= test ( COMMA t3= test )? )? )? -> ^( Raise ( ^( Type $t1) )? ( ^( Inst $t2) )? ( ^( Tback $t3) )? ) ;
    public final raise_stmt_return raise_stmt() throws RecognitionException {
        raise_stmt_return retval = new raise_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal98=null;
        Token COMMA99=null;
        Token COMMA100=null;
        test_return t1 = null;

        test_return t2 = null;

        test_return t3 = null;


        PythonTree string_literal98_tree=null;
        PythonTree COMMA99_tree=null;
        PythonTree COMMA100_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:450:11: ( 'raise' (t1= test ( COMMA t2= test ( COMMA t3= test )? )? )? -> ^( Raise ( ^( Type $t1) )? ( ^( Inst $t2) )? ( ^( Tback $t3) )? ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:450:13: 'raise' (t1= test ( COMMA t2= test ( COMMA t3= test )? )? )?
            {
            string_literal98=(Token)input.LT(1);
            match(input,176,FOLLOW_176_in_raise_stmt2903); if (failed) return retval;
            if ( backtracking==0 ) stream_176.add(string_literal98);

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:450:21: (t1= test ( COMMA t2= test ( COMMA t3= test )? )? )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==LPAREN||LA37_0==NAME||LA37_0==NOT||(LA37_0>=PLUS && LA37_0<=MINUS)||(LA37_0>=TILDE && LA37_0<=LBRACK)||LA37_0==LCURLY||(LA37_0>=BACKQUOTE && LA37_0<=STRING)||LA37_0==194) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:450:22: t1= test ( COMMA t2= test ( COMMA t3= test )? )?
                    {
                    pushFollow(FOLLOW_test_in_raise_stmt2908);
                    t1=test();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_test.add(t1.getTree());
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:450:30: ( COMMA t2= test ( COMMA t3= test )? )?
                    int alt36=2;
                    int LA36_0 = input.LA(1);

                    if ( (LA36_0==COMMA) ) {
                        alt36=1;
                    }
                    switch (alt36) {
                        case 1 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:450:31: COMMA t2= test ( COMMA t3= test )?
                            {
                            COMMA99=(Token)input.LT(1);
                            match(input,COMMA,FOLLOW_COMMA_in_raise_stmt2911); if (failed) return retval;
                            if ( backtracking==0 ) stream_COMMA.add(COMMA99);

                            pushFollow(FOLLOW_test_in_raise_stmt2915);
                            t2=test();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_test.add(t2.getTree());
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:450:45: ( COMMA t3= test )?
                            int alt35=2;
                            int LA35_0 = input.LA(1);

                            if ( (LA35_0==COMMA) ) {
                                alt35=1;
                            }
                            switch (alt35) {
                                case 1 :
                                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:450:46: COMMA t3= test
                                    {
                                    COMMA100=(Token)input.LT(1);
                                    match(input,COMMA,FOLLOW_COMMA_in_raise_stmt2918); if (failed) return retval;
                                    if ( backtracking==0 ) stream_COMMA.add(COMMA100);

                                    pushFollow(FOLLOW_test_in_raise_stmt2922);
                                    t3=test();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_test.add(t3.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: t1, t3, t2
            // token labels: 
            // rule labels: t1, t3, retval, t2
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_t1=new RewriteRuleSubtreeStream(adaptor,"token t1",t1!=null?t1.tree:null);
            RewriteRuleSubtreeStream stream_t3=new RewriteRuleSubtreeStream(adaptor,"token t3",t3!=null?t3.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_t2=new RewriteRuleSubtreeStream(adaptor,"token t2",t2!=null?t2.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 451:11: -> ^( Raise ( ^( Type $t1) )? ( ^( Inst $t2) )? ( ^( Tback $t3) )? )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:451:14: ^( Raise ( ^( Type $t1) )? ( ^( Inst $t2) )? ( ^( Tback $t3) )? )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Raise, "Raise"), root_1);

                // /Users/frank/tmp/trunk/jython/grammar/Python.g:451:22: ( ^( Type $t1) )?
                if ( stream_t1.hasNext() ) {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:451:22: ^( Type $t1)
                    {
                    PythonTree root_2 = (PythonTree)adaptor.nil();
                    root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Type, "Type"), root_2);

                    adaptor.addChild(root_2, stream_t1.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_t1.reset();
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:451:35: ( ^( Inst $t2) )?
                if ( stream_t2.hasNext() ) {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:451:35: ^( Inst $t2)
                    {
                    PythonTree root_2 = (PythonTree)adaptor.nil();
                    root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Inst, "Inst"), root_2);

                    adaptor.addChild(root_2, stream_t2.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_t2.reset();
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:451:48: ( ^( Tback $t3) )?
                if ( stream_t3.hasNext() ) {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:451:48: ^( Tback $t3)
                    {
                    PythonTree root_2 = (PythonTree)adaptor.nil();
                    root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Tback, "Tback"), root_2);

                    adaptor.addChild(root_2, stream_t3.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_t3.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end raise_stmt

    public static class import_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start import_stmt
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:455:1: import_stmt : ( import_name | import_from );
    public final import_stmt_return import_stmt() throws RecognitionException {
        import_stmt_return retval = new import_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        import_name_return import_name101 = null;

        import_from_return import_from102 = null;



        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:455:13: ( import_name | import_from )
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==177) ) {
                alt38=1;
            }
            else if ( (LA38_0==178) ) {
                alt38=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("455:1: import_stmt : ( import_name | import_from );", 38, 0, input);

                throw nvae;
            }
            switch (alt38) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:455:15: import_name
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_import_name_in_import_stmt2988);
                    import_name101=import_name();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, import_name101.getTree());

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:456:15: import_from
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_import_from_in_import_stmt3004);
                    import_from102=import_from();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, import_from102.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end import_stmt

    public static class import_name_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start import_name
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:460:1: import_name : 'import' dotted_as_names -> ^( Import dotted_as_names ) ;
    public final import_name_return import_name() throws RecognitionException {
        import_name_return retval = new import_name_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal103=null;
        dotted_as_names_return dotted_as_names104 = null;


        PythonTree string_literal103_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleSubtreeStream stream_dotted_as_names=new RewriteRuleSubtreeStream(adaptor,"rule dotted_as_names");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:460:13: ( 'import' dotted_as_names -> ^( Import dotted_as_names ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:460:15: 'import' dotted_as_names
            {
            string_literal103=(Token)input.LT(1);
            match(input,177,FOLLOW_177_in_import_name3026); if (failed) return retval;
            if ( backtracking==0 ) stream_177.add(string_literal103);

            pushFollow(FOLLOW_dotted_as_names_in_import_name3028);
            dotted_as_names104=dotted_as_names();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_dotted_as_names.add(dotted_as_names104.getTree());

            // AST REWRITE
            // elements: dotted_as_names
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 461:12: -> ^( Import dotted_as_names )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:461:15: ^( Import dotted_as_names )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Import, "Import"), root_1);

                adaptor.addChild(root_1, stream_dotted_as_names.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end import_name

    public static class import_from_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start import_from
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:466:1: import_from : 'from' ( ( DOT )* dotted_name | ( DOT )+ ) 'import' ( STAR -> ^( ImportFrom ( ^( Level ( DOT )* ) )? ( ^( Name dotted_name ) )? ^( Import STAR ) ) | import_as_names -> ^( ImportFrom ( ^( Level ( DOT )* ) )? ( ^( Name dotted_name ) )? ^( Import import_as_names ) ) | LPAREN import_as_names RPAREN -> ^( ImportFrom ( ^( Level ( DOT )* ) )? ( ^( Name dotted_name ) )? ^( Import import_as_names ) ) ) ;
    public final import_from_return import_from() throws RecognitionException {
        import_from_return retval = new import_from_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal105=null;
        Token DOT106=null;
        Token DOT108=null;
        Token string_literal109=null;
        Token STAR110=null;
        Token LPAREN112=null;
        Token RPAREN114=null;
        dotted_name_return dotted_name107 = null;

        import_as_names_return import_as_names111 = null;

        import_as_names_return import_as_names113 = null;


        PythonTree string_literal105_tree=null;
        PythonTree DOT106_tree=null;
        PythonTree DOT108_tree=null;
        PythonTree string_literal109_tree=null;
        PythonTree STAR110_tree=null;
        PythonTree LPAREN112_tree=null;
        PythonTree RPAREN114_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_dotted_name=new RewriteRuleSubtreeStream(adaptor,"rule dotted_name");
        RewriteRuleSubtreeStream stream_import_as_names=new RewriteRuleSubtreeStream(adaptor,"rule import_as_names");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:466:12: ( 'from' ( ( DOT )* dotted_name | ( DOT )+ ) 'import' ( STAR -> ^( ImportFrom ( ^( Level ( DOT )* ) )? ( ^( Name dotted_name ) )? ^( Import STAR ) ) | import_as_names -> ^( ImportFrom ( ^( Level ( DOT )* ) )? ( ^( Name dotted_name ) )? ^( Import import_as_names ) ) | LPAREN import_as_names RPAREN -> ^( ImportFrom ( ^( Level ( DOT )* ) )? ( ^( Name dotted_name ) )? ^( Import import_as_names ) ) ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:466:14: 'from' ( ( DOT )* dotted_name | ( DOT )+ ) 'import' ( STAR -> ^( ImportFrom ( ^( Level ( DOT )* ) )? ( ^( Name dotted_name ) )? ^( Import STAR ) ) | import_as_names -> ^( ImportFrom ( ^( Level ( DOT )* ) )? ( ^( Name dotted_name ) )? ^( Import import_as_names ) ) | LPAREN import_as_names RPAREN -> ^( ImportFrom ( ^( Level ( DOT )* ) )? ( ^( Name dotted_name ) )? ^( Import import_as_names ) ) )
            {
            string_literal105=(Token)input.LT(1);
            match(input,178,FOLLOW_178_in_import_from3069); if (failed) return retval;
            if ( backtracking==0 ) stream_178.add(string_literal105);

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:466:21: ( ( DOT )* dotted_name | ( DOT )+ )
            int alt41=2;
            alt41 = dfa41.predict(input);
            switch (alt41) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:466:22: ( DOT )* dotted_name
                    {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:466:22: ( DOT )*
                    loop39:
                    do {
                        int alt39=2;
                        int LA39_0 = input.LA(1);

                        if ( (LA39_0==DOT) ) {
                            alt39=1;
                        }


                        switch (alt39) {
                    	case 1 :
                    	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:466:22: DOT
                    	    {
                    	    DOT106=(Token)input.LT(1);
                    	    match(input,DOT,FOLLOW_DOT_in_import_from3072); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_DOT.add(DOT106);


                    	    }
                    	    break;

                    	default :
                    	    break loop39;
                        }
                    } while (true);

                    pushFollow(FOLLOW_dotted_name_in_import_from3075);
                    dotted_name107=dotted_name();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_dotted_name.add(dotted_name107.getTree());

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:466:41: ( DOT )+
                    {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:466:41: ( DOT )+
                    int cnt40=0;
                    loop40:
                    do {
                        int alt40=2;
                        int LA40_0 = input.LA(1);

                        if ( (LA40_0==DOT) ) {
                            alt40=1;
                        }


                        switch (alt40) {
                    	case 1 :
                    	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:466:41: DOT
                    	    {
                    	    DOT108=(Token)input.LT(1);
                    	    match(input,DOT,FOLLOW_DOT_in_import_from3079); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_DOT.add(DOT108);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt40 >= 1 ) break loop40;
                    	    if (backtracking>0) {failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(40, input);
                                throw eee;
                        }
                        cnt40++;
                    } while (true);


                    }
                    break;

            }

            string_literal109=(Token)input.LT(1);
            match(input,177,FOLLOW_177_in_import_from3083); if (failed) return retval;
            if ( backtracking==0 ) stream_177.add(string_literal109);

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:467:15: ( STAR -> ^( ImportFrom ( ^( Level ( DOT )* ) )? ( ^( Name dotted_name ) )? ^( Import STAR ) ) | import_as_names -> ^( ImportFrom ( ^( Level ( DOT )* ) )? ( ^( Name dotted_name ) )? ^( Import import_as_names ) ) | LPAREN import_as_names RPAREN -> ^( ImportFrom ( ^( Level ( DOT )* ) )? ( ^( Name dotted_name ) )? ^( Import import_as_names ) ) )
            int alt42=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt42=1;
                }
                break;
            case NAME:
                {
                alt42=2;
                }
                break;
            case LPAREN:
                {
                alt42=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("467:15: ( STAR -> ^( ImportFrom ( ^( Level ( DOT )* ) )? ( ^( Name dotted_name ) )? ^( Import STAR ) ) | import_as_names -> ^( ImportFrom ( ^( Level ( DOT )* ) )? ( ^( Name dotted_name ) )? ^( Import import_as_names ) ) | LPAREN import_as_names RPAREN -> ^( ImportFrom ( ^( Level ( DOT )* ) )? ( ^( Name dotted_name ) )? ^( Import import_as_names ) ) )", 42, 0, input);

                throw nvae;
            }

            switch (alt42) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:467:16: STAR
                    {
                    STAR110=(Token)input.LT(1);
                    match(input,STAR,FOLLOW_STAR_in_import_from3100); if (failed) return retval;
                    if ( backtracking==0 ) stream_STAR.add(STAR110);


                    // AST REWRITE
                    // elements: dotted_name, DOT, STAR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 468:14: -> ^( ImportFrom ( ^( Level ( DOT )* ) )? ( ^( Name dotted_name ) )? ^( Import STAR ) )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:468:17: ^( ImportFrom ( ^( Level ( DOT )* ) )? ( ^( Name dotted_name ) )? ^( Import STAR ) )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(ImportFrom, "ImportFrom"), root_1);

                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:468:30: ( ^( Level ( DOT )* ) )?
                        if ( stream_DOT.hasNext() ) {
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:468:30: ^( Level ( DOT )* )
                            {
                            PythonTree root_2 = (PythonTree)adaptor.nil();
                            root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Level, "Level"), root_2);

                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:468:38: ( DOT )*
                            while ( stream_DOT.hasNext() ) {
                                adaptor.addChild(root_2, stream_DOT.next());

                            }
                            stream_DOT.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_DOT.reset();
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:468:45: ( ^( Name dotted_name ) )?
                        if ( stream_dotted_name.hasNext() ) {
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:468:45: ^( Name dotted_name )
                            {
                            PythonTree root_2 = (PythonTree)adaptor.nil();
                            root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Name, "Name"), root_2);

                            adaptor.addChild(root_2, stream_dotted_name.next());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_dotted_name.reset();
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:468:66: ^( Import STAR )
                        {
                        PythonTree root_2 = (PythonTree)adaptor.nil();
                        root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Import, "Import"), root_2);

                        adaptor.addChild(root_2, stream_STAR.next());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:469:17: import_as_names
                    {
                    pushFollow(FOLLOW_import_as_names_in_import_from3158);
                    import_as_names111=import_as_names();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_import_as_names.add(import_as_names111.getTree());

                    // AST REWRITE
                    // elements: import_as_names, dotted_name, DOT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 470:14: -> ^( ImportFrom ( ^( Level ( DOT )* ) )? ( ^( Name dotted_name ) )? ^( Import import_as_names ) )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:470:17: ^( ImportFrom ( ^( Level ( DOT )* ) )? ( ^( Name dotted_name ) )? ^( Import import_as_names ) )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(ImportFrom, "ImportFrom"), root_1);

                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:470:30: ( ^( Level ( DOT )* ) )?
                        if ( stream_DOT.hasNext() ) {
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:470:30: ^( Level ( DOT )* )
                            {
                            PythonTree root_2 = (PythonTree)adaptor.nil();
                            root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Level, "Level"), root_2);

                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:470:38: ( DOT )*
                            while ( stream_DOT.hasNext() ) {
                                adaptor.addChild(root_2, stream_DOT.next());

                            }
                            stream_DOT.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_DOT.reset();
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:470:45: ( ^( Name dotted_name ) )?
                        if ( stream_dotted_name.hasNext() ) {
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:470:45: ^( Name dotted_name )
                            {
                            PythonTree root_2 = (PythonTree)adaptor.nil();
                            root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Name, "Name"), root_2);

                            adaptor.addChild(root_2, stream_dotted_name.next());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_dotted_name.reset();
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:470:66: ^( Import import_as_names )
                        {
                        PythonTree root_2 = (PythonTree)adaptor.nil();
                        root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Import, "Import"), root_2);

                        adaptor.addChild(root_2, stream_import_as_names.next());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 3 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:471:17: LPAREN import_as_names RPAREN
                    {
                    LPAREN112=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_import_from3216); if (failed) return retval;
                    if ( backtracking==0 ) stream_LPAREN.add(LPAREN112);

                    pushFollow(FOLLOW_import_as_names_in_import_from3218);
                    import_as_names113=import_as_names();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_import_as_names.add(import_as_names113.getTree());
                    RPAREN114=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_import_from3220); if (failed) return retval;
                    if ( backtracking==0 ) stream_RPAREN.add(RPAREN114);


                    // AST REWRITE
                    // elements: dotted_name, import_as_names, DOT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 472:14: -> ^( ImportFrom ( ^( Level ( DOT )* ) )? ( ^( Name dotted_name ) )? ^( Import import_as_names ) )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:472:17: ^( ImportFrom ( ^( Level ( DOT )* ) )? ( ^( Name dotted_name ) )? ^( Import import_as_names ) )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(ImportFrom, "ImportFrom"), root_1);

                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:472:30: ( ^( Level ( DOT )* ) )?
                        if ( stream_DOT.hasNext() ) {
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:472:30: ^( Level ( DOT )* )
                            {
                            PythonTree root_2 = (PythonTree)adaptor.nil();
                            root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Level, "Level"), root_2);

                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:472:38: ( DOT )*
                            while ( stream_DOT.hasNext() ) {
                                adaptor.addChild(root_2, stream_DOT.next());

                            }
                            stream_DOT.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_DOT.reset();
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:472:45: ( ^( Name dotted_name ) )?
                        if ( stream_dotted_name.hasNext() ) {
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:472:45: ^( Name dotted_name )
                            {
                            PythonTree root_2 = (PythonTree)adaptor.nil();
                            root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Name, "Name"), root_2);

                            adaptor.addChild(root_2, stream_dotted_name.next());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_dotted_name.reset();
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:472:66: ^( Import import_as_names )
                        {
                        PythonTree root_2 = (PythonTree)adaptor.nil();
                        root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Import, "Import"), root_2);

                        adaptor.addChild(root_2, stream_import_as_names.next());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end import_from

    public static class import_as_names_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start import_as_names
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:477:1: import_as_names : import_as_name ( COMMA import_as_name )* ( COMMA )? ;
    public final import_as_names_return import_as_names() throws RecognitionException {
        import_as_names_return retval = new import_as_names_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token COMMA116=null;
        Token COMMA118=null;
        import_as_name_return import_as_name115 = null;

        import_as_name_return import_as_name117 = null;


        PythonTree COMMA116_tree=null;
        PythonTree COMMA118_tree=null;

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:477:17: ( import_as_name ( COMMA import_as_name )* ( COMMA )? )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:477:19: import_as_name ( COMMA import_as_name )* ( COMMA )?
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_import_as_name_in_import_as_names3297);
            import_as_name115=import_as_name();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, import_as_name115.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:477:34: ( COMMA import_as_name )*
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);

                if ( (LA43_0==COMMA) ) {
                    int LA43_1 = input.LA(2);

                    if ( (LA43_1==NAME) ) {
                        alt43=1;
                    }


                }


                switch (alt43) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:477:35: COMMA import_as_name
            	    {
            	    COMMA116=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_import_as_names3300); if (failed) return retval;
            	    pushFollow(FOLLOW_import_as_name_in_import_as_names3303);
            	    import_as_name117=import_as_name();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, import_as_name117.getTree());

            	    }
            	    break;

            	default :
            	    break loop43;
                }
            } while (true);

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:477:59: ( COMMA )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==COMMA) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:477:60: COMMA
                    {
                    COMMA118=(Token)input.LT(1);
                    match(input,COMMA,FOLLOW_COMMA_in_import_as_names3308); if (failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end import_as_names

    public static class import_as_name_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start import_as_name
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:481:1: import_as_name : name= NAME ( 'as' asname= NAME )? -> ^( Alias $name ( ^( Asname $asname) )? ) ;
    public final import_as_name_return import_as_name() throws RecognitionException {
        import_as_name_return retval = new import_as_name_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token name=null;
        Token asname=null;
        Token string_literal119=null;

        PythonTree name_tree=null;
        PythonTree asname_tree=null;
        PythonTree string_literal119_tree=null;
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:481:16: (name= NAME ( 'as' asname= NAME )? -> ^( Alias $name ( ^( Asname $asname) )? ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:481:18: name= NAME ( 'as' asname= NAME )?
            {
            name=(Token)input.LT(1);
            match(input,NAME,FOLLOW_NAME_in_import_as_name3339); if (failed) return retval;
            if ( backtracking==0 ) stream_NAME.add(name);

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:481:28: ( 'as' asname= NAME )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==179) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:481:29: 'as' asname= NAME
                    {
                    string_literal119=(Token)input.LT(1);
                    match(input,179,FOLLOW_179_in_import_as_name3342); if (failed) return retval;
                    if ( backtracking==0 ) stream_179.add(string_literal119);

                    asname=(Token)input.LT(1);
                    match(input,NAME,FOLLOW_NAME_in_import_as_name3346); if (failed) return retval;
                    if ( backtracking==0 ) stream_NAME.add(asname);


                    }
                    break;

            }


            // AST REWRITE
            // elements: asname, name
            // token labels: asname, name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_asname=new RewriteRuleTokenStream(adaptor,"token asname",asname);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 482:15: -> ^( Alias $name ( ^( Asname $asname) )? )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:482:18: ^( Alias $name ( ^( Asname $asname) )? )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Alias, "Alias"), root_1);

                adaptor.addChild(root_1, stream_name.next());
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:482:32: ( ^( Asname $asname) )?
                if ( stream_asname.hasNext() ) {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:482:32: ^( Asname $asname)
                    {
                    PythonTree root_2 = (PythonTree)adaptor.nil();
                    root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Asname, "Asname"), root_2);

                    adaptor.addChild(root_2, stream_asname.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_asname.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end import_as_name

    public static class dotted_as_name_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dotted_as_name
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:487:1: dotted_as_name : dotted_name ( 'as' asname= NAME )? -> ^( Alias dotted_name ( ^( Asname NAME ) )? ) ;
    public final dotted_as_name_return dotted_as_name() throws RecognitionException {
        dotted_as_name_return retval = new dotted_as_name_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token asname=null;
        Token string_literal121=null;
        dotted_name_return dotted_name120 = null;


        PythonTree asname_tree=null;
        PythonTree string_literal121_tree=null;
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleSubtreeStream stream_dotted_name=new RewriteRuleSubtreeStream(adaptor,"rule dotted_name");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:487:16: ( dotted_name ( 'as' asname= NAME )? -> ^( Alias dotted_name ( ^( Asname NAME ) )? ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:487:18: dotted_name ( 'as' asname= NAME )?
            {
            pushFollow(FOLLOW_dotted_name_in_dotted_as_name3405);
            dotted_name120=dotted_name();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_dotted_name.add(dotted_name120.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:487:30: ( 'as' asname= NAME )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==179) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:487:31: 'as' asname= NAME
                    {
                    string_literal121=(Token)input.LT(1);
                    match(input,179,FOLLOW_179_in_dotted_as_name3408); if (failed) return retval;
                    if ( backtracking==0 ) stream_179.add(string_literal121);

                    asname=(Token)input.LT(1);
                    match(input,NAME,FOLLOW_NAME_in_dotted_as_name3412); if (failed) return retval;
                    if ( backtracking==0 ) stream_NAME.add(asname);


                    }
                    break;

            }


            // AST REWRITE
            // elements: dotted_name, NAME
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 488:15: -> ^( Alias dotted_name ( ^( Asname NAME ) )? )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:488:18: ^( Alias dotted_name ( ^( Asname NAME ) )? )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Alias, "Alias"), root_1);

                adaptor.addChild(root_1, stream_dotted_name.next());
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:488:38: ( ^( Asname NAME ) )?
                if ( stream_NAME.hasNext() ) {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:488:38: ^( Asname NAME )
                    {
                    PythonTree root_2 = (PythonTree)adaptor.nil();
                    root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Asname, "Asname"), root_2);

                    adaptor.addChild(root_2, stream_NAME.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_NAME.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dotted_as_name

    public static class dotted_as_names_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dotted_as_names
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:492:1: dotted_as_names : dotted_as_name ( COMMA dotted_as_name )* ;
    public final dotted_as_names_return dotted_as_names() throws RecognitionException {
        dotted_as_names_return retval = new dotted_as_names_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token COMMA123=null;
        dotted_as_name_return dotted_as_name122 = null;

        dotted_as_name_return dotted_as_name124 = null;


        PythonTree COMMA123_tree=null;

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:492:17: ( dotted_as_name ( COMMA dotted_as_name )* )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:492:19: dotted_as_name ( COMMA dotted_as_name )*
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_dotted_as_name_in_dotted_as_names3468);
            dotted_as_name122=dotted_as_name();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, dotted_as_name122.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:492:34: ( COMMA dotted_as_name )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==COMMA) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:492:35: COMMA dotted_as_name
            	    {
            	    COMMA123=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_dotted_as_names3471); if (failed) return retval;
            	    pushFollow(FOLLOW_dotted_as_name_in_dotted_as_names3474);
            	    dotted_as_name124=dotted_as_name();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, dotted_as_name124.getTree());

            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dotted_as_names

    public static class dotted_name_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dotted_name
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:495:1: dotted_name : NAME ( DOT NAME )* ;
    public final dotted_name_return dotted_name() throws RecognitionException {
        dotted_name_return retval = new dotted_name_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token NAME125=null;
        Token DOT126=null;
        Token NAME127=null;

        PythonTree NAME125_tree=null;
        PythonTree DOT126_tree=null;
        PythonTree NAME127_tree=null;

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:495:13: ( NAME ( DOT NAME )* )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:495:15: NAME ( DOT NAME )*
            {
            root_0 = (PythonTree)adaptor.nil();

            NAME125=(Token)input.LT(1);
            match(input,NAME,FOLLOW_NAME_in_dotted_name3501); if (failed) return retval;
            if ( backtracking==0 ) {
            NAME125_tree = (PythonTree)adaptor.create(NAME125);
            adaptor.addChild(root_0, NAME125_tree);
            }
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:495:20: ( DOT NAME )*
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==DOT) ) {
                    alt48=1;
                }


                switch (alt48) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:495:21: DOT NAME
            	    {
            	    DOT126=(Token)input.LT(1);
            	    match(input,DOT,FOLLOW_DOT_in_dotted_name3504); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    DOT126_tree = (PythonTree)adaptor.create(DOT126);
            	    adaptor.addChild(root_0, DOT126_tree);
            	    }
            	    NAME127=(Token)input.LT(1);
            	    match(input,NAME,FOLLOW_NAME_in_dotted_name3506); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    NAME127_tree = (PythonTree)adaptor.create(NAME127);
            	    adaptor.addChild(root_0, NAME127_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dotted_name

    public static class global_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start global_stmt
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:499:1: global_stmt : 'global' NAME ( COMMA NAME )* -> ^( Global ( NAME )+ ) ;
    public final global_stmt_return global_stmt() throws RecognitionException {
        global_stmt_return retval = new global_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal128=null;
        Token NAME129=null;
        Token COMMA130=null;
        Token NAME131=null;

        PythonTree string_literal128_tree=null;
        PythonTree NAME129_tree=null;
        PythonTree COMMA130_tree=null;
        PythonTree NAME131_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_180=new RewriteRuleTokenStream(adaptor,"token 180");

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:499:13: ( 'global' NAME ( COMMA NAME )* -> ^( Global ( NAME )+ ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:499:15: 'global' NAME ( COMMA NAME )*
            {
            string_literal128=(Token)input.LT(1);
            match(input,180,FOLLOW_180_in_global_stmt3530); if (failed) return retval;
            if ( backtracking==0 ) stream_180.add(string_literal128);

            NAME129=(Token)input.LT(1);
            match(input,NAME,FOLLOW_NAME_in_global_stmt3532); if (failed) return retval;
            if ( backtracking==0 ) stream_NAME.add(NAME129);

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:499:29: ( COMMA NAME )*
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( (LA49_0==COMMA) ) {
                    alt49=1;
                }


                switch (alt49) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:499:30: COMMA NAME
            	    {
            	    COMMA130=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_global_stmt3535); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMA.add(COMMA130);

            	    NAME131=(Token)input.LT(1);
            	    match(input,NAME,FOLLOW_NAME_in_global_stmt3537); if (failed) return retval;
            	    if ( backtracking==0 ) stream_NAME.add(NAME131);


            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);


            // AST REWRITE
            // elements: NAME
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 500:12: -> ^( Global ( NAME )+ )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:500:15: ^( Global ( NAME )+ )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Global, "Global"), root_1);

                if ( !(stream_NAME.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_NAME.hasNext() ) {
                    adaptor.addChild(root_1, stream_NAME.next());

                }
                stream_NAME.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end global_stmt

    public static class exec_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start exec_stmt
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:504:1: exec_stmt : 'exec' expr ( 'in' t1= test ( COMMA t2= test )? )? -> ^( Exec expr ( ^( Globals $t1) )? ( ^( Locals $t2) )? ) ;
    public final exec_stmt_return exec_stmt() throws RecognitionException {
        exec_stmt_return retval = new exec_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal132=null;
        Token string_literal134=null;
        Token COMMA135=null;
        test_return t1 = null;

        test_return t2 = null;

        expr_return expr133 = null;


        PythonTree string_literal132_tree=null;
        PythonTree string_literal134_tree=null;
        PythonTree COMMA135_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:504:11: ( 'exec' expr ( 'in' t1= test ( COMMA t2= test )? )? -> ^( Exec expr ( ^( Globals $t1) )? ( ^( Locals $t2) )? ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:504:13: 'exec' expr ( 'in' t1= test ( COMMA t2= test )? )?
            {
            string_literal132=(Token)input.LT(1);
            match(input,181,FOLLOW_181_in_exec_stmt3581); if (failed) return retval;
            if ( backtracking==0 ) stream_181.add(string_literal132);

            pushFollow(FOLLOW_expr_in_exec_stmt3583);
            expr133=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_expr.add(expr133.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:504:25: ( 'in' t1= test ( COMMA t2= test )? )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==182) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:504:26: 'in' t1= test ( COMMA t2= test )?
                    {
                    string_literal134=(Token)input.LT(1);
                    match(input,182,FOLLOW_182_in_exec_stmt3586); if (failed) return retval;
                    if ( backtracking==0 ) stream_182.add(string_literal134);

                    pushFollow(FOLLOW_test_in_exec_stmt3590);
                    t1=test();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_test.add(t1.getTree());
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:504:39: ( COMMA t2= test )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==COMMA) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:504:40: COMMA t2= test
                            {
                            COMMA135=(Token)input.LT(1);
                            match(input,COMMA,FOLLOW_COMMA_in_exec_stmt3593); if (failed) return retval;
                            if ( backtracking==0 ) stream_COMMA.add(COMMA135);

                            pushFollow(FOLLOW_test_in_exec_stmt3597);
                            t2=test();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_test.add(t2.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: t1, t2, expr
            // token labels: 
            // rule labels: t1, retval, t2
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_t1=new RewriteRuleSubtreeStream(adaptor,"token t1",t1!=null?t1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_t2=new RewriteRuleSubtreeStream(adaptor,"token t2",t2!=null?t2.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 505:10: -> ^( Exec expr ( ^( Globals $t1) )? ( ^( Locals $t2) )? )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:505:13: ^( Exec expr ( ^( Globals $t1) )? ( ^( Locals $t2) )? )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Exec, "Exec"), root_1);

                adaptor.addChild(root_1, stream_expr.next());
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:505:25: ( ^( Globals $t1) )?
                if ( stream_t1.hasNext() ) {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:505:25: ^( Globals $t1)
                    {
                    PythonTree root_2 = (PythonTree)adaptor.nil();
                    root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Globals, "Globals"), root_2);

                    adaptor.addChild(root_2, stream_t1.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_t1.reset();
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:505:41: ( ^( Locals $t2) )?
                if ( stream_t2.hasNext() ) {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:505:41: ^( Locals $t2)
                    {
                    PythonTree root_2 = (PythonTree)adaptor.nil();
                    root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Locals, "Locals"), root_2);

                    adaptor.addChild(root_2, stream_t2.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_t2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end exec_stmt

    public static class assert_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start assert_stmt
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:509:1: assert_stmt : 'assert' t1= test ( COMMA t2= test )? -> ^( Assert ^( Test $t1) ( ^( Msg $t2) )? ) ;
    public final assert_stmt_return assert_stmt() throws RecognitionException {
        assert_stmt_return retval = new assert_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal136=null;
        Token COMMA137=null;
        test_return t1 = null;

        test_return t2 = null;


        PythonTree string_literal136_tree=null;
        PythonTree COMMA137_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:509:13: ( 'assert' t1= test ( COMMA t2= test )? -> ^( Assert ^( Test $t1) ( ^( Msg $t2) )? ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:509:15: 'assert' t1= test ( COMMA t2= test )?
            {
            string_literal136=(Token)input.LT(1);
            match(input,183,FOLLOW_183_in_assert_stmt3654); if (failed) return retval;
            if ( backtracking==0 ) stream_183.add(string_literal136);

            pushFollow(FOLLOW_test_in_assert_stmt3658);
            t1=test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_test.add(t1.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:509:32: ( COMMA t2= test )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==COMMA) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:509:33: COMMA t2= test
                    {
                    COMMA137=(Token)input.LT(1);
                    match(input,COMMA,FOLLOW_COMMA_in_assert_stmt3661); if (failed) return retval;
                    if ( backtracking==0 ) stream_COMMA.add(COMMA137);

                    pushFollow(FOLLOW_test_in_assert_stmt3665);
                    t2=test();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_test.add(t2.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: t2, t1
            // token labels: 
            // rule labels: t1, retval, t2
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_t1=new RewriteRuleSubtreeStream(adaptor,"token t1",t1!=null?t1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_t2=new RewriteRuleSubtreeStream(adaptor,"token t2",t2!=null?t2.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 510:12: -> ^( Assert ^( Test $t1) ( ^( Msg $t2) )? )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:510:15: ^( Assert ^( Test $t1) ( ^( Msg $t2) )? )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Assert, "Assert"), root_1);

                // /Users/frank/tmp/trunk/jython/grammar/Python.g:510:24: ^( Test $t1)
                {
                PythonTree root_2 = (PythonTree)adaptor.nil();
                root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Test, "Test"), root_2);

                adaptor.addChild(root_2, stream_t1.next());

                adaptor.addChild(root_1, root_2);
                }
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:510:36: ( ^( Msg $t2) )?
                if ( stream_t2.hasNext() ) {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:510:36: ^( Msg $t2)
                    {
                    PythonTree root_2 = (PythonTree)adaptor.nil();
                    root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Msg, "Msg"), root_2);

                    adaptor.addChild(root_2, stream_t2.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_t2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end assert_stmt

    public static class compound_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compound_stmt
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:514:1: compound_stmt : ( if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef );
    public final compound_stmt_return compound_stmt() throws RecognitionException {
        compound_stmt_return retval = new compound_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        if_stmt_return if_stmt138 = null;

        while_stmt_return while_stmt139 = null;

        for_stmt_return for_stmt140 = null;

        try_stmt_return try_stmt141 = null;

        with_stmt_return with_stmt142 = null;

        funcdef_return funcdef143 = null;

        classdef_return classdef144 = null;



        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:514:15: ( if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef )
            int alt53=7;
            switch ( input.LA(1) ) {
            case 184:
                {
                alt53=1;
                }
                break;
            case 187:
                {
                alt53=2;
                }
                break;
            case 188:
                {
                alt53=3;
                }
                break;
            case 189:
                {
                alt53=4;
                }
                break;
            case 191:
                {
                alt53=5;
                }
                break;
            case AT:
            case 169:
                {
                alt53=6;
                }
                break;
            case 195:
                {
                alt53=7;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("514:1: compound_stmt : ( if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef );", 53, 0, input);

                throw nvae;
            }

            switch (alt53) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:514:17: if_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_if_stmt_in_compound_stmt3721);
                    if_stmt138=if_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, if_stmt138.getTree());

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:515:17: while_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_while_stmt_in_compound_stmt3739);
                    while_stmt139=while_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, while_stmt139.getTree());

                    }
                    break;
                case 3 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:516:17: for_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_for_stmt_in_compound_stmt3757);
                    for_stmt140=for_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, for_stmt140.getTree());

                    }
                    break;
                case 4 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:517:17: try_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_try_stmt_in_compound_stmt3775);
                    try_stmt141=try_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, try_stmt141.getTree());

                    }
                    break;
                case 5 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:518:17: with_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_with_stmt_in_compound_stmt3793);
                    with_stmt142=with_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, with_stmt142.getTree());

                    }
                    break;
                case 6 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:519:17: funcdef
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_funcdef_in_compound_stmt3811);
                    funcdef143=funcdef();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, funcdef143.getTree());

                    }
                    break;
                case 7 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:520:17: classdef
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_classdef_in_compound_stmt3829);
                    classdef144=classdef();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, classdef144.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end compound_stmt

    public static class if_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start if_stmt
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:524:1: if_stmt : 'if' test COLON ifsuite= suite ( elif_clause )* ( 'else' COLON elsesuite= suite )? -> ^( If test $ifsuite ( elif_clause )* ( ^( OrElse $elsesuite) )? ) ;
    public final if_stmt_return if_stmt() throws RecognitionException {
        if_stmt_return retval = new if_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal145=null;
        Token COLON147=null;
        Token string_literal149=null;
        Token COLON150=null;
        suite_return ifsuite = null;

        suite_return elsesuite = null;

        test_return test146 = null;

        elif_clause_return elif_clause148 = null;


        PythonTree string_literal145_tree=null;
        PythonTree COLON147_tree=null;
        PythonTree string_literal149_tree=null;
        PythonTree COLON150_tree=null;
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        RewriteRuleSubtreeStream stream_elif_clause=new RewriteRuleSubtreeStream(adaptor,"rule elif_clause");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:524:8: ( 'if' test COLON ifsuite= suite ( elif_clause )* ( 'else' COLON elsesuite= suite )? -> ^( If test $ifsuite ( elif_clause )* ( ^( OrElse $elsesuite) )? ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:524:10: 'if' test COLON ifsuite= suite ( elif_clause )* ( 'else' COLON elsesuite= suite )?
            {
            string_literal145=(Token)input.LT(1);
            match(input,184,FOLLOW_184_in_if_stmt3852); if (failed) return retval;
            if ( backtracking==0 ) stream_184.add(string_literal145);

            pushFollow(FOLLOW_test_in_if_stmt3854);
            test146=test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_test.add(test146.getTree());
            COLON147=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_if_stmt3856); if (failed) return retval;
            if ( backtracking==0 ) stream_COLON.add(COLON147);

            pushFollow(FOLLOW_suite_in_if_stmt3860);
            ifsuite=suite();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_suite.add(ifsuite.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:524:40: ( elif_clause )*
            loop54:
            do {
                int alt54=2;
                int LA54_0 = input.LA(1);

                if ( (LA54_0==186) ) {
                    alt54=1;
                }


                switch (alt54) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:524:40: elif_clause
            	    {
            	    pushFollow(FOLLOW_elif_clause_in_if_stmt3862);
            	    elif_clause148=elif_clause();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_elif_clause.add(elif_clause148.getTree());

            	    }
            	    break;

            	default :
            	    break loop54;
                }
            } while (true);

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:524:54: ( 'else' COLON elsesuite= suite )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==185) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:524:55: 'else' COLON elsesuite= suite
                    {
                    string_literal149=(Token)input.LT(1);
                    match(input,185,FOLLOW_185_in_if_stmt3867); if (failed) return retval;
                    if ( backtracking==0 ) stream_185.add(string_literal149);

                    COLON150=(Token)input.LT(1);
                    match(input,COLON,FOLLOW_COLON_in_if_stmt3869); if (failed) return retval;
                    if ( backtracking==0 ) stream_COLON.add(COLON150);

                    pushFollow(FOLLOW_suite_in_if_stmt3873);
                    elsesuite=suite();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_suite.add(elsesuite.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: ifsuite, elsesuite, elif_clause, test
            // token labels: 
            // rule labels: ifsuite, elsesuite, retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_ifsuite=new RewriteRuleSubtreeStream(adaptor,"token ifsuite",ifsuite!=null?ifsuite.tree:null);
            RewriteRuleSubtreeStream stream_elsesuite=new RewriteRuleSubtreeStream(adaptor,"token elsesuite",elsesuite!=null?elsesuite.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 525:7: -> ^( If test $ifsuite ( elif_clause )* ( ^( OrElse $elsesuite) )? )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:525:10: ^( If test $ifsuite ( elif_clause )* ( ^( OrElse $elsesuite) )? )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(If, "If"), root_1);

                adaptor.addChild(root_1, stream_test.next());
                adaptor.addChild(root_1, stream_ifsuite.next());
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:525:29: ( elif_clause )*
                while ( stream_elif_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_elif_clause.next());

                }
                stream_elif_clause.reset();
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:525:42: ( ^( OrElse $elsesuite) )?
                if ( stream_elsesuite.hasNext() ) {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:525:42: ^( OrElse $elsesuite)
                    {
                    PythonTree root_2 = (PythonTree)adaptor.nil();
                    root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(OrElse, "OrElse"), root_2);

                    adaptor.addChild(root_2, stream_elsesuite.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_elsesuite.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end if_stmt

    public static class elif_clause_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start elif_clause
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:529:1: elif_clause : 'elif' test COLON suite -> ^( Elif test suite ) ;
    public final elif_clause_return elif_clause() throws RecognitionException {
        elif_clause_return retval = new elif_clause_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal151=null;
        Token COLON153=null;
        test_return test152 = null;

        suite_return suite154 = null;


        PythonTree string_literal151_tree=null;
        PythonTree COLON153_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:529:13: ( 'elif' test COLON suite -> ^( Elif test suite ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:529:15: 'elif' test COLON suite
            {
            string_literal151=(Token)input.LT(1);
            match(input,186,FOLLOW_186_in_elif_clause3920); if (failed) return retval;
            if ( backtracking==0 ) stream_186.add(string_literal151);

            pushFollow(FOLLOW_test_in_elif_clause3922);
            test152=test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_test.add(test152.getTree());
            COLON153=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_elif_clause3924); if (failed) return retval;
            if ( backtracking==0 ) stream_COLON.add(COLON153);

            pushFollow(FOLLOW_suite_in_elif_clause3926);
            suite154=suite();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_suite.add(suite154.getTree());

            // AST REWRITE
            // elements: suite, test
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 530:12: -> ^( Elif test suite )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:530:15: ^( Elif test suite )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Elif, "Elif"), root_1);

                adaptor.addChild(root_1, stream_test.next());
                adaptor.addChild(root_1, stream_suite.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end elif_clause

    public static class while_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start while_stmt
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:534:1: while_stmt : 'while' test COLON s1= suite ( 'else' COLON s2= suite )? -> ^( While test ^( Body $s1) ( ^( OrElse $s2) )? ) ;
    public final while_stmt_return while_stmt() throws RecognitionException {
        while_stmt_return retval = new while_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal155=null;
        Token COLON157=null;
        Token string_literal158=null;
        Token COLON159=null;
        suite_return s1 = null;

        suite_return s2 = null;

        test_return test156 = null;


        PythonTree string_literal155_tree=null;
        PythonTree COLON157_tree=null;
        PythonTree string_literal158_tree=null;
        PythonTree COLON159_tree=null;
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_187=new RewriteRuleTokenStream(adaptor,"token 187");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:534:12: ( 'while' test COLON s1= suite ( 'else' COLON s2= suite )? -> ^( While test ^( Body $s1) ( ^( OrElse $s2) )? ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:534:14: 'while' test COLON s1= suite ( 'else' COLON s2= suite )?
            {
            string_literal155=(Token)input.LT(1);
            match(input,187,FOLLOW_187_in_while_stmt3969); if (failed) return retval;
            if ( backtracking==0 ) stream_187.add(string_literal155);

            pushFollow(FOLLOW_test_in_while_stmt3971);
            test156=test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_test.add(test156.getTree());
            COLON157=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_while_stmt3973); if (failed) return retval;
            if ( backtracking==0 ) stream_COLON.add(COLON157);

            pushFollow(FOLLOW_suite_in_while_stmt3977);
            s1=suite();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_suite.add(s1.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:534:42: ( 'else' COLON s2= suite )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==185) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:534:43: 'else' COLON s2= suite
                    {
                    string_literal158=(Token)input.LT(1);
                    match(input,185,FOLLOW_185_in_while_stmt3980); if (failed) return retval;
                    if ( backtracking==0 ) stream_185.add(string_literal158);

                    COLON159=(Token)input.LT(1);
                    match(input,COLON,FOLLOW_COLON_in_while_stmt3982); if (failed) return retval;
                    if ( backtracking==0 ) stream_COLON.add(COLON159);

                    pushFollow(FOLLOW_suite_in_while_stmt3986);
                    s2=suite();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_suite.add(s2.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: s1, test, s2
            // token labels: 
            // rule labels: s2, retval, s1
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_s2=new RewriteRuleSubtreeStream(adaptor,"token s2",s2!=null?s2.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_s1=new RewriteRuleSubtreeStream(adaptor,"token s1",s1!=null?s1.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 535:11: -> ^( While test ^( Body $s1) ( ^( OrElse $s2) )? )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:535:14: ^( While test ^( Body $s1) ( ^( OrElse $s2) )? )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(While, "While"), root_1);

                adaptor.addChild(root_1, stream_test.next());
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:535:27: ^( Body $s1)
                {
                PythonTree root_2 = (PythonTree)adaptor.nil();
                root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Body, "Body"), root_2);

                adaptor.addChild(root_2, stream_s1.next());

                adaptor.addChild(root_1, root_2);
                }
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:535:39: ( ^( OrElse $s2) )?
                if ( stream_s2.hasNext() ) {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:535:39: ^( OrElse $s2)
                    {
                    PythonTree root_2 = (PythonTree)adaptor.nil();
                    root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(OrElse, "OrElse"), root_2);

                    adaptor.addChild(root_2, stream_s2.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_s2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end while_stmt

    public static class for_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start for_stmt
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:539:1: for_stmt : 'for' exprlist 'in' testlist COLON s1= suite ( 'else' COLON s2= suite )? -> ^( For ^( Target exprlist ) ^( Iter testlist ) ^( Body $s1) ( ^( OrElse $s2) )? ) ;
    public final for_stmt_return for_stmt() throws RecognitionException {
        for_stmt_return retval = new for_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal160=null;
        Token string_literal162=null;
        Token COLON164=null;
        Token string_literal165=null;
        Token COLON166=null;
        suite_return s1 = null;

        suite_return s2 = null;

        exprlist_return exprlist161 = null;

        testlist_return testlist163 = null;


        PythonTree string_literal160_tree=null;
        PythonTree string_literal162_tree=null;
        PythonTree COLON164_tree=null;
        PythonTree string_literal165_tree=null;
        PythonTree COLON166_tree=null;
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleTokenStream stream_188=new RewriteRuleTokenStream(adaptor,"token 188");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        RewriteRuleSubtreeStream stream_testlist=new RewriteRuleSubtreeStream(adaptor,"rule testlist");
        RewriteRuleSubtreeStream stream_exprlist=new RewriteRuleSubtreeStream(adaptor,"rule exprlist");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:539:10: ( 'for' exprlist 'in' testlist COLON s1= suite ( 'else' COLON s2= suite )? -> ^( For ^( Target exprlist ) ^( Iter testlist ) ^( Body $s1) ( ^( OrElse $s2) )? ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:539:12: 'for' exprlist 'in' testlist COLON s1= suite ( 'else' COLON s2= suite )?
            {
            string_literal160=(Token)input.LT(1);
            match(input,188,FOLLOW_188_in_for_stmt4042); if (failed) return retval;
            if ( backtracking==0 ) stream_188.add(string_literal160);

            pushFollow(FOLLOW_exprlist_in_for_stmt4044);
            exprlist161=exprlist();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprlist.add(exprlist161.getTree());
            string_literal162=(Token)input.LT(1);
            match(input,182,FOLLOW_182_in_for_stmt4046); if (failed) return retval;
            if ( backtracking==0 ) stream_182.add(string_literal162);

            pushFollow(FOLLOW_testlist_in_for_stmt4048);
            testlist163=testlist();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_testlist.add(testlist163.getTree());
            COLON164=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_for_stmt4050); if (failed) return retval;
            if ( backtracking==0 ) stream_COLON.add(COLON164);

            pushFollow(FOLLOW_suite_in_for_stmt4054);
            s1=suite();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_suite.add(s1.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:539:56: ( 'else' COLON s2= suite )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==185) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:539:57: 'else' COLON s2= suite
                    {
                    string_literal165=(Token)input.LT(1);
                    match(input,185,FOLLOW_185_in_for_stmt4057); if (failed) return retval;
                    if ( backtracking==0 ) stream_185.add(string_literal165);

                    COLON166=(Token)input.LT(1);
                    match(input,COLON,FOLLOW_COLON_in_for_stmt4059); if (failed) return retval;
                    if ( backtracking==0 ) stream_COLON.add(COLON166);

                    pushFollow(FOLLOW_suite_in_for_stmt4063);
                    s2=suite();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_suite.add(s2.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: s2, testlist, exprlist, s1
            // token labels: 
            // rule labels: s2, retval, s1
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_s2=new RewriteRuleSubtreeStream(adaptor,"token s2",s2!=null?s2.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_s1=new RewriteRuleSubtreeStream(adaptor,"token s1",s1!=null?s1.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 540:9: -> ^( For ^( Target exprlist ) ^( Iter testlist ) ^( Body $s1) ( ^( OrElse $s2) )? )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:540:12: ^( For ^( Target exprlist ) ^( Iter testlist ) ^( Body $s1) ( ^( OrElse $s2) )? )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(For, "For"), root_1);

                // /Users/frank/tmp/trunk/jython/grammar/Python.g:540:18: ^( Target exprlist )
                {
                PythonTree root_2 = (PythonTree)adaptor.nil();
                root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Target, "Target"), root_2);

                adaptor.addChild(root_2, stream_exprlist.next());

                adaptor.addChild(root_1, root_2);
                }
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:540:37: ^( Iter testlist )
                {
                PythonTree root_2 = (PythonTree)adaptor.nil();
                root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Iter, "Iter"), root_2);

                adaptor.addChild(root_2, stream_testlist.next());

                adaptor.addChild(root_1, root_2);
                }
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:540:54: ^( Body $s1)
                {
                PythonTree root_2 = (PythonTree)adaptor.nil();
                root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Body, "Body"), root_2);

                adaptor.addChild(root_2, stream_s1.next());

                adaptor.addChild(root_1, root_2);
                }
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:540:66: ( ^( OrElse $s2) )?
                if ( stream_s2.hasNext() ) {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:540:66: ^( OrElse $s2)
                    {
                    PythonTree root_2 = (PythonTree)adaptor.nil();
                    root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(OrElse, "OrElse"), root_2);

                    adaptor.addChild(root_2, stream_s2.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_s2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end for_stmt

    public static class try_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start try_stmt
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:548:1: try_stmt : 'try' COLON trysuite= suite ( ( ( except_clause )+ ( 'else' COLON elsesuite= suite )? ( 'finally' COLON finalsuite= suite )? -> ^( TryExcept ^( Body $trysuite) ( except_clause )+ ( ^( OrElse $elsesuite) )? ( ^( FinalBody 'finally' $finalsuite) )? ) ) | ( 'finally' COLON finalsuite= suite -> ^( TryFinally ^( Body $trysuite) ^( FinalBody $finalsuite) ) ) ) ;
    public final try_stmt_return try_stmt() throws RecognitionException {
        try_stmt_return retval = new try_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal167=null;
        Token COLON168=null;
        Token string_literal170=null;
        Token COLON171=null;
        Token string_literal172=null;
        Token COLON173=null;
        Token string_literal174=null;
        Token COLON175=null;
        suite_return trysuite = null;

        suite_return elsesuite = null;

        suite_return finalsuite = null;

        except_clause_return except_clause169 = null;


        PythonTree string_literal167_tree=null;
        PythonTree COLON168_tree=null;
        PythonTree string_literal170_tree=null;
        PythonTree COLON171_tree=null;
        PythonTree string_literal172_tree=null;
        PythonTree COLON173_tree=null;
        PythonTree string_literal174_tree=null;
        PythonTree COLON175_tree=null;
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        RewriteRuleSubtreeStream stream_except_clause=new RewriteRuleSubtreeStream(adaptor,"rule except_clause");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:548:10: ( 'try' COLON trysuite= suite ( ( ( except_clause )+ ( 'else' COLON elsesuite= suite )? ( 'finally' COLON finalsuite= suite )? -> ^( TryExcept ^( Body $trysuite) ( except_clause )+ ( ^( OrElse $elsesuite) )? ( ^( FinalBody 'finally' $finalsuite) )? ) ) | ( 'finally' COLON finalsuite= suite -> ^( TryFinally ^( Body $trysuite) ^( FinalBody $finalsuite) ) ) ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:548:12: 'try' COLON trysuite= suite ( ( ( except_clause )+ ( 'else' COLON elsesuite= suite )? ( 'finally' COLON finalsuite= suite )? -> ^( TryExcept ^( Body $trysuite) ( except_clause )+ ( ^( OrElse $elsesuite) )? ( ^( FinalBody 'finally' $finalsuite) )? ) ) | ( 'finally' COLON finalsuite= suite -> ^( TryFinally ^( Body $trysuite) ^( FinalBody $finalsuite) ) ) )
            {
            string_literal167=(Token)input.LT(1);
            match(input,189,FOLLOW_189_in_try_stmt4129); if (failed) return retval;
            if ( backtracking==0 ) stream_189.add(string_literal167);

            COLON168=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_try_stmt4131); if (failed) return retval;
            if ( backtracking==0 ) stream_COLON.add(COLON168);

            pushFollow(FOLLOW_suite_in_try_stmt4135);
            trysuite=suite();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_suite.add(trysuite.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:549:12: ( ( ( except_clause )+ ( 'else' COLON elsesuite= suite )? ( 'finally' COLON finalsuite= suite )? -> ^( TryExcept ^( Body $trysuite) ( except_clause )+ ( ^( OrElse $elsesuite) )? ( ^( FinalBody 'finally' $finalsuite) )? ) ) | ( 'finally' COLON finalsuite= suite -> ^( TryFinally ^( Body $trysuite) ^( FinalBody $finalsuite) ) ) )
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==192) ) {
                alt61=1;
            }
            else if ( (LA61_0==190) ) {
                alt61=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("549:12: ( ( ( except_clause )+ ( 'else' COLON elsesuite= suite )? ( 'finally' COLON finalsuite= suite )? -> ^( TryExcept ^( Body $trysuite) ( except_clause )+ ( ^( OrElse $elsesuite) )? ( ^( FinalBody 'finally' $finalsuite) )? ) ) | ( 'finally' COLON finalsuite= suite -> ^( TryFinally ^( Body $trysuite) ^( FinalBody $finalsuite) ) ) )", 61, 0, input);

                throw nvae;
            }
            switch (alt61) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:549:14: ( ( except_clause )+ ( 'else' COLON elsesuite= suite )? ( 'finally' COLON finalsuite= suite )? -> ^( TryExcept ^( Body $trysuite) ( except_clause )+ ( ^( OrElse $elsesuite) )? ( ^( FinalBody 'finally' $finalsuite) )? ) )
                    {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:549:14: ( ( except_clause )+ ( 'else' COLON elsesuite= suite )? ( 'finally' COLON finalsuite= suite )? -> ^( TryExcept ^( Body $trysuite) ( except_clause )+ ( ^( OrElse $elsesuite) )? ( ^( FinalBody 'finally' $finalsuite) )? ) )
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:549:15: ( except_clause )+ ( 'else' COLON elsesuite= suite )? ( 'finally' COLON finalsuite= suite )?
                    {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:549:15: ( except_clause )+
                    int cnt58=0;
                    loop58:
                    do {
                        int alt58=2;
                        int LA58_0 = input.LA(1);

                        if ( (LA58_0==192) ) {
                            alt58=1;
                        }


                        switch (alt58) {
                    	case 1 :
                    	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:549:15: except_clause
                    	    {
                    	    pushFollow(FOLLOW_except_clause_in_try_stmt4151);
                    	    except_clause169=except_clause();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_except_clause.add(except_clause169.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt58 >= 1 ) break loop58;
                    	    if (backtracking>0) {failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(58, input);
                                throw eee;
                        }
                        cnt58++;
                    } while (true);

                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:549:30: ( 'else' COLON elsesuite= suite )?
                    int alt59=2;
                    int LA59_0 = input.LA(1);

                    if ( (LA59_0==185) ) {
                        alt59=1;
                    }
                    switch (alt59) {
                        case 1 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:549:31: 'else' COLON elsesuite= suite
                            {
                            string_literal170=(Token)input.LT(1);
                            match(input,185,FOLLOW_185_in_try_stmt4155); if (failed) return retval;
                            if ( backtracking==0 ) stream_185.add(string_literal170);

                            COLON171=(Token)input.LT(1);
                            match(input,COLON,FOLLOW_COLON_in_try_stmt4157); if (failed) return retval;
                            if ( backtracking==0 ) stream_COLON.add(COLON171);

                            pushFollow(FOLLOW_suite_in_try_stmt4161);
                            elsesuite=suite();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_suite.add(elsesuite.getTree());

                            }
                            break;

                    }

                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:549:62: ( 'finally' COLON finalsuite= suite )?
                    int alt60=2;
                    int LA60_0 = input.LA(1);

                    if ( (LA60_0==190) ) {
                        alt60=1;
                    }
                    switch (alt60) {
                        case 1 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:549:63: 'finally' COLON finalsuite= suite
                            {
                            string_literal172=(Token)input.LT(1);
                            match(input,190,FOLLOW_190_in_try_stmt4166); if (failed) return retval;
                            if ( backtracking==0 ) stream_190.add(string_literal172);

                            COLON173=(Token)input.LT(1);
                            match(input,COLON,FOLLOW_COLON_in_try_stmt4168); if (failed) return retval;
                            if ( backtracking==0 ) stream_COLON.add(COLON173);

                            pushFollow(FOLLOW_suite_in_try_stmt4172);
                            finalsuite=suite();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_suite.add(finalsuite.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: trysuite, finalsuite, except_clause, 190, elsesuite
                    // token labels: 
                    // rule labels: finalsuite, elsesuite, retval, trysuite
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_finalsuite=new RewriteRuleSubtreeStream(adaptor,"token finalsuite",finalsuite!=null?finalsuite.tree:null);
                    RewriteRuleSubtreeStream stream_elsesuite=new RewriteRuleSubtreeStream(adaptor,"token elsesuite",elsesuite!=null?elsesuite.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_trysuite=new RewriteRuleSubtreeStream(adaptor,"token trysuite",trysuite!=null?trysuite.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 550:11: -> ^( TryExcept ^( Body $trysuite) ( except_clause )+ ( ^( OrElse $elsesuite) )? ( ^( FinalBody 'finally' $finalsuite) )? )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:550:14: ^( TryExcept ^( Body $trysuite) ( except_clause )+ ( ^( OrElse $elsesuite) )? ( ^( FinalBody 'finally' $finalsuite) )? )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(TryExcept, "TryExcept"), root_1);

                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:550:26: ^( Body $trysuite)
                        {
                        PythonTree root_2 = (PythonTree)adaptor.nil();
                        root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Body, "Body"), root_2);

                        adaptor.addChild(root_2, stream_trysuite.next());

                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_except_clause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_except_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_except_clause.next());

                        }
                        stream_except_clause.reset();
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:550:59: ( ^( OrElse $elsesuite) )?
                        if ( stream_elsesuite.hasNext() ) {
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:550:59: ^( OrElse $elsesuite)
                            {
                            PythonTree root_2 = (PythonTree)adaptor.nil();
                            root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(OrElse, "OrElse"), root_2);

                            adaptor.addChild(root_2, stream_elsesuite.next());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_elsesuite.reset();
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:550:81: ( ^( FinalBody 'finally' $finalsuite) )?
                        if ( stream_finalsuite.hasNext()||stream_190.hasNext() ) {
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:550:81: ^( FinalBody 'finally' $finalsuite)
                            {
                            PythonTree root_2 = (PythonTree)adaptor.nil();
                            root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(FinalBody, "FinalBody"), root_2);

                            adaptor.addChild(root_2, stream_190.next());
                            adaptor.addChild(root_2, stream_finalsuite.next());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_finalsuite.reset();
                        stream_190.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }


                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:551:14: ( 'finally' COLON finalsuite= suite -> ^( TryFinally ^( Body $trysuite) ^( FinalBody $finalsuite) ) )
                    {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:551:14: ( 'finally' COLON finalsuite= suite -> ^( TryFinally ^( Body $trysuite) ^( FinalBody $finalsuite) ) )
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:551:15: 'finally' COLON finalsuite= suite
                    {
                    string_literal174=(Token)input.LT(1);
                    match(input,190,FOLLOW_190_in_try_stmt4235); if (failed) return retval;
                    if ( backtracking==0 ) stream_190.add(string_literal174);

                    COLON175=(Token)input.LT(1);
                    match(input,COLON,FOLLOW_COLON_in_try_stmt4237); if (failed) return retval;
                    if ( backtracking==0 ) stream_COLON.add(COLON175);

                    pushFollow(FOLLOW_suite_in_try_stmt4241);
                    finalsuite=suite();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_suite.add(finalsuite.getTree());

                    // AST REWRITE
                    // elements: finalsuite, trysuite
                    // token labels: 
                    // rule labels: finalsuite, retval, trysuite
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_finalsuite=new RewriteRuleSubtreeStream(adaptor,"token finalsuite",finalsuite!=null?finalsuite.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_trysuite=new RewriteRuleSubtreeStream(adaptor,"token trysuite",trysuite!=null?trysuite.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 552:11: -> ^( TryFinally ^( Body $trysuite) ^( FinalBody $finalsuite) )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:552:14: ^( TryFinally ^( Body $trysuite) ^( FinalBody $finalsuite) )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(TryFinally, "TryFinally"), root_1);

                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:552:27: ^( Body $trysuite)
                        {
                        PythonTree root_2 = (PythonTree)adaptor.nil();
                        root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Body, "Body"), root_2);

                        adaptor.addChild(root_2, stream_trysuite.next());

                        adaptor.addChild(root_1, root_2);
                        }
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:552:45: ^( FinalBody $finalsuite)
                        {
                        PythonTree root_2 = (PythonTree)adaptor.nil();
                        root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(FinalBody, "FinalBody"), root_2);

                        adaptor.addChild(root_2, stream_finalsuite.next());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end try_stmt

    public static class with_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start with_stmt
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:557:1: with_stmt : 'with' test ( with_var )? COLON suite -> ^( With test ( with_var )? ^( Body suite ) ) ;
    public final with_stmt_return with_stmt() throws RecognitionException {
        with_stmt_return retval = new with_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal176=null;
        Token COLON179=null;
        test_return test177 = null;

        with_var_return with_var178 = null;

        suite_return suite180 = null;


        PythonTree string_literal176_tree=null;
        PythonTree COLON179_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_191=new RewriteRuleTokenStream(adaptor,"token 191");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        RewriteRuleSubtreeStream stream_with_var=new RewriteRuleSubtreeStream(adaptor,"rule with_var");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:557:10: ( 'with' test ( with_var )? COLON suite -> ^( With test ( with_var )? ^( Body suite ) ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:557:12: 'with' test ( with_var )? COLON suite
            {
            string_literal176=(Token)input.LT(1);
            match(input,191,FOLLOW_191_in_with_stmt4303); if (failed) return retval;
            if ( backtracking==0 ) stream_191.add(string_literal176);

            pushFollow(FOLLOW_test_in_with_stmt4305);
            test177=test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_test.add(test177.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:557:24: ( with_var )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==NAME||LA62_0==179) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:557:25: with_var
                    {
                    pushFollow(FOLLOW_with_var_in_with_stmt4308);
                    with_var178=with_var();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_with_var.add(with_var178.getTree());

                    }
                    break;

            }

            COLON179=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_with_stmt4312); if (failed) return retval;
            if ( backtracking==0 ) stream_COLON.add(COLON179);

            pushFollow(FOLLOW_suite_in_with_stmt4314);
            suite180=suite();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_suite.add(suite180.getTree());

            // AST REWRITE
            // elements: suite, test, with_var
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 558:9: -> ^( With test ( with_var )? ^( Body suite ) )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:558:12: ^( With test ( with_var )? ^( Body suite ) )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(With, "With"), root_1);

                adaptor.addChild(root_1, stream_test.next());
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:558:24: ( with_var )?
                if ( stream_with_var.hasNext() ) {
                    adaptor.addChild(root_1, stream_with_var.next());

                }
                stream_with_var.reset();
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:558:34: ^( Body suite )
                {
                PythonTree root_2 = (PythonTree)adaptor.nil();
                root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Body, "Body"), root_2);

                adaptor.addChild(root_2, stream_suite.next());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end with_stmt

    public static class with_var_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start with_var
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:562:1: with_var : ( 'as' | NAME ) expr ;
    public final with_var_return with_var() throws RecognitionException {
        with_var_return retval = new with_var_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token set181=null;
        expr_return expr182 = null;


        PythonTree set181_tree=null;

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:562:9: ( ( 'as' | NAME ) expr )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:562:11: ( 'as' | NAME ) expr
            {
            root_0 = (PythonTree)adaptor.nil();

            set181=(Token)input.LT(1);
            if ( input.LA(1)==NAME||input.LA(1)==179 ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set181));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_with_var4357);    throw mse;
            }

            pushFollow(FOLLOW_expr_in_with_var4365);
            expr182=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr182.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end with_var

    public static class except_clause_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start except_clause
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:566:1: except_clause : 'except' (t1= test ( COMMA t2= test )? )? COLON suite -> ^( ExceptHandler 'except' ( ^( Type $t1) )? ( ^( Name $t2) )? ^( Body suite ) ) ;
    public final except_clause_return except_clause() throws RecognitionException {
        except_clause_return retval = new except_clause_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal183=null;
        Token COMMA184=null;
        Token COLON185=null;
        test_return t1 = null;

        test_return t2 = null;

        suite_return suite186 = null;


        PythonTree string_literal183_tree=null;
        PythonTree COMMA184_tree=null;
        PythonTree COLON185_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_192=new RewriteRuleTokenStream(adaptor,"token 192");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:566:15: ( 'except' (t1= test ( COMMA t2= test )? )? COLON suite -> ^( ExceptHandler 'except' ( ^( Type $t1) )? ( ^( Name $t2) )? ^( Body suite ) ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:566:17: 'except' (t1= test ( COMMA t2= test )? )? COLON suite
            {
            string_literal183=(Token)input.LT(1);
            match(input,192,FOLLOW_192_in_except_clause4383); if (failed) return retval;
            if ( backtracking==0 ) stream_192.add(string_literal183);

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:566:26: (t1= test ( COMMA t2= test )? )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==LPAREN||LA64_0==NAME||LA64_0==NOT||(LA64_0>=PLUS && LA64_0<=MINUS)||(LA64_0>=TILDE && LA64_0<=LBRACK)||LA64_0==LCURLY||(LA64_0>=BACKQUOTE && LA64_0<=STRING)||LA64_0==194) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:566:27: t1= test ( COMMA t2= test )?
                    {
                    pushFollow(FOLLOW_test_in_except_clause4388);
                    t1=test();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_test.add(t1.getTree());
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:566:35: ( COMMA t2= test )?
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==COMMA) ) {
                        alt63=1;
                    }
                    switch (alt63) {
                        case 1 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:566:36: COMMA t2= test
                            {
                            COMMA184=(Token)input.LT(1);
                            match(input,COMMA,FOLLOW_COMMA_in_except_clause4391); if (failed) return retval;
                            if ( backtracking==0 ) stream_COMMA.add(COMMA184);

                            pushFollow(FOLLOW_test_in_except_clause4395);
                            t2=test();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_test.add(t2.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            COLON185=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_except_clause4401); if (failed) return retval;
            if ( backtracking==0 ) stream_COLON.add(COLON185);

            pushFollow(FOLLOW_suite_in_except_clause4403);
            suite186=suite();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_suite.add(suite186.getTree());

            // AST REWRITE
            // elements: t1, suite, t2, 192
            // token labels: 
            // rule labels: t1, retval, t2
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_t1=new RewriteRuleSubtreeStream(adaptor,"token t1",t1!=null?t1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_t2=new RewriteRuleSubtreeStream(adaptor,"token t2",t2!=null?t2.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 569:14: -> ^( ExceptHandler 'except' ( ^( Type $t1) )? ( ^( Name $t2) )? ^( Body suite ) )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:569:17: ^( ExceptHandler 'except' ( ^( Type $t1) )? ( ^( Name $t2) )? ^( Body suite ) )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(ExceptHandler, "ExceptHandler"), root_1);

                adaptor.addChild(root_1, stream_192.next());
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:569:42: ( ^( Type $t1) )?
                if ( stream_t1.hasNext() ) {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:569:42: ^( Type $t1)
                    {
                    PythonTree root_2 = (PythonTree)adaptor.nil();
                    root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Type, "Type"), root_2);

                    adaptor.addChild(root_2, stream_t1.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_t1.reset();
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:569:55: ( ^( Name $t2) )?
                if ( stream_t2.hasNext() ) {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:569:55: ^( Name $t2)
                    {
                    PythonTree root_2 = (PythonTree)adaptor.nil();
                    root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Name, "Name"), root_2);

                    adaptor.addChild(root_2, stream_t2.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_t2.reset();
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:569:68: ^( Body suite )
                {
                PythonTree root_2 = (PythonTree)adaptor.nil();
                root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Body, "Body"), root_2);

                adaptor.addChild(root_2, stream_suite.next());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end except_clause

    public static class suite_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start suite
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:573:1: suite : ( simple_stmt | NEWLINE INDENT ( stmt )+ DEDENT );
    public final suite_return suite() throws RecognitionException {
        suite_return retval = new suite_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token NEWLINE188=null;
        Token INDENT189=null;
        Token DEDENT191=null;
        simple_stmt_return simple_stmt187 = null;

        stmt_return stmt190 = null;


        PythonTree NEWLINE188_tree=null;
        PythonTree INDENT189_tree=null;
        PythonTree DEDENT191_tree=null;

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:573:7: ( simple_stmt | NEWLINE INDENT ( stmt )+ DEDENT )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==LPAREN||LA66_0==NAME||LA66_0==NOT||(LA66_0>=PLUS && LA66_0<=MINUS)||(LA66_0>=TILDE && LA66_0<=LBRACK)||LA66_0==LCURLY||(LA66_0>=BACKQUOTE && LA66_0<=STRING)||(LA66_0>=170 && LA66_0<=178)||(LA66_0>=180 && LA66_0<=181)||LA66_0==183||LA66_0==194||LA66_0==196) ) {
                alt66=1;
            }
            else if ( (LA66_0==NEWLINE) ) {
                alt66=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("573:1: suite : ( simple_stmt | NEWLINE INDENT ( stmt )+ DEDENT );", 66, 0, input);

                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:573:9: simple_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_simple_stmt_in_suite4498);
                    simple_stmt187=simple_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, simple_stmt187.getTree());

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:574:9: NEWLINE INDENT ( stmt )+ DEDENT
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    NEWLINE188=(Token)input.LT(1);
                    match(input,NEWLINE,FOLLOW_NEWLINE_in_suite4508); if (failed) return retval;
                    INDENT189=(Token)input.LT(1);
                    match(input,INDENT,FOLLOW_INDENT_in_suite4511); if (failed) return retval;
                    if ( backtracking==0 ) {
                    INDENT189_tree = (PythonTree)adaptor.create(INDENT189);
                    adaptor.addChild(root_0, INDENT189_tree);
                    }
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:574:25: ( stmt )+
                    int cnt65=0;
                    loop65:
                    do {
                        int alt65=2;
                        int LA65_0 = input.LA(1);

                        if ( ((LA65_0>=AT && LA65_0<=LPAREN)||LA65_0==NAME||LA65_0==NOT||(LA65_0>=PLUS && LA65_0<=MINUS)||(LA65_0>=TILDE && LA65_0<=LBRACK)||LA65_0==LCURLY||(LA65_0>=BACKQUOTE && LA65_0<=STRING)||(LA65_0>=169 && LA65_0<=178)||(LA65_0>=180 && LA65_0<=181)||(LA65_0>=183 && LA65_0<=184)||(LA65_0>=187 && LA65_0<=189)||LA65_0==191||(LA65_0>=194 && LA65_0<=196)) ) {
                            alt65=1;
                        }


                        switch (alt65) {
                    	case 1 :
                    	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:574:26: stmt
                    	    {
                    	    pushFollow(FOLLOW_stmt_in_suite4514);
                    	    stmt190=stmt();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, stmt190.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt65 >= 1 ) break loop65;
                    	    if (backtracking>0) {failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(65, input);
                                throw eee;
                        }
                        cnt65++;
                    } while (true);

                    DEDENT191=(Token)input.LT(1);
                    match(input,DEDENT,FOLLOW_DEDENT_in_suite4518); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DEDENT191_tree = (PythonTree)adaptor.create(DEDENT191);
                    adaptor.addChild(root_0, DEDENT191_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end suite

    public static class test_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start test
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:578:1: test : (o1= or_test ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test ) | lambdef );
    public final test_return test() throws RecognitionException {
        test_return retval = new test_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal192=null;
        Token string_literal193=null;
        or_test_return o1 = null;

        or_test_return o2 = null;

        test_return test194 = null;

        lambdef_return lambdef195 = null;


        PythonTree string_literal192_tree=null;
        PythonTree string_literal193_tree=null;
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleSubtreeStream stream_or_test=new RewriteRuleSubtreeStream(adaptor,"rule or_test");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:578:5: (o1= or_test ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test ) | lambdef )
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==LPAREN||LA68_0==NAME||LA68_0==NOT||(LA68_0>=PLUS && LA68_0<=MINUS)||(LA68_0>=TILDE && LA68_0<=LBRACK)||LA68_0==LCURLY||(LA68_0>=BACKQUOTE && LA68_0<=STRING)) ) {
                alt68=1;
            }
            else if ( (LA68_0==194) ) {
                alt68=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("578:1: test : (o1= or_test ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test ) | lambdef );", 68, 0, input);

                throw nvae;
            }
            switch (alt68) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:578:7: o1= or_test ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )
                    {
                    pushFollow(FOLLOW_or_test_in_test4535);
                    o1=or_test();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_or_test.add(o1.getTree());
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )
                    int alt67=2;
                    int LA67_0 = input.LA(1);

                    if ( (LA67_0==184) ) {
                        switch ( input.LA(2) ) {
                        case NOT:
                            {
                            switch ( input.LA(3) ) {
                            case NOT:
                                {
                                int LA67_17 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 17, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case PLUS:
                                {
                                switch ( input.LA(4) ) {
                                case PLUS:
                                    {
                                    int LA67_80 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 80, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case MINUS:
                                    {
                                    switch ( input.LA(5) ) {
                                    case PLUS:
                                        {
                                        int LA67_237 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 237, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case MINUS:
                                        {
                                        int LA67_238 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 238, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case TILDE:
                                        {
                                        switch ( input.LA(6) ) {
                                        case PLUS:
                                            {
                                            int LA67_487 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 487, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case MINUS:
                                            {
                                            int LA67_488 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 488, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case TILDE:
                                            {
                                            int LA67_489 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 489, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case LPAREN:
                                            {
                                            int LA67_490 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 490, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case LBRACK:
                                            {
                                            int LA67_491 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 491, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case LCURLY:
                                            {
                                            int LA67_492 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 492, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case BACKQUOTE:
                                            {
                                            int LA67_493 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 493, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case NAME:
                                            {
                                            int LA67_494 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 494, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case INT:
                                            {
                                            int LA67_495 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 495, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case LONGINT:
                                            {
                                            int LA67_496 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 496, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case FLOAT:
                                            {
                                            int LA67_497 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 497, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case COMPLEX:
                                            {
                                            int LA67_498 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 498, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case STRING:
                                            {
                                            int LA67_499 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 499, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        default:
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 239, input);

                                            throw nvae;
                                        }

                                        }
                                        break;
                                    case LPAREN:
                                        {
                                        int LA67_240 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 240, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LBRACK:
                                        {
                                        int LA67_241 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 241, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LCURLY:
                                        {
                                        int LA67_242 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 242, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case BACKQUOTE:
                                        {
                                        int LA67_243 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 243, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case NAME:
                                        {
                                        int LA67_244 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 244, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case INT:
                                        {
                                        int LA67_245 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 245, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LONGINT:
                                        {
                                        int LA67_246 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 246, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case FLOAT:
                                        {
                                        int LA67_247 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 247, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case COMPLEX:
                                        {
                                        int LA67_248 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 248, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case STRING:
                                        {
                                        int LA67_249 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 249, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 81, input);

                                        throw nvae;
                                    }

                                    }
                                    break;
                                case TILDE:
                                    {
                                    switch ( input.LA(5) ) {
                                    case PLUS:
                                        {
                                        int LA67_250 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 250, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case MINUS:
                                        {
                                        switch ( input.LA(6) ) {
                                        case PLUS:
                                            {
                                            int LA67_511 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 511, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case MINUS:
                                            {
                                            int LA67_512 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 512, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case TILDE:
                                            {
                                            int LA67_513 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 513, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case LPAREN:
                                            {
                                            int LA67_514 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 514, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case LBRACK:
                                            {
                                            int LA67_515 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 515, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case LCURLY:
                                            {
                                            int LA67_516 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 516, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case BACKQUOTE:
                                            {
                                            int LA67_517 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 517, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case NAME:
                                            {
                                            int LA67_518 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 518, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case INT:
                                            {
                                            int LA67_519 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 519, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case LONGINT:
                                            {
                                            int LA67_520 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 520, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case FLOAT:
                                            {
                                            int LA67_521 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 521, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case COMPLEX:
                                            {
                                            int LA67_522 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 522, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case STRING:
                                            {
                                            int LA67_523 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 523, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        default:
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 251, input);

                                            throw nvae;
                                        }

                                        }
                                        break;
                                    case TILDE:
                                        {
                                        int LA67_252 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 252, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                        {
                                        int LA67_253 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 253, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LBRACK:
                                        {
                                        int LA67_254 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 254, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LCURLY:
                                        {
                                        int LA67_255 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 255, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case BACKQUOTE:
                                        {
                                        int LA67_256 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 256, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case NAME:
                                        {
                                        int LA67_257 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 257, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case INT:
                                        {
                                        int LA67_258 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 258, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LONGINT:
                                        {
                                        int LA67_259 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 259, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case FLOAT:
                                        {
                                        int LA67_260 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 260, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case COMPLEX:
                                        {
                                        int LA67_261 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 261, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case STRING:
                                        {
                                        int LA67_262 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 262, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 82, input);

                                        throw nvae;
                                    }

                                    }
                                    break;
                                case LPAREN:
                                    {
                                    int LA67_83 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 83, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LBRACK:
                                    {
                                    int LA67_84 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 84, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LCURLY:
                                    {
                                    int LA67_85 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 85, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case BACKQUOTE:
                                    {
                                    int LA67_86 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 86, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case NAME:
                                    {
                                    int LA67_87 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 87, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case INT:
                                    {
                                    int LA67_88 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 88, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LONGINT:
                                    {
                                    int LA67_89 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 89, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case FLOAT:
                                    {
                                    int LA67_90 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 90, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case COMPLEX:
                                    {
                                    int LA67_91 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 91, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case STRING:
                                    {
                                    int LA67_92 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 92, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 18, input);

                                    throw nvae;
                                }

                                }
                                break;
                            case MINUS:
                                {
                                switch ( input.LA(4) ) {
                                case PLUS:
                                    {
                                    switch ( input.LA(5) ) {
                                    case PLUS:
                                        {
                                        int LA67_272 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 272, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case MINUS:
                                        {
                                        int LA67_273 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 273, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case TILDE:
                                        {
                                        switch ( input.LA(6) ) {
                                        case PLUS:
                                            {
                                            int LA67_537 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 537, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case MINUS:
                                            {
                                            int LA67_538 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 538, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case TILDE:
                                            {
                                            int LA67_539 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 539, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case LPAREN:
                                            {
                                            int LA67_540 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 540, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case LBRACK:
                                            {
                                            int LA67_541 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 541, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case LCURLY:
                                            {
                                            int LA67_542 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 542, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case BACKQUOTE:
                                            {
                                            int LA67_543 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 543, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case NAME:
                                            {
                                            int LA67_544 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 544, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case INT:
                                            {
                                            int LA67_545 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 545, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case LONGINT:
                                            {
                                            int LA67_546 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 546, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case FLOAT:
                                            {
                                            int LA67_547 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 547, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case COMPLEX:
                                            {
                                            int LA67_548 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 548, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case STRING:
                                            {
                                            int LA67_549 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 549, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        default:
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 274, input);

                                            throw nvae;
                                        }

                                        }
                                        break;
                                    case LPAREN:
                                        {
                                        int LA67_275 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 275, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LBRACK:
                                        {
                                        int LA67_276 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 276, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LCURLY:
                                        {
                                        int LA67_277 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 277, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case BACKQUOTE:
                                        {
                                        int LA67_278 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 278, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case NAME:
                                        {
                                        int LA67_279 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 279, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case INT:
                                        {
                                        int LA67_280 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 280, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LONGINT:
                                        {
                                        int LA67_281 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 281, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case FLOAT:
                                        {
                                        int LA67_282 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 282, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case COMPLEX:
                                        {
                                        int LA67_283 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 283, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case STRING:
                                        {
                                        int LA67_284 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 284, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 93, input);

                                        throw nvae;
                                    }

                                    }
                                    break;
                                case MINUS:
                                    {
                                    int LA67_94 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 94, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case TILDE:
                                    {
                                    switch ( input.LA(5) ) {
                                    case PLUS:
                                        {
                                        switch ( input.LA(6) ) {
                                        case PLUS:
                                            {
                                            int LA67_560 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 560, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case MINUS:
                                            {
                                            int LA67_561 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 561, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case TILDE:
                                            {
                                            int LA67_562 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 562, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case LPAREN:
                                            {
                                            int LA67_563 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 563, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case LBRACK:
                                            {
                                            int LA67_564 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 564, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case LCURLY:
                                            {
                                            int LA67_565 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 565, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case BACKQUOTE:
                                            {
                                            int LA67_566 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 566, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case NAME:
                                            {
                                            int LA67_567 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 567, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case INT:
                                            {
                                            int LA67_568 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 568, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case LONGINT:
                                            {
                                            int LA67_569 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 569, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case FLOAT:
                                            {
                                            int LA67_570 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 570, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case COMPLEX:
                                            {
                                            int LA67_571 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 571, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case STRING:
                                            {
                                            int LA67_572 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 572, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        default:
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 286, input);

                                            throw nvae;
                                        }

                                        }
                                        break;
                                    case MINUS:
                                        {
                                        int LA67_287 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 287, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case TILDE:
                                        {
                                        int LA67_288 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 288, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                        {
                                        int LA67_289 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 289, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LBRACK:
                                        {
                                        int LA67_290 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 290, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LCURLY:
                                        {
                                        int LA67_291 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 291, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case BACKQUOTE:
                                        {
                                        int LA67_292 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 292, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case NAME:
                                        {
                                        int LA67_293 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 293, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case INT:
                                        {
                                        int LA67_294 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 294, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LONGINT:
                                        {
                                        int LA67_295 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 295, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case FLOAT:
                                        {
                                        int LA67_296 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 296, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case COMPLEX:
                                        {
                                        int LA67_297 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 297, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case STRING:
                                        {
                                        int LA67_298 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 298, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 95, input);

                                        throw nvae;
                                    }

                                    }
                                    break;
                                case LPAREN:
                                    {
                                    int LA67_96 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 96, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LBRACK:
                                    {
                                    int LA67_97 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 97, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LCURLY:
                                    {
                                    int LA67_98 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 98, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case BACKQUOTE:
                                    {
                                    int LA67_99 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 99, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case NAME:
                                    {
                                    int LA67_100 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 100, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case INT:
                                    {
                                    int LA67_101 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 101, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LONGINT:
                                    {
                                    int LA67_102 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 102, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case FLOAT:
                                    {
                                    int LA67_103 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 103, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case COMPLEX:
                                    {
                                    int LA67_104 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 104, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case STRING:
                                    {
                                    int LA67_105 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 105, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 19, input);

                                    throw nvae;
                                }

                                }
                                break;
                            case TILDE:
                                {
                                switch ( input.LA(4) ) {
                                case PLUS:
                                    {
                                    switch ( input.LA(5) ) {
                                    case PLUS:
                                        {
                                        int LA67_308 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 308, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case MINUS:
                                        {
                                        switch ( input.LA(6) ) {
                                        case PLUS:
                                            {
                                            int LA67_585 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 585, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case MINUS:
                                            {
                                            int LA67_586 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 586, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case TILDE:
                                            {
                                            int LA67_587 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 587, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case LPAREN:
                                            {
                                            int LA67_588 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 588, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case LBRACK:
                                            {
                                            int LA67_589 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 589, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case LCURLY:
                                            {
                                            int LA67_590 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 590, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case BACKQUOTE:
                                            {
                                            int LA67_591 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 591, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case NAME:
                                            {
                                            int LA67_592 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 592, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case INT:
                                            {
                                            int LA67_593 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 593, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case LONGINT:
                                            {
                                            int LA67_594 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 594, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case FLOAT:
                                            {
                                            int LA67_595 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 595, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case COMPLEX:
                                            {
                                            int LA67_596 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 596, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case STRING:
                                            {
                                            int LA67_597 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 597, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        default:
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 309, input);

                                            throw nvae;
                                        }

                                        }
                                        break;
                                    case TILDE:
                                        {
                                        int LA67_310 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 310, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                        {
                                        int LA67_311 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 311, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LBRACK:
                                        {
                                        int LA67_312 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 312, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LCURLY:
                                        {
                                        int LA67_313 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 313, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case BACKQUOTE:
                                        {
                                        int LA67_314 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 314, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case NAME:
                                        {
                                        int LA67_315 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 315, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case INT:
                                        {
                                        int LA67_316 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 316, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LONGINT:
                                        {
                                        int LA67_317 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 317, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case FLOAT:
                                        {
                                        int LA67_318 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 318, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case COMPLEX:
                                        {
                                        int LA67_319 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 319, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case STRING:
                                        {
                                        int LA67_320 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 320, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 106, input);

                                        throw nvae;
                                    }

                                    }
                                    break;
                                case MINUS:
                                    {
                                    switch ( input.LA(5) ) {
                                    case PLUS:
                                        {
                                        switch ( input.LA(6) ) {
                                        case PLUS:
                                            {
                                            int LA67_609 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 609, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case MINUS:
                                            {
                                            int LA67_610 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 610, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case TILDE:
                                            {
                                            int LA67_611 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 611, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case LPAREN:
                                            {
                                            int LA67_612 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 612, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case LBRACK:
                                            {
                                            int LA67_613 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 613, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case LCURLY:
                                            {
                                            int LA67_614 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 614, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case BACKQUOTE:
                                            {
                                            int LA67_615 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 615, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case NAME:
                                            {
                                            int LA67_616 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 616, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case INT:
                                            {
                                            int LA67_617 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 617, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case LONGINT:
                                            {
                                            int LA67_618 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 618, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case FLOAT:
                                            {
                                            int LA67_619 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 619, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case COMPLEX:
                                            {
                                            int LA67_620 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 620, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case STRING:
                                            {
                                            int LA67_621 = input.LA(7);

                                            if ( (synpred2()) ) {
                                                alt67=1;
                                            }
                                            else if ( (true) ) {
                                                alt67=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 621, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        default:
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 321, input);

                                            throw nvae;
                                        }

                                        }
                                        break;
                                    case MINUS:
                                        {
                                        int LA67_322 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 322, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case TILDE:
                                        {
                                        int LA67_323 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 323, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                        {
                                        int LA67_324 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 324, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LBRACK:
                                        {
                                        int LA67_325 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 325, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LCURLY:
                                        {
                                        int LA67_326 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 326, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case BACKQUOTE:
                                        {
                                        int LA67_327 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 327, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case NAME:
                                        {
                                        int LA67_328 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 328, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case INT:
                                        {
                                        int LA67_329 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 329, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LONGINT:
                                        {
                                        int LA67_330 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 330, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case FLOAT:
                                        {
                                        int LA67_331 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 331, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case COMPLEX:
                                        {
                                        int LA67_332 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 332, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case STRING:
                                        {
                                        int LA67_333 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 333, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 107, input);

                                        throw nvae;
                                    }

                                    }
                                    break;
                                case TILDE:
                                    {
                                    int LA67_108 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 108, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LPAREN:
                                    {
                                    int LA67_109 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 109, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LBRACK:
                                    {
                                    int LA67_110 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 110, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LCURLY:
                                    {
                                    int LA67_111 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 111, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case BACKQUOTE:
                                    {
                                    int LA67_112 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 112, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case NAME:
                                    {
                                    int LA67_113 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 113, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case INT:
                                    {
                                    int LA67_114 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 114, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LONGINT:
                                    {
                                    int LA67_115 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 115, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case FLOAT:
                                    {
                                    int LA67_116 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 116, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case COMPLEX:
                                    {
                                    int LA67_117 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 117, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case STRING:
                                    {
                                    int LA67_118 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 118, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 20, input);

                                    throw nvae;
                                }

                                }
                                break;
                            case LPAREN:
                                {
                                int LA67_21 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 21, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case LBRACK:
                                {
                                int LA67_22 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 22, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case LCURLY:
                                {
                                int LA67_23 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 23, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case BACKQUOTE:
                                {
                                int LA67_24 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 24, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case NAME:
                                {
                                int LA67_25 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 25, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case INT:
                                {
                                int LA67_26 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 26, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case LONGINT:
                                {
                                int LA67_27 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 27, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case FLOAT:
                                {
                                int LA67_28 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 28, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case COMPLEX:
                                {
                                int LA67_29 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 29, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case STRING:
                                {
                                int LA67_30 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 30, input);

                                    throw nvae;
                                }
                                }
                                break;
                            default:
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 3, input);

                                throw nvae;
                            }

                            }
                            break;
                        case PLUS:
                            {
                            switch ( input.LA(3) ) {
                            case PLUS:
                                {
                                int LA67_31 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 31, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case MINUS:
                                {
                                switch ( input.LA(4) ) {
                                case PLUS:
                                    {
                                    int LA67_129 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 129, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case MINUS:
                                    {
                                    int LA67_130 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 130, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case TILDE:
                                    {
                                    switch ( input.LA(5) ) {
                                    case PLUS:
                                        {
                                        int LA67_347 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 347, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case MINUS:
                                        {
                                        int LA67_348 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 348, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case TILDE:
                                        {
                                        int LA67_349 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 349, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                        {
                                        int LA67_350 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 350, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LBRACK:
                                        {
                                        int LA67_351 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 351, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LCURLY:
                                        {
                                        int LA67_352 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 352, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case BACKQUOTE:
                                        {
                                        int LA67_353 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 353, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case NAME:
                                        {
                                        int LA67_354 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 354, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case INT:
                                        {
                                        int LA67_355 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 355, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LONGINT:
                                        {
                                        int LA67_356 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 356, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case FLOAT:
                                        {
                                        int LA67_357 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 357, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case COMPLEX:
                                        {
                                        int LA67_358 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 358, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case STRING:
                                        {
                                        int LA67_359 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 359, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 131, input);

                                        throw nvae;
                                    }

                                    }
                                    break;
                                case LPAREN:
                                    {
                                    int LA67_132 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 132, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LBRACK:
                                    {
                                    int LA67_133 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 133, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LCURLY:
                                    {
                                    int LA67_134 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 134, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case BACKQUOTE:
                                    {
                                    int LA67_135 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 135, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case NAME:
                                    {
                                    int LA67_136 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 136, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case INT:
                                    {
                                    int LA67_137 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 137, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LONGINT:
                                    {
                                    int LA67_138 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 138, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case FLOAT:
                                    {
                                    int LA67_139 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 139, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case COMPLEX:
                                    {
                                    int LA67_140 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 140, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case STRING:
                                    {
                                    int LA67_141 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 141, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 32, input);

                                    throw nvae;
                                }

                                }
                                break;
                            case TILDE:
                                {
                                switch ( input.LA(4) ) {
                                case PLUS:
                                    {
                                    int LA67_142 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 142, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case MINUS:
                                    {
                                    switch ( input.LA(5) ) {
                                    case PLUS:
                                        {
                                        int LA67_369 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 369, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case MINUS:
                                        {
                                        int LA67_370 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 370, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case TILDE:
                                        {
                                        int LA67_371 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 371, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                        {
                                        int LA67_372 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 372, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LBRACK:
                                        {
                                        int LA67_373 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 373, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LCURLY:
                                        {
                                        int LA67_374 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 374, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case BACKQUOTE:
                                        {
                                        int LA67_375 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 375, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case NAME:
                                        {
                                        int LA67_376 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 376, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case INT:
                                        {
                                        int LA67_377 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 377, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LONGINT:
                                        {
                                        int LA67_378 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 378, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case FLOAT:
                                        {
                                        int LA67_379 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 379, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case COMPLEX:
                                        {
                                        int LA67_380 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 380, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case STRING:
                                        {
                                        int LA67_381 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 381, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 143, input);

                                        throw nvae;
                                    }

                                    }
                                    break;
                                case TILDE:
                                    {
                                    int LA67_144 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 144, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LPAREN:
                                    {
                                    int LA67_145 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 145, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LBRACK:
                                    {
                                    int LA67_146 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 146, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LCURLY:
                                    {
                                    int LA67_147 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 147, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case BACKQUOTE:
                                    {
                                    int LA67_148 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 148, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case NAME:
                                    {
                                    int LA67_149 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 149, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case INT:
                                    {
                                    int LA67_150 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 150, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LONGINT:
                                    {
                                    int LA67_151 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 151, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case FLOAT:
                                    {
                                    int LA67_152 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 152, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case COMPLEX:
                                    {
                                    int LA67_153 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 153, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case STRING:
                                    {
                                    int LA67_154 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 154, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 33, input);

                                    throw nvae;
                                }

                                }
                                break;
                            case LPAREN:
                                {
                                int LA67_34 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 34, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case LBRACK:
                                {
                                int LA67_35 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 35, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case LCURLY:
                                {
                                int LA67_36 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 36, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case BACKQUOTE:
                                {
                                int LA67_37 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 37, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case NAME:
                                {
                                int LA67_38 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 38, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case INT:
                                {
                                int LA67_39 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 39, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case LONGINT:
                                {
                                int LA67_40 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 40, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case FLOAT:
                                {
                                int LA67_41 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 41, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case COMPLEX:
                                {
                                int LA67_42 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 42, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case STRING:
                                {
                                int LA67_43 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 43, input);

                                    throw nvae;
                                }
                                }
                                break;
                            default:
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 4, input);

                                throw nvae;
                            }

                            }
                            break;
                        case MINUS:
                            {
                            switch ( input.LA(3) ) {
                            case PLUS:
                                {
                                switch ( input.LA(4) ) {
                                case PLUS:
                                    {
                                    int LA67_164 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 164, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case MINUS:
                                    {
                                    int LA67_165 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 165, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case TILDE:
                                    {
                                    switch ( input.LA(5) ) {
                                    case PLUS:
                                        {
                                        int LA67_393 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 393, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case MINUS:
                                        {
                                        int LA67_394 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 394, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case TILDE:
                                        {
                                        int LA67_395 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 395, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                        {
                                        int LA67_396 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 396, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LBRACK:
                                        {
                                        int LA67_397 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 397, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LCURLY:
                                        {
                                        int LA67_398 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 398, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case BACKQUOTE:
                                        {
                                        int LA67_399 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 399, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case NAME:
                                        {
                                        int LA67_400 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 400, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case INT:
                                        {
                                        int LA67_401 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 401, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LONGINT:
                                        {
                                        int LA67_402 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 402, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case FLOAT:
                                        {
                                        int LA67_403 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 403, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case COMPLEX:
                                        {
                                        int LA67_404 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 404, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case STRING:
                                        {
                                        int LA67_405 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 405, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 166, input);

                                        throw nvae;
                                    }

                                    }
                                    break;
                                case LPAREN:
                                    {
                                    int LA67_167 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 167, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LBRACK:
                                    {
                                    int LA67_168 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 168, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LCURLY:
                                    {
                                    int LA67_169 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 169, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case BACKQUOTE:
                                    {
                                    int LA67_170 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 170, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case NAME:
                                    {
                                    int LA67_171 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 171, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case INT:
                                    {
                                    int LA67_172 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 172, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LONGINT:
                                    {
                                    int LA67_173 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 173, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case FLOAT:
                                    {
                                    int LA67_174 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 174, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case COMPLEX:
                                    {
                                    int LA67_175 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 175, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case STRING:
                                    {
                                    int LA67_176 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 176, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 44, input);

                                    throw nvae;
                                }

                                }
                                break;
                            case MINUS:
                                {
                                int LA67_45 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 45, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case TILDE:
                                {
                                switch ( input.LA(4) ) {
                                case PLUS:
                                    {
                                    switch ( input.LA(5) ) {
                                    case PLUS:
                                        {
                                        int LA67_414 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 414, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case MINUS:
                                        {
                                        int LA67_415 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 415, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case TILDE:
                                        {
                                        int LA67_416 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 416, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                        {
                                        int LA67_417 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 417, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LBRACK:
                                        {
                                        int LA67_418 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 418, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LCURLY:
                                        {
                                        int LA67_419 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 419, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case BACKQUOTE:
                                        {
                                        int LA67_420 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 420, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case NAME:
                                        {
                                        int LA67_421 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 421, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case INT:
                                        {
                                        int LA67_422 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 422, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LONGINT:
                                        {
                                        int LA67_423 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 423, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case FLOAT:
                                        {
                                        int LA67_424 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 424, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case COMPLEX:
                                        {
                                        int LA67_425 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 425, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case STRING:
                                        {
                                        int LA67_426 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 426, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 178, input);

                                        throw nvae;
                                    }

                                    }
                                    break;
                                case MINUS:
                                    {
                                    int LA67_179 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 179, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case TILDE:
                                    {
                                    int LA67_180 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 180, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LPAREN:
                                    {
                                    int LA67_181 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 181, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LBRACK:
                                    {
                                    int LA67_182 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 182, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LCURLY:
                                    {
                                    int LA67_183 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 183, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case BACKQUOTE:
                                    {
                                    int LA67_184 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 184, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case NAME:
                                    {
                                    int LA67_185 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 185, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case INT:
                                    {
                                    int LA67_186 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 186, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LONGINT:
                                    {
                                    int LA67_187 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 187, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case FLOAT:
                                    {
                                    int LA67_188 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 188, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case COMPLEX:
                                    {
                                    int LA67_189 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 189, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case STRING:
                                    {
                                    int LA67_190 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 190, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 46, input);

                                    throw nvae;
                                }

                                }
                                break;
                            case LPAREN:
                                {
                                int LA67_47 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 47, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case LBRACK:
                                {
                                int LA67_48 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 48, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case LCURLY:
                                {
                                int LA67_49 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 49, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case BACKQUOTE:
                                {
                                int LA67_50 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 50, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case NAME:
                                {
                                int LA67_51 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 51, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case INT:
                                {
                                int LA67_52 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 52, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case LONGINT:
                                {
                                int LA67_53 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 53, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case FLOAT:
                                {
                                int LA67_54 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 54, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case COMPLEX:
                                {
                                int LA67_55 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 55, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case STRING:
                                {
                                int LA67_56 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 56, input);

                                    throw nvae;
                                }
                                }
                                break;
                            default:
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 5, input);

                                throw nvae;
                            }

                            }
                            break;
                        case TILDE:
                            {
                            switch ( input.LA(3) ) {
                            case PLUS:
                                {
                                switch ( input.LA(4) ) {
                                case PLUS:
                                    {
                                    int LA67_201 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 201, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case MINUS:
                                    {
                                    switch ( input.LA(5) ) {
                                    case PLUS:
                                        {
                                        int LA67_439 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 439, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case MINUS:
                                        {
                                        int LA67_440 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 440, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case TILDE:
                                        {
                                        int LA67_441 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 441, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                        {
                                        int LA67_442 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 442, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LBRACK:
                                        {
                                        int LA67_443 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 443, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LCURLY:
                                        {
                                        int LA67_444 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 444, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case BACKQUOTE:
                                        {
                                        int LA67_445 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 445, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case NAME:
                                        {
                                        int LA67_446 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 446, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case INT:
                                        {
                                        int LA67_447 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 447, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LONGINT:
                                        {
                                        int LA67_448 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 448, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case FLOAT:
                                        {
                                        int LA67_449 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 449, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case COMPLEX:
                                        {
                                        int LA67_450 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 450, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case STRING:
                                        {
                                        int LA67_451 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 451, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 202, input);

                                        throw nvae;
                                    }

                                    }
                                    break;
                                case TILDE:
                                    {
                                    int LA67_203 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 203, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LPAREN:
                                    {
                                    int LA67_204 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 204, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LBRACK:
                                    {
                                    int LA67_205 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 205, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LCURLY:
                                    {
                                    int LA67_206 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 206, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case BACKQUOTE:
                                    {
                                    int LA67_207 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 207, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case NAME:
                                    {
                                    int LA67_208 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 208, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case INT:
                                    {
                                    int LA67_209 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 209, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LONGINT:
                                    {
                                    int LA67_210 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 210, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case FLOAT:
                                    {
                                    int LA67_211 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 211, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case COMPLEX:
                                    {
                                    int LA67_212 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 212, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case STRING:
                                    {
                                    int LA67_213 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 213, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 57, input);

                                    throw nvae;
                                }

                                }
                                break;
                            case MINUS:
                                {
                                switch ( input.LA(4) ) {
                                case PLUS:
                                    {
                                    switch ( input.LA(5) ) {
                                    case PLUS:
                                        {
                                        int LA67_461 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 461, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case MINUS:
                                        {
                                        int LA67_462 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 462, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case TILDE:
                                        {
                                        int LA67_463 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 463, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LPAREN:
                                        {
                                        int LA67_464 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 464, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LBRACK:
                                        {
                                        int LA67_465 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 465, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LCURLY:
                                        {
                                        int LA67_466 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 466, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case BACKQUOTE:
                                        {
                                        int LA67_467 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 467, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case NAME:
                                        {
                                        int LA67_468 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 468, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case INT:
                                        {
                                        int LA67_469 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 469, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case LONGINT:
                                        {
                                        int LA67_470 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 470, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case FLOAT:
                                        {
                                        int LA67_471 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 471, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case COMPLEX:
                                        {
                                        int LA67_472 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 472, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    case STRING:
                                        {
                                        int LA67_473 = input.LA(6);

                                        if ( (synpred2()) ) {
                                            alt67=1;
                                        }
                                        else if ( (true) ) {
                                            alt67=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 473, input);

                                            throw nvae;
                                        }
                                        }
                                        break;
                                    default:
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 214, input);

                                        throw nvae;
                                    }

                                    }
                                    break;
                                case MINUS:
                                    {
                                    int LA67_215 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 215, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case TILDE:
                                    {
                                    int LA67_216 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 216, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LPAREN:
                                    {
                                    int LA67_217 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 217, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LBRACK:
                                    {
                                    int LA67_218 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 218, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LCURLY:
                                    {
                                    int LA67_219 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 219, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case BACKQUOTE:
                                    {
                                    int LA67_220 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 220, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case NAME:
                                    {
                                    int LA67_221 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 221, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case INT:
                                    {
                                    int LA67_222 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 222, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case LONGINT:
                                    {
                                    int LA67_223 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 223, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case FLOAT:
                                    {
                                    int LA67_224 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 224, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case COMPLEX:
                                    {
                                    int LA67_225 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 225, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case STRING:
                                    {
                                    int LA67_226 = input.LA(5);

                                    if ( (synpred2()) ) {
                                        alt67=1;
                                    }
                                    else if ( (true) ) {
                                        alt67=2;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 226, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 58, input);

                                    throw nvae;
                                }

                                }
                                break;
                            case TILDE:
                                {
                                int LA67_59 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 59, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case LPAREN:
                                {
                                int LA67_60 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 60, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case LBRACK:
                                {
                                int LA67_61 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 61, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case LCURLY:
                                {
                                int LA67_62 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 62, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case BACKQUOTE:
                                {
                                int LA67_63 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 63, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case NAME:
                                {
                                int LA67_64 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 64, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case INT:
                                {
                                int LA67_65 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 65, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case LONGINT:
                                {
                                int LA67_66 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 66, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case FLOAT:
                                {
                                int LA67_67 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 67, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case COMPLEX:
                                {
                                int LA67_68 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 68, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case STRING:
                                {
                                int LA67_69 = input.LA(4);

                                if ( (synpred2()) ) {
                                    alt67=1;
                                }
                                else if ( (true) ) {
                                    alt67=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 69, input);

                                    throw nvae;
                                }
                                }
                                break;
                            default:
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 6, input);

                                throw nvae;
                            }

                            }
                            break;
                        case LPAREN:
                            {
                            int LA67_7 = input.LA(3);

                            if ( (synpred2()) ) {
                                alt67=1;
                            }
                            else if ( (true) ) {
                                alt67=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 7, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LBRACK:
                            {
                            int LA67_8 = input.LA(3);

                            if ( (synpred2()) ) {
                                alt67=1;
                            }
                            else if ( (true) ) {
                                alt67=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 8, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LCURLY:
                            {
                            int LA67_9 = input.LA(3);

                            if ( (synpred2()) ) {
                                alt67=1;
                            }
                            else if ( (true) ) {
                                alt67=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 9, input);

                                throw nvae;
                            }
                            }
                            break;
                        case BACKQUOTE:
                            {
                            int LA67_10 = input.LA(3);

                            if ( (synpred2()) ) {
                                alt67=1;
                            }
                            else if ( (true) ) {
                                alt67=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 10, input);

                                throw nvae;
                            }
                            }
                            break;
                        case NAME:
                            {
                            int LA67_11 = input.LA(3);

                            if ( (synpred2()) ) {
                                alt67=1;
                            }
                            else if ( (true) ) {
                                alt67=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 11, input);

                                throw nvae;
                            }
                            }
                            break;
                        case INT:
                            {
                            int LA67_12 = input.LA(3);

                            if ( (synpred2()) ) {
                                alt67=1;
                            }
                            else if ( (true) ) {
                                alt67=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 12, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LONGINT:
                            {
                            int LA67_13 = input.LA(3);

                            if ( (synpred2()) ) {
                                alt67=1;
                            }
                            else if ( (true) ) {
                                alt67=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 13, input);

                                throw nvae;
                            }
                            }
                            break;
                        case FLOAT:
                            {
                            int LA67_14 = input.LA(3);

                            if ( (synpred2()) ) {
                                alt67=1;
                            }
                            else if ( (true) ) {
                                alt67=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 14, input);

                                throw nvae;
                            }
                            }
                            break;
                        case COMPLEX:
                            {
                            int LA67_15 = input.LA(3);

                            if ( (synpred2()) ) {
                                alt67=1;
                            }
                            else if ( (true) ) {
                                alt67=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 15, input);

                                throw nvae;
                            }
                            }
                            break;
                        case STRING:
                            {
                            int LA67_16 = input.LA(3);

                            if ( (synpred2()) ) {
                                alt67=1;
                            }
                            else if ( (true) ) {
                                alt67=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 16, input);

                                throw nvae;
                            }
                            }
                            break;
                        case 194:
                            {
                            alt67=2;
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 1, input);

                            throw nvae;
                        }

                    }
                    else if ( (LA67_0==EOF||LA67_0==NEWLINE||(LA67_0>=RPAREN && LA67_0<=NAME)||(LA67_0>=COLON && LA67_0<=COMMA)||(LA67_0>=ASSIGN && LA67_0<=DOUBLESLASHEQUAL)||LA67_0==RBRACK||(LA67_0>=RCURLY && LA67_0<=BACKQUOTE)||LA67_0==179||LA67_0==188) ) {
                        alt67=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("579:5: ( ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) ) | -> or_test )", 67, 0, input);

                        throw nvae;
                    }
                    switch (alt67) {
                        case 1 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:579:7: ( 'if' or_test 'else' )=> 'if' o2= or_test 'else' test
                            {
                            string_literal192=(Token)input.LT(1);
                            match(input,184,FOLLOW_184_in_test4553); if (failed) return retval;
                            if ( backtracking==0 ) stream_184.add(string_literal192);

                            pushFollow(FOLLOW_or_test_in_test4557);
                            o2=or_test();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_or_test.add(o2.getTree());
                            string_literal193=(Token)input.LT(1);
                            match(input,185,FOLLOW_185_in_test4559); if (failed) return retval;
                            if ( backtracking==0 ) stream_185.add(string_literal193);

                            pushFollow(FOLLOW_test_in_test4561);
                            test194=test();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_test.add(test194.getTree());

                            // AST REWRITE
                            // elements: o2, test, o1
                            // token labels: 
                            // rule labels: o2, retval, o1
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_o2=new RewriteRuleSubtreeStream(adaptor,"token o2",o2!=null?o2.tree:null);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_o1=new RewriteRuleSubtreeStream(adaptor,"token o1",o1!=null?o1.tree:null);

                            root_0 = (PythonTree)adaptor.nil();
                            // 580:7: -> ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) )
                            {
                                // /Users/frank/tmp/trunk/jython/grammar/Python.g:580:10: ^( IfExp ^( Test $o2) ^( Body $o1) ^( OrElse test ) )
                                {
                                PythonTree root_1 = (PythonTree)adaptor.nil();
                                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(IfExp, "IfExp"), root_1);

                                // /Users/frank/tmp/trunk/jython/grammar/Python.g:580:18: ^( Test $o2)
                                {
                                PythonTree root_2 = (PythonTree)adaptor.nil();
                                root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Test, "Test"), root_2);

                                adaptor.addChild(root_2, stream_o2.next());

                                adaptor.addChild(root_1, root_2);
                                }
                                // /Users/frank/tmp/trunk/jython/grammar/Python.g:580:30: ^( Body $o1)
                                {
                                PythonTree root_2 = (PythonTree)adaptor.nil();
                                root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Body, "Body"), root_2);

                                adaptor.addChild(root_2, stream_o1.next());

                                adaptor.addChild(root_1, root_2);
                                }
                                // /Users/frank/tmp/trunk/jython/grammar/Python.g:580:42: ^( OrElse test )
                                {
                                PythonTree root_2 = (PythonTree)adaptor.nil();
                                root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(OrElse, "OrElse"), root_2);

                                adaptor.addChild(root_2, stream_test.next());

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;
                        case 2 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:581:7: 
                            {

                            // AST REWRITE
                            // elements: or_test
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (PythonTree)adaptor.nil();
                            // 581:7: -> or_test
                            {
                                adaptor.addChild(root_0, stream_or_test.next());

                            }

                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:583:7: lambdef
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_lambdef_in_test4617);
                    lambdef195=lambdef();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, lambdef195.getTree());
                    if ( backtracking==0 ) {
                      debug("parsed lambdef");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end test

    public static class or_test_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start or_test
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:587:1: or_test : and_test ( OR and_test )* ;
    public final or_test_return or_test() throws RecognitionException {
        or_test_return retval = new or_test_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token OR197=null;
        and_test_return and_test196 = null;

        and_test_return and_test198 = null;


        PythonTree OR197_tree=null;

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:587:9: ( and_test ( OR and_test )* )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:587:11: and_test ( OR and_test )*
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_and_test_in_or_test4633);
            and_test196=and_test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, and_test196.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:587:20: ( OR and_test )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==OR) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:587:21: OR and_test
            	    {
            	    OR197=(Token)input.LT(1);
            	    match(input,OR,FOLLOW_OR_in_or_test4636); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    OR197_tree = (PythonTree)adaptor.create(OR197);
            	    root_0 = (PythonTree)adaptor.becomeRoot(OR197_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_and_test_in_or_test4639);
            	    and_test198=and_test();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, and_test198.getTree());

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end or_test

    public static class and_test_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start and_test
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:591:1: and_test : not_test ( AND not_test )* ;
    public final and_test_return and_test() throws RecognitionException {
        and_test_return retval = new and_test_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token AND200=null;
        not_test_return not_test199 = null;

        not_test_return not_test201 = null;


        PythonTree AND200_tree=null;

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:591:10: ( not_test ( AND not_test )* )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:591:12: not_test ( AND not_test )*
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_not_test_in_and_test4659);
            not_test199=not_test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, not_test199.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:591:21: ( AND not_test )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==AND) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:591:22: AND not_test
            	    {
            	    AND200=(Token)input.LT(1);
            	    match(input,AND,FOLLOW_AND_in_and_test4662); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    AND200_tree = (PythonTree)adaptor.create(AND200);
            	    root_0 = (PythonTree)adaptor.becomeRoot(AND200_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_not_test_in_and_test4665);
            	    not_test201=not_test();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, not_test201.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end and_test

    public static class not_test_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start not_test
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:595:1: not_test : ( NOT not_test | comparison );
    public final not_test_return not_test() throws RecognitionException {
        not_test_return retval = new not_test_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token NOT202=null;
        not_test_return not_test203 = null;

        comparison_return comparison204 = null;


        PythonTree NOT202_tree=null;

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:595:10: ( NOT not_test | comparison )
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==NOT) ) {
                alt71=1;
            }
            else if ( (LA71_0==LPAREN||LA71_0==NAME||(LA71_0>=PLUS && LA71_0<=MINUS)||(LA71_0>=TILDE && LA71_0<=LBRACK)||LA71_0==LCURLY||(LA71_0>=BACKQUOTE && LA71_0<=STRING)) ) {
                alt71=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("595:1: not_test : ( NOT not_test | comparison );", 71, 0, input);

                throw nvae;
            }
            switch (alt71) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:595:12: NOT not_test
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    NOT202=(Token)input.LT(1);
                    match(input,NOT,FOLLOW_NOT_in_not_test4686); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NOT202_tree = (PythonTree)adaptor.create(NOT202);
                    root_0 = (PythonTree)adaptor.becomeRoot(NOT202_tree, root_0);
                    }
                    pushFollow(FOLLOW_not_test_in_not_test4689);
                    not_test203=not_test();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, not_test203.getTree());

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:596:12: comparison
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_comparison_in_not_test4702);
                    comparison204=comparison();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, comparison204.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end not_test

    public static class comparison_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start comparison
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:600:1: comparison : expr ( comp_op expr )* ;
    public final comparison_return comparison() throws RecognitionException {
        comparison_return retval = new comparison_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        expr_return expr205 = null;

        comp_op_return comp_op206 = null;

        expr_return expr207 = null;



        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:600:11: ( expr ( comp_op expr )* )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:600:13: expr ( comp_op expr )*
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_expr_in_comparison4720);
            expr205=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr205.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:600:18: ( comp_op expr )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( ((LA72_0>=NOT && LA72_0<=NOTEQUAL)||LA72_0==182||LA72_0==193) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:600:19: comp_op expr
            	    {
            	    pushFollow(FOLLOW_comp_op_in_comparison4723);
            	    comp_op206=comp_op();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) root_0 = (PythonTree)adaptor.becomeRoot(comp_op206.getTree(), root_0);
            	    pushFollow(FOLLOW_expr_in_comparison4726);
            	    expr207=expr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, expr207.getTree());

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end comparison

    public static class comp_op_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start comp_op
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:610:1: comp_op : ( LESS | GREATER | EQUAL | GREATEREQUAL | LESSEQUAL | ALT_NOTEQUAL | NOTEQUAL | 'in' | NOT 'in' -> NotIn | 'is' | 'is' NOT -> IsNot );
    public final comp_op_return comp_op() throws RecognitionException {
        comp_op_return retval = new comp_op_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token LESS208=null;
        Token GREATER209=null;
        Token EQUAL210=null;
        Token GREATEREQUAL211=null;
        Token LESSEQUAL212=null;
        Token ALT_NOTEQUAL213=null;
        Token NOTEQUAL214=null;
        Token string_literal215=null;
        Token NOT216=null;
        Token string_literal217=null;
        Token string_literal218=null;
        Token string_literal219=null;
        Token NOT220=null;

        PythonTree LESS208_tree=null;
        PythonTree GREATER209_tree=null;
        PythonTree EQUAL210_tree=null;
        PythonTree GREATEREQUAL211_tree=null;
        PythonTree LESSEQUAL212_tree=null;
        PythonTree ALT_NOTEQUAL213_tree=null;
        PythonTree NOTEQUAL214_tree=null;
        PythonTree string_literal215_tree=null;
        PythonTree NOT216_tree=null;
        PythonTree string_literal217_tree=null;
        PythonTree string_literal218_tree=null;
        PythonTree string_literal219_tree=null;
        PythonTree NOT220_tree=null;
        RewriteRuleTokenStream stream_NOT=new RewriteRuleTokenStream(adaptor,"token NOT");
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:610:9: ( LESS | GREATER | EQUAL | GREATEREQUAL | LESSEQUAL | ALT_NOTEQUAL | NOTEQUAL | 'in' | NOT 'in' -> NotIn | 'is' | 'is' NOT -> IsNot )
            int alt73=11;
            switch ( input.LA(1) ) {
            case LESS:
                {
                alt73=1;
                }
                break;
            case GREATER:
                {
                alt73=2;
                }
                break;
            case EQUAL:
                {
                alt73=3;
                }
                break;
            case GREATEREQUAL:
                {
                alt73=4;
                }
                break;
            case LESSEQUAL:
                {
                alt73=5;
                }
                break;
            case ALT_NOTEQUAL:
                {
                alt73=6;
                }
                break;
            case NOTEQUAL:
                {
                alt73=7;
                }
                break;
            case 182:
                {
                alt73=8;
                }
                break;
            case NOT:
                {
                alt73=9;
                }
                break;
            case 193:
                {
                int LA73_10 = input.LA(2);

                if ( (LA73_10==NOT) ) {
                    alt73=11;
                }
                else if ( (LA73_10==LPAREN||LA73_10==NAME||(LA73_10>=PLUS && LA73_10<=MINUS)||(LA73_10>=TILDE && LA73_10<=LBRACK)||LA73_10==LCURLY||(LA73_10>=BACKQUOTE && LA73_10<=STRING)) ) {
                    alt73=10;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("610:1: comp_op : ( LESS | GREATER | EQUAL | GREATEREQUAL | LESSEQUAL | ALT_NOTEQUAL | NOTEQUAL | 'in' | NOT 'in' -> NotIn | 'is' | 'is' NOT -> IsNot );", 73, 10, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("610:1: comp_op : ( LESS | GREATER | EQUAL | GREATEREQUAL | LESSEQUAL | ALT_NOTEQUAL | NOTEQUAL | 'in' | NOT 'in' -> NotIn | 'is' | 'is' NOT -> IsNot );", 73, 0, input);

                throw nvae;
            }

            switch (alt73) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:610:11: LESS
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    LESS208=(Token)input.LT(1);
                    match(input,LESS,FOLLOW_LESS_in_comp_op4745); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LESS208_tree = (PythonTree)adaptor.create(LESS208);
                    adaptor.addChild(root_0, LESS208_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:611:11: GREATER
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    GREATER209=(Token)input.LT(1);
                    match(input,GREATER,FOLLOW_GREATER_in_comp_op4757); if (failed) return retval;
                    if ( backtracking==0 ) {
                    GREATER209_tree = (PythonTree)adaptor.create(GREATER209);
                    adaptor.addChild(root_0, GREATER209_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:612:11: EQUAL
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    EQUAL210=(Token)input.LT(1);
                    match(input,EQUAL,FOLLOW_EQUAL_in_comp_op4769); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EQUAL210_tree = (PythonTree)adaptor.create(EQUAL210);
                    adaptor.addChild(root_0, EQUAL210_tree);
                    }

                    }
                    break;
                case 4 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:613:11: GREATEREQUAL
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    GREATEREQUAL211=(Token)input.LT(1);
                    match(input,GREATEREQUAL,FOLLOW_GREATEREQUAL_in_comp_op4781); if (failed) return retval;
                    if ( backtracking==0 ) {
                    GREATEREQUAL211_tree = (PythonTree)adaptor.create(GREATEREQUAL211);
                    adaptor.addChild(root_0, GREATEREQUAL211_tree);
                    }

                    }
                    break;
                case 5 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:614:11: LESSEQUAL
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    LESSEQUAL212=(Token)input.LT(1);
                    match(input,LESSEQUAL,FOLLOW_LESSEQUAL_in_comp_op4793); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LESSEQUAL212_tree = (PythonTree)adaptor.create(LESSEQUAL212);
                    adaptor.addChild(root_0, LESSEQUAL212_tree);
                    }

                    }
                    break;
                case 6 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:615:11: ALT_NOTEQUAL
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    ALT_NOTEQUAL213=(Token)input.LT(1);
                    match(input,ALT_NOTEQUAL,FOLLOW_ALT_NOTEQUAL_in_comp_op4805); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ALT_NOTEQUAL213_tree = (PythonTree)adaptor.create(ALT_NOTEQUAL213);
                    adaptor.addChild(root_0, ALT_NOTEQUAL213_tree);
                    }

                    }
                    break;
                case 7 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:616:11: NOTEQUAL
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    NOTEQUAL214=(Token)input.LT(1);
                    match(input,NOTEQUAL,FOLLOW_NOTEQUAL_in_comp_op4817); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NOTEQUAL214_tree = (PythonTree)adaptor.create(NOTEQUAL214);
                    adaptor.addChild(root_0, NOTEQUAL214_tree);
                    }

                    }
                    break;
                case 8 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:617:11: 'in'
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    string_literal215=(Token)input.LT(1);
                    match(input,182,FOLLOW_182_in_comp_op4829); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal215_tree = (PythonTree)adaptor.create(string_literal215);
                    adaptor.addChild(root_0, string_literal215_tree);
                    }

                    }
                    break;
                case 9 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:618:11: NOT 'in'
                    {
                    NOT216=(Token)input.LT(1);
                    match(input,NOT,FOLLOW_NOT_in_comp_op4841); if (failed) return retval;
                    if ( backtracking==0 ) stream_NOT.add(NOT216);

                    string_literal217=(Token)input.LT(1);
                    match(input,182,FOLLOW_182_in_comp_op4843); if (failed) return retval;
                    if ( backtracking==0 ) stream_182.add(string_literal217);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 618:20: -> NotIn
                    {
                        adaptor.addChild(root_0, adaptor.create(NotIn, "NotIn"));

                    }

                    }

                    }
                    break;
                case 10 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:619:11: 'is'
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    string_literal218=(Token)input.LT(1);
                    match(input,193,FOLLOW_193_in_comp_op4859); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal218_tree = (PythonTree)adaptor.create(string_literal218);
                    adaptor.addChild(root_0, string_literal218_tree);
                    }

                    }
                    break;
                case 11 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:620:11: 'is' NOT
                    {
                    string_literal219=(Token)input.LT(1);
                    match(input,193,FOLLOW_193_in_comp_op4871); if (failed) return retval;
                    if ( backtracking==0 ) stream_193.add(string_literal219);

                    NOT220=(Token)input.LT(1);
                    match(input,NOT,FOLLOW_NOT_in_comp_op4873); if (failed) return retval;
                    if ( backtracking==0 ) stream_NOT.add(NOT220);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 620:20: -> IsNot
                    {
                        adaptor.addChild(root_0, adaptor.create(IsNot, "IsNot"));

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end comp_op

    public static class expr_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start expr
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:624:1: expr : xor_expr ( VBAR xor_expr )* ;
    public final expr_return expr() throws RecognitionException {
        expr_return retval = new expr_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token VBAR222=null;
        xor_expr_return xor_expr221 = null;

        xor_expr_return xor_expr223 = null;


        PythonTree VBAR222_tree=null;

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:624:6: ( xor_expr ( VBAR xor_expr )* )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:624:8: xor_expr ( VBAR xor_expr )*
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_xor_expr_in_expr4895);
            xor_expr221=xor_expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, xor_expr221.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:624:17: ( VBAR xor_expr )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==VBAR) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:624:18: VBAR xor_expr
            	    {
            	    VBAR222=(Token)input.LT(1);
            	    match(input,VBAR,FOLLOW_VBAR_in_expr4898); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    VBAR222_tree = (PythonTree)adaptor.create(VBAR222);
            	    root_0 = (PythonTree)adaptor.becomeRoot(VBAR222_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_xor_expr_in_expr4901);
            	    xor_expr223=xor_expr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, xor_expr223.getTree());

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end expr

    public static class xor_expr_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start xor_expr
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:628:1: xor_expr : and_expr ( CIRCUMFLEX and_expr )* ;
    public final xor_expr_return xor_expr() throws RecognitionException {
        xor_expr_return retval = new xor_expr_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token CIRCUMFLEX225=null;
        and_expr_return and_expr224 = null;

        and_expr_return and_expr226 = null;


        PythonTree CIRCUMFLEX225_tree=null;

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:628:10: ( and_expr ( CIRCUMFLEX and_expr )* )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:628:12: and_expr ( CIRCUMFLEX and_expr )*
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_and_expr_in_xor_expr4918);
            and_expr224=and_expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, and_expr224.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:628:21: ( CIRCUMFLEX and_expr )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==CIRCUMFLEX) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:628:22: CIRCUMFLEX and_expr
            	    {
            	    CIRCUMFLEX225=(Token)input.LT(1);
            	    match(input,CIRCUMFLEX,FOLLOW_CIRCUMFLEX_in_xor_expr4921); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    CIRCUMFLEX225_tree = (PythonTree)adaptor.create(CIRCUMFLEX225);
            	    root_0 = (PythonTree)adaptor.becomeRoot(CIRCUMFLEX225_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_and_expr_in_xor_expr4924);
            	    and_expr226=and_expr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, and_expr226.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end xor_expr

    public static class and_expr_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start and_expr
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:632:1: and_expr : shift_expr ( AMPER shift_expr )* ;
    public final and_expr_return and_expr() throws RecognitionException {
        and_expr_return retval = new and_expr_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token AMPER228=null;
        shift_expr_return shift_expr227 = null;

        shift_expr_return shift_expr229 = null;


        PythonTree AMPER228_tree=null;

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:632:10: ( shift_expr ( AMPER shift_expr )* )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:632:12: shift_expr ( AMPER shift_expr )*
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_shift_expr_in_and_expr4945);
            shift_expr227=shift_expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, shift_expr227.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:632:23: ( AMPER shift_expr )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==AMPER) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:632:24: AMPER shift_expr
            	    {
            	    AMPER228=(Token)input.LT(1);
            	    match(input,AMPER,FOLLOW_AMPER_in_and_expr4948); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    AMPER228_tree = (PythonTree)adaptor.create(AMPER228);
            	    root_0 = (PythonTree)adaptor.becomeRoot(AMPER228_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_shift_expr_in_and_expr4951);
            	    shift_expr229=shift_expr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, shift_expr229.getTree());

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end and_expr

    public static class shift_expr_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start shift_expr
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:636:1: shift_expr : arith_expr ( ( LEFTSHIFT | RIGHTSHIFT ) arith_expr )* ;
    public final shift_expr_return shift_expr() throws RecognitionException {
        shift_expr_return retval = new shift_expr_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token LEFTSHIFT231=null;
        Token RIGHTSHIFT232=null;
        arith_expr_return arith_expr230 = null;

        arith_expr_return arith_expr233 = null;


        PythonTree LEFTSHIFT231_tree=null;
        PythonTree RIGHTSHIFT232_tree=null;

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:636:12: ( arith_expr ( ( LEFTSHIFT | RIGHTSHIFT ) arith_expr )* )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:636:14: arith_expr ( ( LEFTSHIFT | RIGHTSHIFT ) arith_expr )*
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_arith_expr_in_shift_expr4972);
            arith_expr230=arith_expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, arith_expr230.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:636:25: ( ( LEFTSHIFT | RIGHTSHIFT ) arith_expr )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==RIGHTSHIFT||LA78_0==LEFTSHIFT) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:636:26: ( LEFTSHIFT | RIGHTSHIFT ) arith_expr
            	    {
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:636:26: ( LEFTSHIFT | RIGHTSHIFT )
            	    int alt77=2;
            	    int LA77_0 = input.LA(1);

            	    if ( (LA77_0==LEFTSHIFT) ) {
            	        alt77=1;
            	    }
            	    else if ( (LA77_0==RIGHTSHIFT) ) {
            	        alt77=2;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("636:26: ( LEFTSHIFT | RIGHTSHIFT )", 77, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt77) {
            	        case 1 :
            	            // /Users/frank/tmp/trunk/jython/grammar/Python.g:636:27: LEFTSHIFT
            	            {
            	            LEFTSHIFT231=(Token)input.LT(1);
            	            match(input,LEFTSHIFT,FOLLOW_LEFTSHIFT_in_shift_expr4976); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            LEFTSHIFT231_tree = (PythonTree)adaptor.create(LEFTSHIFT231);
            	            root_0 = (PythonTree)adaptor.becomeRoot(LEFTSHIFT231_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/frank/tmp/trunk/jython/grammar/Python.g:636:38: RIGHTSHIFT
            	            {
            	            RIGHTSHIFT232=(Token)input.LT(1);
            	            match(input,RIGHTSHIFT,FOLLOW_RIGHTSHIFT_in_shift_expr4979); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            RIGHTSHIFT232_tree = (PythonTree)adaptor.create(RIGHTSHIFT232);
            	            root_0 = (PythonTree)adaptor.becomeRoot(RIGHTSHIFT232_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_arith_expr_in_shift_expr4983);
            	    arith_expr233=arith_expr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, arith_expr233.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end shift_expr

    public static class arith_expr_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start arith_expr
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:640:1: arith_expr : term ( ( PLUS | MINUS ) term )* ;
    public final arith_expr_return arith_expr() throws RecognitionException {
        arith_expr_return retval = new arith_expr_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token PLUS235=null;
        Token MINUS236=null;
        term_return term234 = null;

        term_return term237 = null;


        PythonTree PLUS235_tree=null;
        PythonTree MINUS236_tree=null;

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:640:11: ( term ( ( PLUS | MINUS ) term )* )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:640:13: term ( ( PLUS | MINUS ) term )*
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_term_in_arith_expr5005);
            term234=term();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, term234.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:640:18: ( ( PLUS | MINUS ) term )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( ((LA80_0>=PLUS && LA80_0<=MINUS)) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:640:19: ( PLUS | MINUS ) term
            	    {
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:640:19: ( PLUS | MINUS )
            	    int alt79=2;
            	    int LA79_0 = input.LA(1);

            	    if ( (LA79_0==PLUS) ) {
            	        alt79=1;
            	    }
            	    else if ( (LA79_0==MINUS) ) {
            	        alt79=2;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("640:19: ( PLUS | MINUS )", 79, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt79) {
            	        case 1 :
            	            // /Users/frank/tmp/trunk/jython/grammar/Python.g:640:20: PLUS
            	            {
            	            PLUS235=(Token)input.LT(1);
            	            match(input,PLUS,FOLLOW_PLUS_in_arith_expr5009); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            PLUS235_tree = (PythonTree)adaptor.create(PLUS235);
            	            root_0 = (PythonTree)adaptor.becomeRoot(PLUS235_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/frank/tmp/trunk/jython/grammar/Python.g:640:26: MINUS
            	            {
            	            MINUS236=(Token)input.LT(1);
            	            match(input,MINUS,FOLLOW_MINUS_in_arith_expr5012); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            MINUS236_tree = (PythonTree)adaptor.create(MINUS236);
            	            root_0 = (PythonTree)adaptor.becomeRoot(MINUS236_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_term_in_arith_expr5016);
            	    term237=term();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, term237.getTree());

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end arith_expr

    public static class term_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start term
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:644:1: term : factor ( ( STAR | SLASH | PERCENT | DOUBLESLASH ) factor )* ;
    public final term_return term() throws RecognitionException {
        term_return retval = new term_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token STAR239=null;
        Token SLASH240=null;
        Token PERCENT241=null;
        Token DOUBLESLASH242=null;
        factor_return factor238 = null;

        factor_return factor243 = null;


        PythonTree STAR239_tree=null;
        PythonTree SLASH240_tree=null;
        PythonTree PERCENT241_tree=null;
        PythonTree DOUBLESLASH242_tree=null;

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:644:6: ( factor ( ( STAR | SLASH | PERCENT | DOUBLESLASH ) factor )* )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:644:8: factor ( ( STAR | SLASH | PERCENT | DOUBLESLASH ) factor )*
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_factor_in_term5029);
            factor238=factor();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, factor238.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:644:15: ( ( STAR | SLASH | PERCENT | DOUBLESLASH ) factor )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==STAR||(LA82_0>=SLASH && LA82_0<=DOUBLESLASH)) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:644:16: ( STAR | SLASH | PERCENT | DOUBLESLASH ) factor
            	    {
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:644:16: ( STAR | SLASH | PERCENT | DOUBLESLASH )
            	    int alt81=4;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt81=1;
            	        }
            	        break;
            	    case SLASH:
            	        {
            	        alt81=2;
            	        }
            	        break;
            	    case PERCENT:
            	        {
            	        alt81=3;
            	        }
            	        break;
            	    case DOUBLESLASH:
            	        {
            	        alt81=4;
            	        }
            	        break;
            	    default:
            	        if (backtracking>0) {failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("644:16: ( STAR | SLASH | PERCENT | DOUBLESLASH )", 81, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt81) {
            	        case 1 :
            	            // /Users/frank/tmp/trunk/jython/grammar/Python.g:644:17: STAR
            	            {
            	            STAR239=(Token)input.LT(1);
            	            match(input,STAR,FOLLOW_STAR_in_term5033); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            STAR239_tree = (PythonTree)adaptor.create(STAR239);
            	            root_0 = (PythonTree)adaptor.becomeRoot(STAR239_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // /Users/frank/tmp/trunk/jython/grammar/Python.g:644:25: SLASH
            	            {
            	            SLASH240=(Token)input.LT(1);
            	            match(input,SLASH,FOLLOW_SLASH_in_term5038); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            SLASH240_tree = (PythonTree)adaptor.create(SLASH240);
            	            root_0 = (PythonTree)adaptor.becomeRoot(SLASH240_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // /Users/frank/tmp/trunk/jython/grammar/Python.g:644:34: PERCENT
            	            {
            	            PERCENT241=(Token)input.LT(1);
            	            match(input,PERCENT,FOLLOW_PERCENT_in_term5043); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            PERCENT241_tree = (PythonTree)adaptor.create(PERCENT241);
            	            root_0 = (PythonTree)adaptor.becomeRoot(PERCENT241_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // /Users/frank/tmp/trunk/jython/grammar/Python.g:644:45: DOUBLESLASH
            	            {
            	            DOUBLESLASH242=(Token)input.LT(1);
            	            match(input,DOUBLESLASH,FOLLOW_DOUBLESLASH_in_term5048); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            DOUBLESLASH242_tree = (PythonTree)adaptor.create(DOUBLESLASH242);
            	            root_0 = (PythonTree)adaptor.becomeRoot(DOUBLESLASH242_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_factor_in_term5053);
            	    factor243=factor();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, factor243.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end term

    public static class factor_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start factor
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:648:1: factor : ( PLUS factor -> ^( UAdd factor ) | MINUS factor -> ^( USub factor ) | TILDE factor -> ^( Invert factor ) | power );
    public final factor_return factor() throws RecognitionException {
        factor_return retval = new factor_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token PLUS244=null;
        Token MINUS246=null;
        Token TILDE248=null;
        factor_return factor245 = null;

        factor_return factor247 = null;

        factor_return factor249 = null;

        power_return power250 = null;


        PythonTree PLUS244_tree=null;
        PythonTree MINUS246_tree=null;
        PythonTree TILDE248_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_TILDE=new RewriteRuleTokenStream(adaptor,"token TILDE");
        RewriteRuleSubtreeStream stream_factor=new RewriteRuleSubtreeStream(adaptor,"rule factor");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:648:8: ( PLUS factor -> ^( UAdd factor ) | MINUS factor -> ^( USub factor ) | TILDE factor -> ^( Invert factor ) | power )
            int alt83=4;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt83=1;
                }
                break;
            case MINUS:
                {
                alt83=2;
                }
                break;
            case TILDE:
                {
                alt83=3;
                }
                break;
            case LPAREN:
            case NAME:
            case LBRACK:
            case LCURLY:
            case BACKQUOTE:
            case INT:
            case LONGINT:
            case FLOAT:
            case COMPLEX:
            case STRING:
                {
                alt83=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("648:1: factor : ( PLUS factor -> ^( UAdd factor ) | MINUS factor -> ^( USub factor ) | TILDE factor -> ^( Invert factor ) | power );", 83, 0, input);

                throw nvae;
            }

            switch (alt83) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:648:10: PLUS factor
                    {
                    PLUS244=(Token)input.LT(1);
                    match(input,PLUS,FOLLOW_PLUS_in_factor5070); if (failed) return retval;
                    if ( backtracking==0 ) stream_PLUS.add(PLUS244);

                    pushFollow(FOLLOW_factor_in_factor5072);
                    factor245=factor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_factor.add(factor245.getTree());

                    // AST REWRITE
                    // elements: factor
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 648:22: -> ^( UAdd factor )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:648:25: ^( UAdd factor )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(UAdd, "UAdd"), root_1);

                        adaptor.addChild(root_1, stream_factor.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:649:10: MINUS factor
                    {
                    MINUS246=(Token)input.LT(1);
                    match(input,MINUS,FOLLOW_MINUS_in_factor5091); if (failed) return retval;
                    if ( backtracking==0 ) stream_MINUS.add(MINUS246);

                    pushFollow(FOLLOW_factor_in_factor5093);
                    factor247=factor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_factor.add(factor247.getTree());

                    // AST REWRITE
                    // elements: factor
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 649:23: -> ^( USub factor )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:649:26: ^( USub factor )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(USub, "USub"), root_1);

                        adaptor.addChild(root_1, stream_factor.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 3 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:650:10: TILDE factor
                    {
                    TILDE248=(Token)input.LT(1);
                    match(input,TILDE,FOLLOW_TILDE_in_factor5112); if (failed) return retval;
                    if ( backtracking==0 ) stream_TILDE.add(TILDE248);

                    pushFollow(FOLLOW_factor_in_factor5114);
                    factor249=factor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_factor.add(factor249.getTree());

                    // AST REWRITE
                    // elements: factor
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 650:23: -> ^( Invert factor )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:650:26: ^( Invert factor )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Invert, "Invert"), root_1);

                        adaptor.addChild(root_1, stream_factor.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 4 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:651:10: power
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_power_in_factor5133);
                    power250=power();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, power250.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end factor

    public static class power_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start power
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:655:1: power : atom ( trailer )* ( options {greedy=true; } : DOUBLESTAR factor )? ;
    public final power_return power() throws RecognitionException {
        power_return retval = new power_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token DOUBLESTAR253=null;
        atom_return atom251 = null;

        trailer_return trailer252 = null;

        factor_return factor254 = null;


        PythonTree DOUBLESTAR253_tree=null;

        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:655:7: ( atom ( trailer )* ( options {greedy=true; } : DOUBLESTAR factor )? )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:655:9: atom ( trailer )* ( options {greedy=true; } : DOUBLESTAR factor )?
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_atom_in_power5150);
            atom251=atom();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, atom251.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:655:14: ( trailer )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==LPAREN||LA84_0==DOT||LA84_0==LBRACK) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:655:15: trailer
            	    {
            	    pushFollow(FOLLOW_trailer_in_power5153);
            	    trailer252=trailer();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) root_0 = (PythonTree)adaptor.becomeRoot(trailer252.getTree(), root_0);

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:655:26: ( options {greedy=true; } : DOUBLESTAR factor )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==DOUBLESTAR) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:655:50: DOUBLESTAR factor
                    {
                    DOUBLESTAR253=(Token)input.LT(1);
                    match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_power5166); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DOUBLESTAR253_tree = (PythonTree)adaptor.create(DOUBLESTAR253);
                    root_0 = (PythonTree)adaptor.becomeRoot(DOUBLESTAR253_tree, root_0);
                    }
                    pushFollow(FOLLOW_factor_in_power5169);
                    factor254=factor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, factor254.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end power

    public static class atom_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start atom
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:663:1: atom : ( LPAREN ( yield_expr -> ^( Parens yield_expr ) | testlist_gexp -> ^( Parens testlist_gexp ) | -> ^( Tuple ) ) RPAREN | LBRACK ( listmaker -> listmaker | -> ^( List ) ) RBRACK | LCURLY ( dictmaker )? RCURLY -> ^( Dict ( ^( Elts dictmaker ) )? ) | BACKQUOTE testlist BACKQUOTE -> ^( Repr testlist ) | NAME -> ^( Name NAME ) | INT -> ^( Num INT ) | LONGINT -> ^( Num LONGINT ) | FLOAT -> ^( Num FLOAT ) | COMPLEX -> ^( Num COMPLEX ) | ( STRING )+ -> ^( Str ( STRING )+ ) );
    public final atom_return atom() throws RecognitionException {
        atom_return retval = new atom_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token LPAREN255=null;
        Token RPAREN258=null;
        Token LBRACK259=null;
        Token RBRACK261=null;
        Token LCURLY262=null;
        Token RCURLY264=null;
        Token BACKQUOTE265=null;
        Token BACKQUOTE267=null;
        Token NAME268=null;
        Token INT269=null;
        Token LONGINT270=null;
        Token FLOAT271=null;
        Token COMPLEX272=null;
        Token STRING273=null;
        yield_expr_return yield_expr256 = null;

        testlist_gexp_return testlist_gexp257 = null;

        listmaker_return listmaker260 = null;

        dictmaker_return dictmaker263 = null;

        testlist_return testlist266 = null;


        PythonTree LPAREN255_tree=null;
        PythonTree RPAREN258_tree=null;
        PythonTree LBRACK259_tree=null;
        PythonTree RBRACK261_tree=null;
        PythonTree LCURLY262_tree=null;
        PythonTree RCURLY264_tree=null;
        PythonTree BACKQUOTE265_tree=null;
        PythonTree BACKQUOTE267_tree=null;
        PythonTree NAME268_tree=null;
        PythonTree INT269_tree=null;
        PythonTree LONGINT270_tree=null;
        PythonTree FLOAT271_tree=null;
        PythonTree COMPLEX272_tree=null;
        PythonTree STRING273_tree=null;
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_LONGINT=new RewriteRuleTokenStream(adaptor,"token LONGINT");
        RewriteRuleTokenStream stream_INT=new RewriteRuleTokenStream(adaptor,"token INT");
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
        RewriteRuleTokenStream stream_FLOAT=new RewriteRuleTokenStream(adaptor,"token FLOAT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_COMPLEX=new RewriteRuleTokenStream(adaptor,"token COMPLEX");
        RewriteRuleTokenStream stream_BACKQUOTE=new RewriteRuleTokenStream(adaptor,"token BACKQUOTE");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_listmaker=new RewriteRuleSubtreeStream(adaptor,"rule listmaker");
        RewriteRuleSubtreeStream stream_dictmaker=new RewriteRuleSubtreeStream(adaptor,"rule dictmaker");
        RewriteRuleSubtreeStream stream_testlist_gexp=new RewriteRuleSubtreeStream(adaptor,"rule testlist_gexp");
        RewriteRuleSubtreeStream stream_testlist=new RewriteRuleSubtreeStream(adaptor,"rule testlist");
        RewriteRuleSubtreeStream stream_yield_expr=new RewriteRuleSubtreeStream(adaptor,"rule yield_expr");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:663:6: ( LPAREN ( yield_expr -> ^( Parens yield_expr ) | testlist_gexp -> ^( Parens testlist_gexp ) | -> ^( Tuple ) ) RPAREN | LBRACK ( listmaker -> listmaker | -> ^( List ) ) RBRACK | LCURLY ( dictmaker )? RCURLY -> ^( Dict ( ^( Elts dictmaker ) )? ) | BACKQUOTE testlist BACKQUOTE -> ^( Repr testlist ) | NAME -> ^( Name NAME ) | INT -> ^( Num INT ) | LONGINT -> ^( Num LONGINT ) | FLOAT -> ^( Num FLOAT ) | COMPLEX -> ^( Num COMPLEX ) | ( STRING )+ -> ^( Str ( STRING )+ ) )
            int alt90=10;
            switch ( input.LA(1) ) {
            case LPAREN:
                {
                alt90=1;
                }
                break;
            case LBRACK:
                {
                alt90=2;
                }
                break;
            case LCURLY:
                {
                alt90=3;
                }
                break;
            case BACKQUOTE:
                {
                alt90=4;
                }
                break;
            case NAME:
                {
                alt90=5;
                }
                break;
            case INT:
                {
                alt90=6;
                }
                break;
            case LONGINT:
                {
                alt90=7;
                }
                break;
            case FLOAT:
                {
                alt90=8;
                }
                break;
            case COMPLEX:
                {
                alt90=9;
                }
                break;
            case STRING:
                {
                alt90=10;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("663:1: atom : ( LPAREN ( yield_expr -> ^( Parens yield_expr ) | testlist_gexp -> ^( Parens testlist_gexp ) | -> ^( Tuple ) ) RPAREN | LBRACK ( listmaker -> listmaker | -> ^( List ) ) RBRACK | LCURLY ( dictmaker )? RCURLY -> ^( Dict ( ^( Elts dictmaker ) )? ) | BACKQUOTE testlist BACKQUOTE -> ^( Repr testlist ) | NAME -> ^( Name NAME ) | INT -> ^( Num INT ) | LONGINT -> ^( Num LONGINT ) | FLOAT -> ^( Num FLOAT ) | COMPLEX -> ^( Num COMPLEX ) | ( STRING )+ -> ^( Str ( STRING )+ ) );", 90, 0, input);

                throw nvae;
            }

            switch (alt90) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:663:8: LPAREN ( yield_expr -> ^( Parens yield_expr ) | testlist_gexp -> ^( Parens testlist_gexp ) | -> ^( Tuple ) ) RPAREN
                    {
                    LPAREN255=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_atom5191); if (failed) return retval;
                    if ( backtracking==0 ) stream_LPAREN.add(LPAREN255);

                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:664:8: ( yield_expr -> ^( Parens yield_expr ) | testlist_gexp -> ^( Parens testlist_gexp ) | -> ^( Tuple ) )
                    int alt86=3;
                    switch ( input.LA(1) ) {
                    case 196:
                        {
                        alt86=1;
                        }
                        break;
                    case LPAREN:
                    case NAME:
                    case NOT:
                    case PLUS:
                    case MINUS:
                    case TILDE:
                    case LBRACK:
                    case LCURLY:
                    case BACKQUOTE:
                    case INT:
                    case LONGINT:
                    case FLOAT:
                    case COMPLEX:
                    case STRING:
                    case 194:
                        {
                        alt86=2;
                        }
                        break;
                    case RPAREN:
                        {
                        alt86=3;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("664:8: ( yield_expr -> ^( Parens yield_expr ) | testlist_gexp -> ^( Parens testlist_gexp ) | -> ^( Tuple ) )", 86, 0, input);

                        throw nvae;
                    }

                    switch (alt86) {
                        case 1 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:664:10: yield_expr
                            {
                            pushFollow(FOLLOW_yield_expr_in_atom5203);
                            yield_expr256=yield_expr();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_yield_expr.add(yield_expr256.getTree());

                            // AST REWRITE
                            // elements: yield_expr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (PythonTree)adaptor.nil();
                            // 664:24: -> ^( Parens yield_expr )
                            {
                                // /Users/frank/tmp/trunk/jython/grammar/Python.g:664:27: ^( Parens yield_expr )
                                {
                                PythonTree root_1 = (PythonTree)adaptor.nil();
                                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Parens, "Parens"), root_1);

                                adaptor.addChild(root_1, stream_yield_expr.next());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;
                        case 2 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:665:10: testlist_gexp
                            {
                            pushFollow(FOLLOW_testlist_gexp_in_atom5225);
                            testlist_gexp257=testlist_gexp();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_testlist_gexp.add(testlist_gexp257.getTree());
                            if ( backtracking==0 ) {
                              debug("parsed testlist_gexp");
                            }

                            // AST REWRITE
                            // elements: testlist_gexp
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (PythonTree)adaptor.nil();
                            // 665:57: -> ^( Parens testlist_gexp )
                            {
                                // /Users/frank/tmp/trunk/jython/grammar/Python.g:665:60: ^( Parens testlist_gexp )
                                {
                                PythonTree root_1 = (PythonTree)adaptor.nil();
                                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Parens, "Parens"), root_1);

                                adaptor.addChild(root_1, stream_testlist_gexp.next());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;
                        case 3 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:666:10: 
                            {

                            // AST REWRITE
                            // elements: 
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (PythonTree)adaptor.nil();
                            // 666:10: -> ^( Tuple )
                            {
                                // /Users/frank/tmp/trunk/jython/grammar/Python.g:666:13: ^( Tuple )
                                {
                                PythonTree root_1 = (PythonTree)adaptor.nil();
                                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Tuple, "Tuple"), root_1);

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;

                    }

                    RPAREN258=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_atom5268); if (failed) return retval;
                    if ( backtracking==0 ) stream_RPAREN.add(RPAREN258);


                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:669:8: LBRACK ( listmaker -> listmaker | -> ^( List ) ) RBRACK
                    {
                    LBRACK259=(Token)input.LT(1);
                    match(input,LBRACK,FOLLOW_LBRACK_in_atom5277); if (failed) return retval;
                    if ( backtracking==0 ) stream_LBRACK.add(LBRACK259);

                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:670:8: ( listmaker -> listmaker | -> ^( List ) )
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==LPAREN||LA87_0==NAME||LA87_0==NOT||(LA87_0>=PLUS && LA87_0<=MINUS)||(LA87_0>=TILDE && LA87_0<=LBRACK)||LA87_0==LCURLY||(LA87_0>=BACKQUOTE && LA87_0<=STRING)||LA87_0==194) ) {
                        alt87=1;
                    }
                    else if ( (LA87_0==RBRACK) ) {
                        alt87=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("670:8: ( listmaker -> listmaker | -> ^( List ) )", 87, 0, input);

                        throw nvae;
                    }
                    switch (alt87) {
                        case 1 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:670:9: listmaker
                            {
                            pushFollow(FOLLOW_listmaker_in_atom5287);
                            listmaker260=listmaker();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_listmaker.add(listmaker260.getTree());

                            // AST REWRITE
                            // elements: listmaker
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (PythonTree)adaptor.nil();
                            // 670:19: -> listmaker
                            {
                                adaptor.addChild(root_0, stream_listmaker.next());

                            }

                            }

                            }
                            break;
                        case 2 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:671:10: 
                            {

                            // AST REWRITE
                            // elements: 
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (PythonTree)adaptor.nil();
                            // 671:10: -> ^( List )
                            {
                                // /Users/frank/tmp/trunk/jython/grammar/Python.g:671:13: ^( List )
                                {
                                PythonTree root_1 = (PythonTree)adaptor.nil();
                                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(List, "List"), root_1);

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            }

                            }
                            break;

                    }

                    RBRACK261=(Token)input.LT(1);
                    match(input,RBRACK,FOLLOW_RBRACK_in_atom5324); if (failed) return retval;
                    if ( backtracking==0 ) stream_RBRACK.add(RBRACK261);


                    }
                    break;
                case 3 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:674:8: LCURLY ( dictmaker )? RCURLY
                    {
                    LCURLY262=(Token)input.LT(1);
                    match(input,LCURLY,FOLLOW_LCURLY_in_atom5333); if (failed) return retval;
                    if ( backtracking==0 ) stream_LCURLY.add(LCURLY262);

                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:674:15: ( dictmaker )?
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==LPAREN||LA88_0==NAME||LA88_0==NOT||(LA88_0>=PLUS && LA88_0<=MINUS)||(LA88_0>=TILDE && LA88_0<=LBRACK)||LA88_0==LCURLY||(LA88_0>=BACKQUOTE && LA88_0<=STRING)||LA88_0==194) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:674:16: dictmaker
                            {
                            pushFollow(FOLLOW_dictmaker_in_atom5336);
                            dictmaker263=dictmaker();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_dictmaker.add(dictmaker263.getTree());

                            }
                            break;

                    }

                    RCURLY264=(Token)input.LT(1);
                    match(input,RCURLY,FOLLOW_RCURLY_in_atom5340); if (failed) return retval;
                    if ( backtracking==0 ) stream_RCURLY.add(RCURLY264);


                    // AST REWRITE
                    // elements: dictmaker
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 674:35: -> ^( Dict ( ^( Elts dictmaker ) )? )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:674:38: ^( Dict ( ^( Elts dictmaker ) )? )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Dict, "Dict"), root_1);

                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:674:45: ( ^( Elts dictmaker ) )?
                        if ( stream_dictmaker.hasNext() ) {
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:674:45: ^( Elts dictmaker )
                            {
                            PythonTree root_2 = (PythonTree)adaptor.nil();
                            root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Elts, "Elts"), root_2);

                            adaptor.addChild(root_2, stream_dictmaker.next());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_dictmaker.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 4 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:675:8: BACKQUOTE testlist BACKQUOTE
                    {
                    BACKQUOTE265=(Token)input.LT(1);
                    match(input,BACKQUOTE,FOLLOW_BACKQUOTE_in_atom5362); if (failed) return retval;
                    if ( backtracking==0 ) stream_BACKQUOTE.add(BACKQUOTE265);

                    pushFollow(FOLLOW_testlist_in_atom5364);
                    testlist266=testlist();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_testlist.add(testlist266.getTree());
                    BACKQUOTE267=(Token)input.LT(1);
                    match(input,BACKQUOTE,FOLLOW_BACKQUOTE_in_atom5366); if (failed) return retval;
                    if ( backtracking==0 ) stream_BACKQUOTE.add(BACKQUOTE267);


                    // AST REWRITE
                    // elements: testlist
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 675:37: -> ^( Repr testlist )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:675:40: ^( Repr testlist )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Repr, "Repr"), root_1);

                        adaptor.addChild(root_1, stream_testlist.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 5 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:676:8: NAME
                    {
                    NAME268=(Token)input.LT(1);
                    match(input,NAME,FOLLOW_NAME_in_atom5383); if (failed) return retval;
                    if ( backtracking==0 ) stream_NAME.add(NAME268);

                    if ( backtracking==0 ) {
                      debug("parsed NAME");
                    }

                    // AST REWRITE
                    // elements: NAME
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 676:37: -> ^( Name NAME )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:676:40: ^( Name NAME )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Name, "Name"), root_1);

                        adaptor.addChild(root_1, stream_NAME.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 6 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:677:8: INT
                    {
                    INT269=(Token)input.LT(1);
                    match(input,INT,FOLLOW_INT_in_atom5402); if (failed) return retval;
                    if ( backtracking==0 ) stream_INT.add(INT269);


                    // AST REWRITE
                    // elements: INT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 677:12: -> ^( Num INT )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:677:15: ^( Num INT )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Num, "Num"), root_1);

                        adaptor.addChild(root_1, stream_INT.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 7 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:678:8: LONGINT
                    {
                    LONGINT270=(Token)input.LT(1);
                    match(input,LONGINT,FOLLOW_LONGINT_in_atom5419); if (failed) return retval;
                    if ( backtracking==0 ) stream_LONGINT.add(LONGINT270);


                    // AST REWRITE
                    // elements: LONGINT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 678:16: -> ^( Num LONGINT )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:678:19: ^( Num LONGINT )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Num, "Num"), root_1);

                        adaptor.addChild(root_1, stream_LONGINT.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 8 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:679:8: FLOAT
                    {
                    FLOAT271=(Token)input.LT(1);
                    match(input,FLOAT,FOLLOW_FLOAT_in_atom5436); if (failed) return retval;
                    if ( backtracking==0 ) stream_FLOAT.add(FLOAT271);


                    // AST REWRITE
                    // elements: FLOAT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 679:14: -> ^( Num FLOAT )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:679:17: ^( Num FLOAT )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Num, "Num"), root_1);

                        adaptor.addChild(root_1, stream_FLOAT.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 9 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:680:8: COMPLEX
                    {
                    COMPLEX272=(Token)input.LT(1);
                    match(input,COMPLEX,FOLLOW_COMPLEX_in_atom5453); if (failed) return retval;
                    if ( backtracking==0 ) stream_COMPLEX.add(COMPLEX272);


                    // AST REWRITE
                    // elements: COMPLEX
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 680:16: -> ^( Num COMPLEX )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:680:19: ^( Num COMPLEX )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Num, "Num"), root_1);

                        adaptor.addChild(root_1, stream_COMPLEX.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 10 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:681:8: ( STRING )+
                    {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:681:8: ( STRING )+
                    int cnt89=0;
                    loop89:
                    do {
                        int alt89=2;
                        int LA89_0 = input.LA(1);

                        if ( (LA89_0==STRING) ) {
                            alt89=1;
                        }


                        switch (alt89) {
                    	case 1 :
                    	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:681:9: STRING
                    	    {
                    	    STRING273=(Token)input.LT(1);
                    	    match(input,STRING,FOLLOW_STRING_in_atom5471); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_STRING.add(STRING273);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt89 >= 1 ) break loop89;
                    	    if (backtracking>0) {failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(89, input);
                                throw eee;
                        }
                        cnt89++;
                    } while (true);


                    // AST REWRITE
                    // elements: STRING
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 681:18: -> ^( Str ( STRING )+ )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:681:21: ^( Str ( STRING )+ )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Str, "Str"), root_1);

                        if ( !(stream_STRING.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_STRING.hasNext() ) {
                            adaptor.addChild(root_1, stream_STRING.next());

                        }
                        stream_STRING.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end atom

    public static class listmaker_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start listmaker
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:685:1: listmaker : test ( list_for -> ^( ListComp test list_for ) | ( options {greedy=true; } : COMMA test )* -> ^( List ^( Elts ( test )+ ) ) ) ( COMMA )? ;
    public final listmaker_return listmaker() throws RecognitionException {
        listmaker_return retval = new listmaker_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token COMMA276=null;
        Token COMMA278=null;
        test_return test274 = null;

        list_for_return list_for275 = null;

        test_return test277 = null;


        PythonTree COMMA276_tree=null;
        PythonTree COMMA278_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_list_for=new RewriteRuleSubtreeStream(adaptor,"rule list_for");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:685:11: ( test ( list_for -> ^( ListComp test list_for ) | ( options {greedy=true; } : COMMA test )* -> ^( List ^( Elts ( test )+ ) ) ) ( COMMA )? )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:685:13: test ( list_for -> ^( ListComp test list_for ) | ( options {greedy=true; } : COMMA test )* -> ^( List ^( Elts ( test )+ ) ) ) ( COMMA )?
            {
            pushFollow(FOLLOW_test_in_listmaker5497);
            test274=test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_test.add(test274.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:686:13: ( list_for -> ^( ListComp test list_for ) | ( options {greedy=true; } : COMMA test )* -> ^( List ^( Elts ( test )+ ) ) )
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==188) ) {
                alt92=1;
            }
            else if ( (LA92_0==COMMA||LA92_0==RBRACK) ) {
                alt92=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("686:13: ( list_for -> ^( ListComp test list_for ) | ( options {greedy=true; } : COMMA test )* -> ^( List ^( Elts ( test )+ ) ) )", 92, 0, input);

                throw nvae;
            }
            switch (alt92) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:686:15: list_for
                    {
                    pushFollow(FOLLOW_list_for_in_listmaker5514);
                    list_for275=list_for();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_list_for.add(list_for275.getTree());

                    // AST REWRITE
                    // elements: list_for, test
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 686:24: -> ^( ListComp test list_for )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:686:27: ^( ListComp test list_for )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(ListComp, "ListComp"), root_1);

                        adaptor.addChild(root_1, stream_test.next());
                        adaptor.addChild(root_1, stream_list_for.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:687:15: ( options {greedy=true; } : COMMA test )*
                    {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:687:15: ( options {greedy=true; } : COMMA test )*
                    loop91:
                    do {
                        int alt91=2;
                        int LA91_0 = input.LA(1);

                        if ( (LA91_0==COMMA) ) {
                            int LA91_1 = input.LA(2);

                            if ( (LA91_1==LPAREN||LA91_1==NAME||LA91_1==NOT||(LA91_1>=PLUS && LA91_1<=MINUS)||(LA91_1>=TILDE && LA91_1<=LBRACK)||LA91_1==LCURLY||(LA91_1>=BACKQUOTE && LA91_1<=STRING)||LA91_1==194) ) {
                                alt91=1;
                            }


                        }


                        switch (alt91) {
                    	case 1 :
                    	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:687:39: COMMA test
                    	    {
                    	    COMMA276=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_listmaker5548); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_COMMA.add(COMMA276);

                    	    pushFollow(FOLLOW_test_in_listmaker5550);
                    	    test277=test();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_test.add(test277.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop91;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: test
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 687:52: -> ^( List ^( Elts ( test )+ ) )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:687:55: ^( List ^( Elts ( test )+ ) )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(List, "List"), root_1);

                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:687:62: ^( Elts ( test )+ )
                        {
                        PythonTree root_2 = (PythonTree)adaptor.nil();
                        root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Elts, "Elts"), root_2);

                        if ( !(stream_test.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_test.hasNext() ) {
                            adaptor.addChild(root_2, stream_test.next());

                        }
                        stream_test.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:688:15: ( COMMA )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==COMMA) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:688:16: COMMA
                    {
                    COMMA278=(Token)input.LT(1);
                    match(input,COMMA,FOLLOW_COMMA_in_listmaker5582); if (failed) return retval;
                    if ( backtracking==0 ) stream_COMMA.add(COMMA278);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end listmaker

    public static class testlist_gexp_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start testlist_gexp
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:692:1: testlist_gexp : test ( ( ( options {k=2; } : c1= COMMA test )* (c2= COMMA )? -> { $c1 != null || $c2 != null }? ^( Tuple ^( Elts ( test )+ ) ) -> test ) | ( gen_for -> ^( GeneratorExp test gen_for ) ) ) ;
    public final testlist_gexp_return testlist_gexp() throws RecognitionException {
        testlist_gexp_return retval = new testlist_gexp_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token c1=null;
        Token c2=null;
        test_return test279 = null;

        test_return test280 = null;

        gen_for_return gen_for281 = null;


        PythonTree c1_tree=null;
        PythonTree c2_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_gen_for=new RewriteRuleSubtreeStream(adaptor,"rule gen_for");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:693:5: ( test ( ( ( options {k=2; } : c1= COMMA test )* (c2= COMMA )? -> { $c1 != null || $c2 != null }? ^( Tuple ^( Elts ( test )+ ) ) -> test ) | ( gen_for -> ^( GeneratorExp test gen_for ) ) ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:693:7: test ( ( ( options {k=2; } : c1= COMMA test )* (c2= COMMA )? -> { $c1 != null || $c2 != null }? ^( Tuple ^( Elts ( test )+ ) ) -> test ) | ( gen_for -> ^( GeneratorExp test gen_for ) ) )
            {
            pushFollow(FOLLOW_test_in_testlist_gexp5608);
            test279=test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_test.add(test279.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:693:12: ( ( ( options {k=2; } : c1= COMMA test )* (c2= COMMA )? -> { $c1 != null || $c2 != null }? ^( Tuple ^( Elts ( test )+ ) ) -> test ) | ( gen_for -> ^( GeneratorExp test gen_for ) ) )
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==RPAREN||LA96_0==COMMA) ) {
                alt96=1;
            }
            else if ( (LA96_0==188) ) {
                alt96=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("693:12: ( ( ( options {k=2; } : c1= COMMA test )* (c2= COMMA )? -> { $c1 != null || $c2 != null }? ^( Tuple ^( Elts ( test )+ ) ) -> test ) | ( gen_for -> ^( GeneratorExp test gen_for ) ) )", 96, 0, input);

                throw nvae;
            }
            switch (alt96) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:693:14: ( ( options {k=2; } : c1= COMMA test )* (c2= COMMA )? -> { $c1 != null || $c2 != null }? ^( Tuple ^( Elts ( test )+ ) ) -> test )
                    {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:693:14: ( ( options {k=2; } : c1= COMMA test )* (c2= COMMA )? -> { $c1 != null || $c2 != null }? ^( Tuple ^( Elts ( test )+ ) ) -> test )
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:693:15: ( options {k=2; } : c1= COMMA test )* (c2= COMMA )?
                    {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:693:15: ( options {k=2; } : c1= COMMA test )*
                    loop94:
                    do {
                        int alt94=2;
                        int LA94_0 = input.LA(1);

                        if ( (LA94_0==COMMA) ) {
                            int LA94_1 = input.LA(2);

                            if ( (LA94_1==LPAREN||LA94_1==NAME||LA94_1==NOT||(LA94_1>=PLUS && LA94_1<=MINUS)||(LA94_1>=TILDE && LA94_1<=LBRACK)||LA94_1==LCURLY||(LA94_1>=BACKQUOTE && LA94_1<=STRING)||LA94_1==194) ) {
                                alt94=1;
                            }


                        }


                        switch (alt94) {
                    	case 1 :
                    	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:693:32: c1= COMMA test
                    	    {
                    	    c1=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_testlist_gexp5624); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_COMMA.add(c1);

                    	    pushFollow(FOLLOW_test_in_testlist_gexp5626);
                    	    test280=test();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_test.add(test280.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop94;
                        }
                    } while (true);

                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:693:48: (c2= COMMA )?
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==COMMA) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:693:49: c2= COMMA
                            {
                            c2=(Token)input.LT(1);
                            match(input,COMMA,FOLLOW_COMMA_in_testlist_gexp5633); if (failed) return retval;
                            if ( backtracking==0 ) stream_COMMA.add(c2);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: test, test
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 693:60: -> { $c1 != null || $c2 != null }? ^( Tuple ^( Elts ( test )+ ) )
                    if ( c1 != null || c2 != null ) {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:693:95: ^( Tuple ^( Elts ( test )+ ) )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Tuple, "Tuple"), root_1);

                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:693:103: ^( Elts ( test )+ )
                        {
                        PythonTree root_2 = (PythonTree)adaptor.nil();
                        root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Elts, "Elts"), root_2);

                        if ( !(stream_test.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_test.hasNext() ) {
                            adaptor.addChild(root_2, stream_test.next());

                        }
                        stream_test.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 694:60: -> test
                    {
                        adaptor.addChild(root_0, stream_test.next());

                    }

                    }

                    }


                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:696:14: ( gen_for -> ^( GeneratorExp test gen_for ) )
                    {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:696:14: ( gen_for -> ^( GeneratorExp test gen_for ) )
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:696:16: gen_for
                    {
                    pushFollow(FOLLOW_gen_for_in_testlist_gexp5745);
                    gen_for281=gen_for();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_gen_for.add(gen_for281.getTree());

                    // AST REWRITE
                    // elements: gen_for, test
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 696:24: -> ^( GeneratorExp test gen_for )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:696:27: ^( GeneratorExp test gen_for )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(GeneratorExp, "GeneratorExp"), root_1);

                        adaptor.addChild(root_1, stream_test.next());
                        adaptor.addChild(root_1, stream_gen_for.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end testlist_gexp

    public static class lambdef_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start lambdef
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:701:1: lambdef : 'lambda' ( varargslist )? COLON test -> ^( Lambda ( varargslist )? ^( Body test ) ) ;
    public final lambdef_return lambdef() throws RecognitionException {
        lambdef_return retval = new lambdef_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal282=null;
        Token COLON284=null;
        varargslist_return varargslist283 = null;

        test_return test285 = null;


        PythonTree string_literal282_tree=null;
        PythonTree COLON284_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_194=new RewriteRuleTokenStream(adaptor,"token 194");
        RewriteRuleSubtreeStream stream_varargslist=new RewriteRuleSubtreeStream(adaptor,"rule varargslist");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:701:8: ( 'lambda' ( varargslist )? COLON test -> ^( Lambda ( varargslist )? ^( Body test ) ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:701:10: 'lambda' ( varargslist )? COLON test
            {
            string_literal282=(Token)input.LT(1);
            match(input,194,FOLLOW_194_in_lambdef5782); if (failed) return retval;
            if ( backtracking==0 ) stream_194.add(string_literal282);

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:701:19: ( varargslist )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==LPAREN||LA97_0==NAME||(LA97_0>=STAR && LA97_0<=DOUBLESTAR)) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:701:20: varargslist
                    {
                    pushFollow(FOLLOW_varargslist_in_lambdef5785);
                    varargslist283=varargslist();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_varargslist.add(varargslist283.getTree());

                    }
                    break;

            }

            COLON284=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_lambdef5789); if (failed) return retval;
            if ( backtracking==0 ) stream_COLON.add(COLON284);

            pushFollow(FOLLOW_test_in_lambdef5791);
            test285=test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_test.add(test285.getTree());
            if ( backtracking==0 ) {
              debug("parsed lambda");
            }

            // AST REWRITE
            // elements: varargslist, test
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 702:7: -> ^( Lambda ( varargslist )? ^( Body test ) )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:702:10: ^( Lambda ( varargslist )? ^( Body test ) )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Lambda, "Lambda"), root_1);

                // /Users/frank/tmp/trunk/jython/grammar/Python.g:702:19: ( varargslist )?
                if ( stream_varargslist.hasNext() ) {
                    adaptor.addChild(root_1, stream_varargslist.next());

                }
                stream_varargslist.reset();
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:702:32: ^( Body test )
                {
                PythonTree root_2 = (PythonTree)adaptor.nil();
                root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Body, "Body"), root_2);

                adaptor.addChild(root_2, stream_test.next());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end lambdef

    public static class trailer_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start trailer
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:706:1: trailer : ( LPAREN ( arglist )? RPAREN -> ^( Call ( ^( Args arglist ) )? ) | LBRACK subscriptlist RBRACK -> ^( SubscriptList subscriptlist ) | DOT NAME );
    public final trailer_return trailer() throws RecognitionException {
        trailer_return retval = new trailer_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token LPAREN286=null;
        Token RPAREN288=null;
        Token LBRACK289=null;
        Token RBRACK291=null;
        Token DOT292=null;
        Token NAME293=null;
        arglist_return arglist287 = null;

        subscriptlist_return subscriptlist290 = null;


        PythonTree LPAREN286_tree=null;
        PythonTree RPAREN288_tree=null;
        PythonTree LBRACK289_tree=null;
        PythonTree RBRACK291_tree=null;
        PythonTree DOT292_tree=null;
        PythonTree NAME293_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_subscriptlist=new RewriteRuleSubtreeStream(adaptor,"rule subscriptlist");
        RewriteRuleSubtreeStream stream_arglist=new RewriteRuleSubtreeStream(adaptor,"rule arglist");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:706:9: ( LPAREN ( arglist )? RPAREN -> ^( Call ( ^( Args arglist ) )? ) | LBRACK subscriptlist RBRACK -> ^( SubscriptList subscriptlist ) | DOT NAME )
            int alt99=3;
            switch ( input.LA(1) ) {
            case LPAREN:
                {
                alt99=1;
                }
                break;
            case LBRACK:
                {
                alt99=2;
                }
                break;
            case DOT:
                {
                alt99=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("706:1: trailer : ( LPAREN ( arglist )? RPAREN -> ^( Call ( ^( Args arglist ) )? ) | LBRACK subscriptlist RBRACK -> ^( SubscriptList subscriptlist ) | DOT NAME );", 99, 0, input);

                throw nvae;
            }

            switch (alt99) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:706:11: LPAREN ( arglist )? RPAREN
                    {
                    LPAREN286=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_trailer5831); if (failed) return retval;
                    if ( backtracking==0 ) stream_LPAREN.add(LPAREN286);

                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:706:18: ( arglist )?
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==LPAREN||LA98_0==NAME||(LA98_0>=STAR && LA98_0<=DOUBLESTAR)||LA98_0==NOT||(LA98_0>=PLUS && LA98_0<=MINUS)||(LA98_0>=TILDE && LA98_0<=LBRACK)||LA98_0==LCURLY||(LA98_0>=BACKQUOTE && LA98_0<=STRING)||LA98_0==194) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:706:19: arglist
                            {
                            pushFollow(FOLLOW_arglist_in_trailer5834);
                            arglist287=arglist();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_arglist.add(arglist287.getTree());

                            }
                            break;

                    }

                    RPAREN288=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_trailer5838); if (failed) return retval;
                    if ( backtracking==0 ) stream_RPAREN.add(RPAREN288);


                    // AST REWRITE
                    // elements: arglist
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 706:36: -> ^( Call ( ^( Args arglist ) )? )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:706:39: ^( Call ( ^( Args arglist ) )? )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Call, "Call"), root_1);

                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:706:46: ( ^( Args arglist ) )?
                        if ( stream_arglist.hasNext() ) {
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:706:46: ^( Args arglist )
                            {
                            PythonTree root_2 = (PythonTree)adaptor.nil();
                            root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Args, "Args"), root_2);

                            adaptor.addChild(root_2, stream_arglist.next());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_arglist.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:707:11: LBRACK subscriptlist RBRACK
                    {
                    LBRACK289=(Token)input.LT(1);
                    match(input,LBRACK,FOLLOW_LBRACK_in_trailer5863); if (failed) return retval;
                    if ( backtracking==0 ) stream_LBRACK.add(LBRACK289);

                    pushFollow(FOLLOW_subscriptlist_in_trailer5865);
                    subscriptlist290=subscriptlist();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_subscriptlist.add(subscriptlist290.getTree());
                    RBRACK291=(Token)input.LT(1);
                    match(input,RBRACK,FOLLOW_RBRACK_in_trailer5867); if (failed) return retval;
                    if ( backtracking==0 ) stream_RBRACK.add(RBRACK291);


                    // AST REWRITE
                    // elements: subscriptlist
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 707:39: -> ^( SubscriptList subscriptlist )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:707:42: ^( SubscriptList subscriptlist )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(SubscriptList, "SubscriptList"), root_1);

                        adaptor.addChild(root_1, stream_subscriptlist.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 3 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:708:11: DOT NAME
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    DOT292=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_trailer5887); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DOT292_tree = (PythonTree)adaptor.create(DOT292);
                    root_0 = (PythonTree)adaptor.becomeRoot(DOT292_tree, root_0);
                    }
                    NAME293=(Token)input.LT(1);
                    match(input,NAME,FOLLOW_NAME_in_trailer5890); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NAME293_tree = (PythonTree)adaptor.create(NAME293);
                    adaptor.addChild(root_0, NAME293_tree);
                    }
                    if ( backtracking==0 ) {
                      debug("motched DOT^ NAME");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end trailer

    public static class subscriptlist_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start subscriptlist
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:712:1: subscriptlist : subscript ( options {greedy=true; } : COMMA subscript )* ( COMMA )? -> ( subscript )+ ;
    public final subscriptlist_return subscriptlist() throws RecognitionException {
        subscriptlist_return retval = new subscriptlist_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token COMMA295=null;
        Token COMMA297=null;
        subscript_return subscript294 = null;

        subscript_return subscript296 = null;


        PythonTree COMMA295_tree=null;
        PythonTree COMMA297_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_subscript=new RewriteRuleSubtreeStream(adaptor,"rule subscript");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:712:15: ( subscript ( options {greedy=true; } : COMMA subscript )* ( COMMA )? -> ( subscript )+ )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:712:17: subscript ( options {greedy=true; } : COMMA subscript )* ( COMMA )?
            {
            pushFollow(FOLLOW_subscript_in_subscriptlist5910);
            subscript294=subscript();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_subscript.add(subscript294.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:712:27: ( options {greedy=true; } : COMMA subscript )*
            loop100:
            do {
                int alt100=2;
                int LA100_0 = input.LA(1);

                if ( (LA100_0==COMMA) ) {
                    int LA100_1 = input.LA(2);

                    if ( (LA100_1==LPAREN||(LA100_1>=NAME && LA100_1<=COLON)||LA100_1==NOT||(LA100_1>=PLUS && LA100_1<=MINUS)||(LA100_1>=TILDE && LA100_1<=LBRACK)||LA100_1==LCURLY||(LA100_1>=BACKQUOTE && LA100_1<=STRING)||LA100_1==194) ) {
                        alt100=1;
                    }


                }


                switch (alt100) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:712:51: COMMA subscript
            	    {
            	    COMMA295=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_subscriptlist5920); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMA.add(COMMA295);

            	    pushFollow(FOLLOW_subscript_in_subscriptlist5922);
            	    subscript296=subscript();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_subscript.add(subscript296.getTree());

            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:712:69: ( COMMA )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==COMMA) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:712:70: COMMA
                    {
                    COMMA297=(Token)input.LT(1);
                    match(input,COMMA,FOLLOW_COMMA_in_subscriptlist5927); if (failed) return retval;
                    if ( backtracking==0 ) stream_COMMA.add(COMMA297);


                    }
                    break;

            }


            // AST REWRITE
            // elements: subscript
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 713:14: -> ( subscript )+
            {
                if ( !(stream_subscript.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_subscript.hasNext() ) {
                    adaptor.addChild(root_0, stream_subscript.next());

                }
                stream_subscript.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end subscriptlist

    public static class subscript_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start subscript
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:717:1: subscript : ( DOT DOT DOT -> Ellipsis | ( test COLON )=>t1= test ( COLON (t2= test )? ( sliceop )? )? -> ^( Subscript ^( Lower $t1) ( ^( Upper COLON ( ^( UpperOp $t2) )? ) )? ( sliceop )? ) | ( COLON )=> COLON ( test )? ( sliceop )? -> ^( Subscript ( ^( Upper COLON ( ^( UpperOp test ) )? ) )? ( sliceop )? ) | test -> ^( Index test ) );
    public final subscript_return subscript() throws RecognitionException {
        subscript_return retval = new subscript_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token DOT298=null;
        Token DOT299=null;
        Token DOT300=null;
        Token COLON301=null;
        Token COLON303=null;
        test_return t1 = null;

        test_return t2 = null;

        sliceop_return sliceop302 = null;

        test_return test304 = null;

        sliceop_return sliceop305 = null;

        test_return test306 = null;


        PythonTree DOT298_tree=null;
        PythonTree DOT299_tree=null;
        PythonTree DOT300_tree=null;
        PythonTree COLON301_tree=null;
        PythonTree COLON303_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_sliceop=new RewriteRuleSubtreeStream(adaptor,"rule sliceop");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:717:11: ( DOT DOT DOT -> Ellipsis | ( test COLON )=>t1= test ( COLON (t2= test )? ( sliceop )? )? -> ^( Subscript ^( Lower $t1) ( ^( Upper COLON ( ^( UpperOp $t2) )? ) )? ( sliceop )? ) | ( COLON )=> COLON ( test )? ( sliceop )? -> ^( Subscript ( ^( Upper COLON ( ^( UpperOp test ) )? ) )? ( sliceop )? ) | test -> ^( Index test ) )
            int alt107=4;
            alt107 = dfa107.predict(input);
            switch (alt107) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:717:13: DOT DOT DOT
                    {
                    DOT298=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_subscript5971); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOT.add(DOT298);

                    DOT299=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_subscript5973); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOT.add(DOT299);

                    DOT300=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_subscript5975); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOT.add(DOT300);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 717:25: -> Ellipsis
                    {
                        adaptor.addChild(root_0, adaptor.create(Ellipsis, "Ellipsis"));

                    }

                    }

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:718:13: ( test COLON )=>t1= test ( COLON (t2= test )? ( sliceop )? )?
                    {
                    pushFollow(FOLLOW_test_in_subscript6003);
                    t1=test();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_test.add(t1.getTree());
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:718:37: ( COLON (t2= test )? ( sliceop )? )?
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==COLON) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:718:38: COLON (t2= test )? ( sliceop )?
                            {
                            COLON301=(Token)input.LT(1);
                            match(input,COLON,FOLLOW_COLON_in_subscript6006); if (failed) return retval;
                            if ( backtracking==0 ) stream_COLON.add(COLON301);

                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:718:44: (t2= test )?
                            int alt102=2;
                            int LA102_0 = input.LA(1);

                            if ( (LA102_0==LPAREN||LA102_0==NAME||LA102_0==NOT||(LA102_0>=PLUS && LA102_0<=MINUS)||(LA102_0>=TILDE && LA102_0<=LBRACK)||LA102_0==LCURLY||(LA102_0>=BACKQUOTE && LA102_0<=STRING)||LA102_0==194) ) {
                                alt102=1;
                            }
                            switch (alt102) {
                                case 1 :
                                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:718:45: t2= test
                                    {
                                    pushFollow(FOLLOW_test_in_subscript6011);
                                    t2=test();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_test.add(t2.getTree());

                                    }
                                    break;

                            }

                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:718:55: ( sliceop )?
                            int alt103=2;
                            int LA103_0 = input.LA(1);

                            if ( (LA103_0==COLON) ) {
                                alt103=1;
                            }
                            switch (alt103) {
                                case 1 :
                                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:718:56: sliceop
                                    {
                                    pushFollow(FOLLOW_sliceop_in_subscript6016);
                                    sliceop302=sliceop();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_sliceop.add(sliceop302.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: sliceop, t2, COLON, t1
                    // token labels: 
                    // rule labels: t1, retval, t2
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_t1=new RewriteRuleSubtreeStream(adaptor,"token t1",t1!=null?t1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_t2=new RewriteRuleSubtreeStream(adaptor,"token t2",t2!=null?t2.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 718:68: -> ^( Subscript ^( Lower $t1) ( ^( Upper COLON ( ^( UpperOp $t2) )? ) )? ( sliceop )? )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:718:71: ^( Subscript ^( Lower $t1) ( ^( Upper COLON ( ^( UpperOp $t2) )? ) )? ( sliceop )? )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Subscript, "Subscript"), root_1);

                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:718:83: ^( Lower $t1)
                        {
                        PythonTree root_2 = (PythonTree)adaptor.nil();
                        root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Lower, "Lower"), root_2);

                        adaptor.addChild(root_2, stream_t1.next());

                        adaptor.addChild(root_1, root_2);
                        }
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:718:96: ( ^( Upper COLON ( ^( UpperOp $t2) )? ) )?
                        if ( stream_t2.hasNext()||stream_COLON.hasNext() ) {
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:718:96: ^( Upper COLON ( ^( UpperOp $t2) )? )
                            {
                            PythonTree root_2 = (PythonTree)adaptor.nil();
                            root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Upper, "Upper"), root_2);

                            adaptor.addChild(root_2, stream_COLON.next());
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:718:110: ( ^( UpperOp $t2) )?
                            if ( stream_t2.hasNext() ) {
                                // /Users/frank/tmp/trunk/jython/grammar/Python.g:718:110: ^( UpperOp $t2)
                                {
                                PythonTree root_3 = (PythonTree)adaptor.nil();
                                root_3 = (PythonTree)adaptor.becomeRoot(adaptor.create(UpperOp, "UpperOp"), root_3);

                                adaptor.addChild(root_3, stream_t2.next());

                                adaptor.addChild(root_2, root_3);
                                }

                            }
                            stream_t2.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_t2.reset();
                        stream_COLON.reset();
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:718:128: ( sliceop )?
                        if ( stream_sliceop.hasNext() ) {
                            adaptor.addChild(root_1, stream_sliceop.next());

                        }
                        stream_sliceop.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 3 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:719:13: ( COLON )=> COLON ( test )? ( sliceop )?
                    {
                    COLON303=(Token)input.LT(1);
                    match(input,COLON,FOLLOW_COLON_in_subscript6071); if (failed) return retval;
                    if ( backtracking==0 ) stream_COLON.add(COLON303);

                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:719:30: ( test )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==LPAREN||LA105_0==NAME||LA105_0==NOT||(LA105_0>=PLUS && LA105_0<=MINUS)||(LA105_0>=TILDE && LA105_0<=LBRACK)||LA105_0==LCURLY||(LA105_0>=BACKQUOTE && LA105_0<=STRING)||LA105_0==194) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:719:31: test
                            {
                            pushFollow(FOLLOW_test_in_subscript6074);
                            test304=test();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_test.add(test304.getTree());

                            }
                            break;

                    }

                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:719:38: ( sliceop )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==COLON) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:719:39: sliceop
                            {
                            pushFollow(FOLLOW_sliceop_in_subscript6079);
                            sliceop305=sliceop();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_sliceop.add(sliceop305.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: test, COLON, sliceop
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 719:49: -> ^( Subscript ( ^( Upper COLON ( ^( UpperOp test ) )? ) )? ( sliceop )? )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:719:52: ^( Subscript ( ^( Upper COLON ( ^( UpperOp test ) )? ) )? ( sliceop )? )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Subscript, "Subscript"), root_1);

                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:719:64: ( ^( Upper COLON ( ^( UpperOp test ) )? ) )?
                        if ( stream_test.hasNext()||stream_COLON.hasNext() ) {
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:719:64: ^( Upper COLON ( ^( UpperOp test ) )? )
                            {
                            PythonTree root_2 = (PythonTree)adaptor.nil();
                            root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Upper, "Upper"), root_2);

                            adaptor.addChild(root_2, stream_COLON.next());
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:719:78: ( ^( UpperOp test ) )?
                            if ( stream_test.hasNext() ) {
                                // /Users/frank/tmp/trunk/jython/grammar/Python.g:719:78: ^( UpperOp test )
                                {
                                PythonTree root_3 = (PythonTree)adaptor.nil();
                                root_3 = (PythonTree)adaptor.becomeRoot(adaptor.create(UpperOp, "UpperOp"), root_3);

                                adaptor.addChild(root_3, stream_test.next());

                                adaptor.addChild(root_2, root_3);
                                }

                            }
                            stream_test.reset();

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_test.reset();
                        stream_COLON.reset();
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:719:97: ( sliceop )?
                        if ( stream_sliceop.hasNext() ) {
                            adaptor.addChild(root_1, stream_sliceop.next());

                        }
                        stream_sliceop.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 4 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:720:13: test
                    {
                    pushFollow(FOLLOW_test_in_subscript6118);
                    test306=test();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_test.add(test306.getTree());

                    // AST REWRITE
                    // elements: test
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 720:18: -> ^( Index test )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:720:21: ^( Index test )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Index, "Index"), root_1);

                        adaptor.addChild(root_1, stream_test.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end subscript

    public static class sliceop_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start sliceop
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:724:1: sliceop : COLON ( test )? -> ^( Step COLON ( ^( StepOp test ) )? ) ;
    public final sliceop_return sliceop() throws RecognitionException {
        sliceop_return retval = new sliceop_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token COLON307=null;
        test_return test308 = null;


        PythonTree COLON307_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:724:9: ( COLON ( test )? -> ^( Step COLON ( ^( StepOp test ) )? ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:724:11: COLON ( test )?
            {
            COLON307=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_sliceop6146); if (failed) return retval;
            if ( backtracking==0 ) stream_COLON.add(COLON307);

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:724:17: ( test )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==LPAREN||LA108_0==NAME||LA108_0==NOT||(LA108_0>=PLUS && LA108_0<=MINUS)||(LA108_0>=TILDE && LA108_0<=LBRACK)||LA108_0==LCURLY||(LA108_0>=BACKQUOTE && LA108_0<=STRING)||LA108_0==194) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:724:18: test
                    {
                    pushFollow(FOLLOW_test_in_sliceop6149);
                    test308=test();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_test.add(test308.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: COLON, test
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 724:25: -> ^( Step COLON ( ^( StepOp test ) )? )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:724:28: ^( Step COLON ( ^( StepOp test ) )? )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Step, "Step"), root_1);

                adaptor.addChild(root_1, stream_COLON.next());
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:724:41: ( ^( StepOp test ) )?
                if ( stream_test.hasNext() ) {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:724:41: ^( StepOp test )
                    {
                    PythonTree root_2 = (PythonTree)adaptor.nil();
                    root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(StepOp, "StepOp"), root_2);

                    adaptor.addChild(root_2, stream_test.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_test.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end sliceop

    public static class exprlist_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start exprlist
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );
    public final exprlist_return exprlist() throws RecognitionException {
        exprlist_return retval = new exprlist_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token COMMA310=null;
        Token COMMA312=null;
        expr_return expr309 = null;

        expr_return expr311 = null;

        expr_return expr313 = null;


        PythonTree COMMA310_tree=null;
        PythonTree COMMA312_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:728:10: ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr )
            int alt111=2;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                switch ( input.LA(2) ) {
                case PLUS:
                    {
                    int LA111_14 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 14, input);

                        throw nvae;
                    }
                    }
                    break;
                case MINUS:
                    {
                    switch ( input.LA(3) ) {
                    case PLUS:
                        {
                        int LA111_66 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 66, input);

                            throw nvae;
                        }
                        }
                        break;
                    case MINUS:
                        {
                        int LA111_67 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 67, input);

                            throw nvae;
                        }
                        }
                        break;
                    case TILDE:
                        {
                        switch ( input.LA(4) ) {
                        case PLUS:
                            {
                            int LA111_180 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 180, input);

                                throw nvae;
                            }
                            }
                            break;
                        case MINUS:
                            {
                            int LA111_181 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 181, input);

                                throw nvae;
                            }
                            }
                            break;
                        case TILDE:
                            {
                            int LA111_182 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 182, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LPAREN:
                            {
                            int LA111_183 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 183, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LBRACK:
                            {
                            int LA111_184 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 184, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LCURLY:
                            {
                            int LA111_185 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 185, input);

                                throw nvae;
                            }
                            }
                            break;
                        case BACKQUOTE:
                            {
                            int LA111_186 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 186, input);

                                throw nvae;
                            }
                            }
                            break;
                        case NAME:
                            {
                            int LA111_187 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 187, input);

                                throw nvae;
                            }
                            }
                            break;
                        case INT:
                            {
                            int LA111_188 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 188, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LONGINT:
                            {
                            int LA111_189 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 189, input);

                                throw nvae;
                            }
                            }
                            break;
                        case FLOAT:
                            {
                            int LA111_190 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 190, input);

                                throw nvae;
                            }
                            }
                            break;
                        case COMPLEX:
                            {
                            int LA111_191 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 191, input);

                                throw nvae;
                            }
                            }
                            break;
                        case STRING:
                            {
                            int LA111_192 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 192, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 68, input);

                            throw nvae;
                        }

                        }
                        break;
                    case LPAREN:
                        {
                        int LA111_69 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 69, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LBRACK:
                        {
                        int LA111_70 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 70, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LCURLY:
                        {
                        int LA111_71 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 71, input);

                            throw nvae;
                        }
                        }
                        break;
                    case BACKQUOTE:
                        {
                        int LA111_72 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 72, input);

                            throw nvae;
                        }
                        }
                        break;
                    case NAME:
                        {
                        int LA111_73 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 73, input);

                            throw nvae;
                        }
                        }
                        break;
                    case INT:
                        {
                        int LA111_74 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 74, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LONGINT:
                        {
                        int LA111_75 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 75, input);

                            throw nvae;
                        }
                        }
                        break;
                    case FLOAT:
                        {
                        int LA111_76 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 76, input);

                            throw nvae;
                        }
                        }
                        break;
                    case COMPLEX:
                        {
                        int LA111_77 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 77, input);

                            throw nvae;
                        }
                        }
                        break;
                    case STRING:
                        {
                        int LA111_78 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 78, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 15, input);

                        throw nvae;
                    }

                    }
                    break;
                case TILDE:
                    {
                    switch ( input.LA(3) ) {
                    case PLUS:
                        {
                        int LA111_79 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 79, input);

                            throw nvae;
                        }
                        }
                        break;
                    case MINUS:
                        {
                        switch ( input.LA(4) ) {
                        case PLUS:
                            {
                            int LA111_205 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 205, input);

                                throw nvae;
                            }
                            }
                            break;
                        case MINUS:
                            {
                            int LA111_206 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 206, input);

                                throw nvae;
                            }
                            }
                            break;
                        case TILDE:
                            {
                            int LA111_207 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 207, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LPAREN:
                            {
                            int LA111_208 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 208, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LBRACK:
                            {
                            int LA111_209 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 209, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LCURLY:
                            {
                            int LA111_210 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 210, input);

                                throw nvae;
                            }
                            }
                            break;
                        case BACKQUOTE:
                            {
                            int LA111_211 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 211, input);

                                throw nvae;
                            }
                            }
                            break;
                        case NAME:
                            {
                            int LA111_212 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 212, input);

                                throw nvae;
                            }
                            }
                            break;
                        case INT:
                            {
                            int LA111_213 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 213, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LONGINT:
                            {
                            int LA111_214 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 214, input);

                                throw nvae;
                            }
                            }
                            break;
                        case FLOAT:
                            {
                            int LA111_215 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 215, input);

                                throw nvae;
                            }
                            }
                            break;
                        case COMPLEX:
                            {
                            int LA111_216 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 216, input);

                                throw nvae;
                            }
                            }
                            break;
                        case STRING:
                            {
                            int LA111_217 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 217, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 80, input);

                            throw nvae;
                        }

                        }
                        break;
                    case TILDE:
                        {
                        int LA111_81 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 81, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LPAREN:
                        {
                        int LA111_82 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 82, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LBRACK:
                        {
                        int LA111_83 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 83, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LCURLY:
                        {
                        int LA111_84 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 84, input);

                            throw nvae;
                        }
                        }
                        break;
                    case BACKQUOTE:
                        {
                        int LA111_85 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 85, input);

                            throw nvae;
                        }
                        }
                        break;
                    case NAME:
                        {
                        int LA111_86 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 86, input);

                            throw nvae;
                        }
                        }
                        break;
                    case INT:
                        {
                        int LA111_87 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 87, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LONGINT:
                        {
                        int LA111_88 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 88, input);

                            throw nvae;
                        }
                        }
                        break;
                    case FLOAT:
                        {
                        int LA111_89 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 89, input);

                            throw nvae;
                        }
                        }
                        break;
                    case COMPLEX:
                        {
                        int LA111_90 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 90, input);

                            throw nvae;
                        }
                        }
                        break;
                    case STRING:
                        {
                        int LA111_91 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 91, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 16, input);

                        throw nvae;
                    }

                    }
                    break;
                case LPAREN:
                    {
                    int LA111_17 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 17, input);

                        throw nvae;
                    }
                    }
                    break;
                case LBRACK:
                    {
                    int LA111_18 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 18, input);

                        throw nvae;
                    }
                    }
                    break;
                case LCURLY:
                    {
                    int LA111_19 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 19, input);

                        throw nvae;
                    }
                    }
                    break;
                case BACKQUOTE:
                    {
                    int LA111_20 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 20, input);

                        throw nvae;
                    }
                    }
                    break;
                case NAME:
                    {
                    int LA111_21 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 21, input);

                        throw nvae;
                    }
                    }
                    break;
                case INT:
                    {
                    int LA111_22 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 22, input);

                        throw nvae;
                    }
                    }
                    break;
                case LONGINT:
                    {
                    int LA111_23 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 23, input);

                        throw nvae;
                    }
                    }
                    break;
                case FLOAT:
                    {
                    int LA111_24 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 24, input);

                        throw nvae;
                    }
                    }
                    break;
                case COMPLEX:
                    {
                    int LA111_25 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 25, input);

                        throw nvae;
                    }
                    }
                    break;
                case STRING:
                    {
                    int LA111_26 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 26, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 1, input);

                    throw nvae;
                }

                }
                break;
            case MINUS:
                {
                switch ( input.LA(2) ) {
                case PLUS:
                    {
                    switch ( input.LA(3) ) {
                    case PLUS:
                        {
                        int LA111_101 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 101, input);

                            throw nvae;
                        }
                        }
                        break;
                    case MINUS:
                        {
                        int LA111_102 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 102, input);

                            throw nvae;
                        }
                        }
                        break;
                    case TILDE:
                        {
                        switch ( input.LA(4) ) {
                        case PLUS:
                            {
                            int LA111_233 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 233, input);

                                throw nvae;
                            }
                            }
                            break;
                        case MINUS:
                            {
                            int LA111_234 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 234, input);

                                throw nvae;
                            }
                            }
                            break;
                        case TILDE:
                            {
                            int LA111_235 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 235, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LPAREN:
                            {
                            int LA111_236 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 236, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LBRACK:
                            {
                            int LA111_237 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 237, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LCURLY:
                            {
                            int LA111_238 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 238, input);

                                throw nvae;
                            }
                            }
                            break;
                        case BACKQUOTE:
                            {
                            int LA111_239 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 239, input);

                                throw nvae;
                            }
                            }
                            break;
                        case NAME:
                            {
                            int LA111_240 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 240, input);

                                throw nvae;
                            }
                            }
                            break;
                        case INT:
                            {
                            int LA111_241 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 241, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LONGINT:
                            {
                            int LA111_242 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 242, input);

                                throw nvae;
                            }
                            }
                            break;
                        case FLOAT:
                            {
                            int LA111_243 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 243, input);

                                throw nvae;
                            }
                            }
                            break;
                        case COMPLEX:
                            {
                            int LA111_244 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 244, input);

                                throw nvae;
                            }
                            }
                            break;
                        case STRING:
                            {
                            int LA111_245 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 245, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 103, input);

                            throw nvae;
                        }

                        }
                        break;
                    case LPAREN:
                        {
                        int LA111_104 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 104, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LBRACK:
                        {
                        int LA111_105 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 105, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LCURLY:
                        {
                        int LA111_106 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 106, input);

                            throw nvae;
                        }
                        }
                        break;
                    case BACKQUOTE:
                        {
                        int LA111_107 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 107, input);

                            throw nvae;
                        }
                        }
                        break;
                    case NAME:
                        {
                        int LA111_108 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 108, input);

                            throw nvae;
                        }
                        }
                        break;
                    case INT:
                        {
                        int LA111_109 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 109, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LONGINT:
                        {
                        int LA111_110 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 110, input);

                            throw nvae;
                        }
                        }
                        break;
                    case FLOAT:
                        {
                        int LA111_111 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 111, input);

                            throw nvae;
                        }
                        }
                        break;
                    case COMPLEX:
                        {
                        int LA111_112 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 112, input);

                            throw nvae;
                        }
                        }
                        break;
                    case STRING:
                        {
                        int LA111_113 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 113, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 27, input);

                        throw nvae;
                    }

                    }
                    break;
                case MINUS:
                    {
                    int LA111_28 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 28, input);

                        throw nvae;
                    }
                    }
                    break;
                case TILDE:
                    {
                    switch ( input.LA(3) ) {
                    case PLUS:
                        {
                        switch ( input.LA(4) ) {
                        case PLUS:
                            {
                            int LA111_254 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 254, input);

                                throw nvae;
                            }
                            }
                            break;
                        case MINUS:
                            {
                            int LA111_255 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 255, input);

                                throw nvae;
                            }
                            }
                            break;
                        case TILDE:
                            {
                            int LA111_256 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 256, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LPAREN:
                            {
                            int LA111_257 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 257, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LBRACK:
                            {
                            int LA111_258 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 258, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LCURLY:
                            {
                            int LA111_259 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 259, input);

                                throw nvae;
                            }
                            }
                            break;
                        case BACKQUOTE:
                            {
                            int LA111_260 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 260, input);

                                throw nvae;
                            }
                            }
                            break;
                        case NAME:
                            {
                            int LA111_261 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 261, input);

                                throw nvae;
                            }
                            }
                            break;
                        case INT:
                            {
                            int LA111_262 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 262, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LONGINT:
                            {
                            int LA111_263 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 263, input);

                                throw nvae;
                            }
                            }
                            break;
                        case FLOAT:
                            {
                            int LA111_264 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 264, input);

                                throw nvae;
                            }
                            }
                            break;
                        case COMPLEX:
                            {
                            int LA111_265 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 265, input);

                                throw nvae;
                            }
                            }
                            break;
                        case STRING:
                            {
                            int LA111_266 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 266, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 116, input);

                            throw nvae;
                        }

                        }
                        break;
                    case MINUS:
                        {
                        int LA111_117 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 117, input);

                            throw nvae;
                        }
                        }
                        break;
                    case TILDE:
                        {
                        int LA111_118 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 118, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LPAREN:
                        {
                        int LA111_119 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 119, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LBRACK:
                        {
                        int LA111_120 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 120, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LCURLY:
                        {
                        int LA111_121 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 121, input);

                            throw nvae;
                        }
                        }
                        break;
                    case BACKQUOTE:
                        {
                        int LA111_122 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 122, input);

                            throw nvae;
                        }
                        }
                        break;
                    case NAME:
                        {
                        int LA111_123 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 123, input);

                            throw nvae;
                        }
                        }
                        break;
                    case INT:
                        {
                        int LA111_124 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 124, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LONGINT:
                        {
                        int LA111_125 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 125, input);

                            throw nvae;
                        }
                        }
                        break;
                    case FLOAT:
                        {
                        int LA111_126 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 126, input);

                            throw nvae;
                        }
                        }
                        break;
                    case COMPLEX:
                        {
                        int LA111_127 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 127, input);

                            throw nvae;
                        }
                        }
                        break;
                    case STRING:
                        {
                        int LA111_128 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 128, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 29, input);

                        throw nvae;
                    }

                    }
                    break;
                case LPAREN:
                    {
                    int LA111_30 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case LBRACK:
                    {
                    int LA111_31 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 31, input);

                        throw nvae;
                    }
                    }
                    break;
                case LCURLY:
                    {
                    int LA111_32 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 32, input);

                        throw nvae;
                    }
                    }
                    break;
                case BACKQUOTE:
                    {
                    int LA111_33 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 33, input);

                        throw nvae;
                    }
                    }
                    break;
                case NAME:
                    {
                    int LA111_34 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 34, input);

                        throw nvae;
                    }
                    }
                    break;
                case INT:
                    {
                    int LA111_35 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 35, input);

                        throw nvae;
                    }
                    }
                    break;
                case LONGINT:
                    {
                    int LA111_36 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 36, input);

                        throw nvae;
                    }
                    }
                    break;
                case FLOAT:
                    {
                    int LA111_37 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 37, input);

                        throw nvae;
                    }
                    }
                    break;
                case COMPLEX:
                    {
                    int LA111_38 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 38, input);

                        throw nvae;
                    }
                    }
                    break;
                case STRING:
                    {
                    int LA111_39 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 39, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 2, input);

                    throw nvae;
                }

                }
                break;
            case TILDE:
                {
                switch ( input.LA(2) ) {
                case PLUS:
                    {
                    switch ( input.LA(3) ) {
                    case PLUS:
                        {
                        int LA111_138 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 138, input);

                            throw nvae;
                        }
                        }
                        break;
                    case MINUS:
                        {
                        switch ( input.LA(4) ) {
                        case PLUS:
                            {
                            int LA111_281 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 281, input);

                                throw nvae;
                            }
                            }
                            break;
                        case MINUS:
                            {
                            int LA111_282 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 282, input);

                                throw nvae;
                            }
                            }
                            break;
                        case TILDE:
                            {
                            int LA111_283 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 283, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LPAREN:
                            {
                            int LA111_284 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 284, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LBRACK:
                            {
                            int LA111_285 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 285, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LCURLY:
                            {
                            int LA111_286 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 286, input);

                                throw nvae;
                            }
                            }
                            break;
                        case BACKQUOTE:
                            {
                            int LA111_287 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 287, input);

                                throw nvae;
                            }
                            }
                            break;
                        case NAME:
                            {
                            int LA111_288 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 288, input);

                                throw nvae;
                            }
                            }
                            break;
                        case INT:
                            {
                            int LA111_289 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 289, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LONGINT:
                            {
                            int LA111_290 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 290, input);

                                throw nvae;
                            }
                            }
                            break;
                        case FLOAT:
                            {
                            int LA111_291 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 291, input);

                                throw nvae;
                            }
                            }
                            break;
                        case COMPLEX:
                            {
                            int LA111_292 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 292, input);

                                throw nvae;
                            }
                            }
                            break;
                        case STRING:
                            {
                            int LA111_293 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 293, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 139, input);

                            throw nvae;
                        }

                        }
                        break;
                    case TILDE:
                        {
                        int LA111_140 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 140, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LPAREN:
                        {
                        int LA111_141 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 141, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LBRACK:
                        {
                        int LA111_142 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 142, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LCURLY:
                        {
                        int LA111_143 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 143, input);

                            throw nvae;
                        }
                        }
                        break;
                    case BACKQUOTE:
                        {
                        int LA111_144 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 144, input);

                            throw nvae;
                        }
                        }
                        break;
                    case NAME:
                        {
                        int LA111_145 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 145, input);

                            throw nvae;
                        }
                        }
                        break;
                    case INT:
                        {
                        int LA111_146 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 146, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LONGINT:
                        {
                        int LA111_147 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 147, input);

                            throw nvae;
                        }
                        }
                        break;
                    case FLOAT:
                        {
                        int LA111_148 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 148, input);

                            throw nvae;
                        }
                        }
                        break;
                    case COMPLEX:
                        {
                        int LA111_149 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 149, input);

                            throw nvae;
                        }
                        }
                        break;
                    case STRING:
                        {
                        int LA111_150 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 150, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 40, input);

                        throw nvae;
                    }

                    }
                    break;
                case MINUS:
                    {
                    switch ( input.LA(3) ) {
                    case PLUS:
                        {
                        switch ( input.LA(4) ) {
                        case PLUS:
                            {
                            int LA111_305 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 305, input);

                                throw nvae;
                            }
                            }
                            break;
                        case MINUS:
                            {
                            int LA111_306 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 306, input);

                                throw nvae;
                            }
                            }
                            break;
                        case TILDE:
                            {
                            int LA111_307 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 307, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LPAREN:
                            {
                            int LA111_308 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 308, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LBRACK:
                            {
                            int LA111_309 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 309, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LCURLY:
                            {
                            int LA111_310 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 310, input);

                                throw nvae;
                            }
                            }
                            break;
                        case BACKQUOTE:
                            {
                            int LA111_311 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 311, input);

                                throw nvae;
                            }
                            }
                            break;
                        case NAME:
                            {
                            int LA111_312 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 312, input);

                                throw nvae;
                            }
                            }
                            break;
                        case INT:
                            {
                            int LA111_313 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 313, input);

                                throw nvae;
                            }
                            }
                            break;
                        case LONGINT:
                            {
                            int LA111_314 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 314, input);

                                throw nvae;
                            }
                            }
                            break;
                        case FLOAT:
                            {
                            int LA111_315 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 315, input);

                                throw nvae;
                            }
                            }
                            break;
                        case COMPLEX:
                            {
                            int LA111_316 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 316, input);

                                throw nvae;
                            }
                            }
                            break;
                        case STRING:
                            {
                            int LA111_317 = input.LA(5);

                            if ( (synpred5()) ) {
                                alt111=1;
                            }
                            else if ( (true) ) {
                                alt111=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 317, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 151, input);

                            throw nvae;
                        }

                        }
                        break;
                    case MINUS:
                        {
                        int LA111_152 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 152, input);

                            throw nvae;
                        }
                        }
                        break;
                    case TILDE:
                        {
                        int LA111_153 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 153, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LPAREN:
                        {
                        int LA111_154 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 154, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LBRACK:
                        {
                        int LA111_155 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 155, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LCURLY:
                        {
                        int LA111_156 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 156, input);

                            throw nvae;
                        }
                        }
                        break;
                    case BACKQUOTE:
                        {
                        int LA111_157 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 157, input);

                            throw nvae;
                        }
                        }
                        break;
                    case NAME:
                        {
                        int LA111_158 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 158, input);

                            throw nvae;
                        }
                        }
                        break;
                    case INT:
                        {
                        int LA111_159 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 159, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LONGINT:
                        {
                        int LA111_160 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 160, input);

                            throw nvae;
                        }
                        }
                        break;
                    case FLOAT:
                        {
                        int LA111_161 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 161, input);

                            throw nvae;
                        }
                        }
                        break;
                    case COMPLEX:
                        {
                        int LA111_162 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 162, input);

                            throw nvae;
                        }
                        }
                        break;
                    case STRING:
                        {
                        int LA111_163 = input.LA(4);

                        if ( (synpred5()) ) {
                            alt111=1;
                        }
                        else if ( (true) ) {
                            alt111=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 163, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 41, input);

                        throw nvae;
                    }

                    }
                    break;
                case TILDE:
                    {
                    int LA111_42 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 42, input);

                        throw nvae;
                    }
                    }
                    break;
                case LPAREN:
                    {
                    int LA111_43 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 43, input);

                        throw nvae;
                    }
                    }
                    break;
                case LBRACK:
                    {
                    int LA111_44 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 44, input);

                        throw nvae;
                    }
                    }
                    break;
                case LCURLY:
                    {
                    int LA111_45 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 45, input);

                        throw nvae;
                    }
                    }
                    break;
                case BACKQUOTE:
                    {
                    int LA111_46 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 46, input);

                        throw nvae;
                    }
                    }
                    break;
                case NAME:
                    {
                    int LA111_47 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 47, input);

                        throw nvae;
                    }
                    }
                    break;
                case INT:
                    {
                    int LA111_48 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 48, input);

                        throw nvae;
                    }
                    }
                    break;
                case LONGINT:
                    {
                    int LA111_49 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 49, input);

                        throw nvae;
                    }
                    }
                    break;
                case FLOAT:
                    {
                    int LA111_50 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 50, input);

                        throw nvae;
                    }
                    }
                    break;
                case COMPLEX:
                    {
                    int LA111_51 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 51, input);

                        throw nvae;
                    }
                    }
                    break;
                case STRING:
                    {
                    int LA111_52 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt111=1;
                    }
                    else if ( (true) ) {
                        alt111=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 52, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 3, input);

                    throw nvae;
                }

                }
                break;
            case LPAREN:
                {
                int LA111_4 = input.LA(2);

                if ( (synpred5()) ) {
                    alt111=1;
                }
                else if ( (true) ) {
                    alt111=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 4, input);

                    throw nvae;
                }
                }
                break;
            case LBRACK:
                {
                int LA111_5 = input.LA(2);

                if ( (synpred5()) ) {
                    alt111=1;
                }
                else if ( (true) ) {
                    alt111=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 5, input);

                    throw nvae;
                }
                }
                break;
            case LCURLY:
                {
                int LA111_6 = input.LA(2);

                if ( (synpred5()) ) {
                    alt111=1;
                }
                else if ( (true) ) {
                    alt111=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 6, input);

                    throw nvae;
                }
                }
                break;
            case BACKQUOTE:
                {
                int LA111_7 = input.LA(2);

                if ( (synpred5()) ) {
                    alt111=1;
                }
                else if ( (true) ) {
                    alt111=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 7, input);

                    throw nvae;
                }
                }
                break;
            case NAME:
                {
                int LA111_8 = input.LA(2);

                if ( (synpred5()) ) {
                    alt111=1;
                }
                else if ( (true) ) {
                    alt111=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 8, input);

                    throw nvae;
                }
                }
                break;
            case INT:
                {
                int LA111_9 = input.LA(2);

                if ( (synpred5()) ) {
                    alt111=1;
                }
                else if ( (true) ) {
                    alt111=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 9, input);

                    throw nvae;
                }
                }
                break;
            case LONGINT:
                {
                int LA111_10 = input.LA(2);

                if ( (synpred5()) ) {
                    alt111=1;
                }
                else if ( (true) ) {
                    alt111=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 10, input);

                    throw nvae;
                }
                }
                break;
            case FLOAT:
                {
                int LA111_11 = input.LA(2);

                if ( (synpred5()) ) {
                    alt111=1;
                }
                else if ( (true) ) {
                    alt111=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 11, input);

                    throw nvae;
                }
                }
                break;
            case COMPLEX:
                {
                int LA111_12 = input.LA(2);

                if ( (synpred5()) ) {
                    alt111=1;
                }
                else if ( (true) ) {
                    alt111=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 12, input);

                    throw nvae;
                }
                }
                break;
            case STRING:
                {
                int LA111_13 = input.LA(2);

                if ( (synpred5()) ) {
                    alt111=1;
                }
                else if ( (true) ) {
                    alt111=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 13, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("728:1: exprlist : ( ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ^( Tuple ^( Elts ( expr )+ ) ) | expr );", 111, 0, input);

                throw nvae;
            }

            switch (alt111) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:728:12: ( expr COMMA )=> expr ( options {k=2; } : COMMA expr )* ( COMMA )?
                    {
                    pushFollow(FOLLOW_expr_in_exprlist6192);
                    expr309=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_expr.add(expr309.getTree());
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:728:33: ( options {k=2; } : COMMA expr )*
                    loop109:
                    do {
                        int alt109=2;
                        int LA109_0 = input.LA(1);

                        if ( (LA109_0==COMMA) ) {
                            int LA109_1 = input.LA(2);

                            if ( (LA109_1==LPAREN||LA109_1==NAME||(LA109_1>=PLUS && LA109_1<=MINUS)||(LA109_1>=TILDE && LA109_1<=LBRACK)||LA109_1==LCURLY||(LA109_1>=BACKQUOTE && LA109_1<=STRING)) ) {
                                alt109=1;
                            }


                        }


                        switch (alt109) {
                    	case 1 :
                    	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:728:50: COMMA expr
                    	    {
                    	    COMMA310=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_exprlist6203); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_COMMA.add(COMMA310);

                    	    pushFollow(FOLLOW_expr_in_exprlist6205);
                    	    expr311=expr();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_expr.add(expr311.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop109;
                        }
                    } while (true);

                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:728:63: ( COMMA )?
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==COMMA) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:728:64: COMMA
                            {
                            COMMA312=(Token)input.LT(1);
                            match(input,COMMA,FOLLOW_COMMA_in_exprlist6210); if (failed) return retval;
                            if ( backtracking==0 ) stream_COMMA.add(COMMA312);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 728:72: -> ^( Tuple ^( Elts ( expr )+ ) )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:728:75: ^( Tuple ^( Elts ( expr )+ ) )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Tuple, "Tuple"), root_1);

                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:728:83: ^( Elts ( expr )+ )
                        {
                        PythonTree root_2 = (PythonTree)adaptor.nil();
                        root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Elts, "Elts"), root_2);

                        if ( !(stream_expr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expr.hasNext() ) {
                            adaptor.addChild(root_2, stream_expr.next());

                        }
                        stream_expr.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:729:12: expr
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_expr_in_exprlist6238);
                    expr313=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr313.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end exprlist

    public static class exprlist2_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start exprlist2
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:734:1: exprlist2 : expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ( expr )+ ;
    public final exprlist2_return exprlist2() throws RecognitionException {
        exprlist2_return retval = new exprlist2_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token COMMA315=null;
        Token COMMA317=null;
        expr_return expr314 = null;

        expr_return expr316 = null;


        PythonTree COMMA315_tree=null;
        PythonTree COMMA317_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:734:11: ( expr ( options {k=2; } : COMMA expr )* ( COMMA )? -> ( expr )+ )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:734:13: expr ( options {k=2; } : COMMA expr )* ( COMMA )?
            {
            pushFollow(FOLLOW_expr_in_exprlist26258);
            expr314=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_expr.add(expr314.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:734:18: ( options {k=2; } : COMMA expr )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==COMMA) ) {
                    int LA112_1 = input.LA(2);

                    if ( (LA112_1==LPAREN||LA112_1==NAME||(LA112_1>=PLUS && LA112_1<=MINUS)||(LA112_1>=TILDE && LA112_1<=LBRACK)||LA112_1==LCURLY||(LA112_1>=BACKQUOTE && LA112_1<=STRING)) ) {
                        alt112=1;
                    }


                }


                switch (alt112) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:734:35: COMMA expr
            	    {
            	    COMMA315=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_exprlist26269); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMA.add(COMMA315);

            	    pushFollow(FOLLOW_expr_in_exprlist26271);
            	    expr316=expr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_expr.add(expr316.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:734:48: ( COMMA )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==COMMA) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:734:49: COMMA
                    {
                    COMMA317=(Token)input.LT(1);
                    match(input,COMMA,FOLLOW_COMMA_in_exprlist26276); if (failed) return retval;
                    if ( backtracking==0 ) stream_COMMA.add(COMMA317);


                    }
                    break;

            }


            // AST REWRITE
            // elements: expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 735:10: -> ( expr )+
            {
                if ( !(stream_expr.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expr.hasNext() ) {
                    adaptor.addChild(root_0, stream_expr.next());

                }
                stream_expr.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end exprlist2

    public static class testlist_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start testlist
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:739:1: testlist : test ( options {k=2; } : c1= COMMA test )* (c2= COMMA )? -> { $c1 != null || $c2 != null }? ^( Tuple ^( Elts ( test )+ ) ) -> test ;
    public final testlist_return testlist() throws RecognitionException {
        testlist_return retval = new testlist_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token c1=null;
        Token c2=null;
        test_return test318 = null;

        test_return test319 = null;


        PythonTree c1_tree=null;
        PythonTree c2_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:740:5: ( test ( options {k=2; } : c1= COMMA test )* (c2= COMMA )? -> { $c1 != null || $c2 != null }? ^( Tuple ^( Elts ( test )+ ) ) -> test )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:740:7: test ( options {k=2; } : c1= COMMA test )* (c2= COMMA )?
            {
            pushFollow(FOLLOW_test_in_testlist6316);
            test318=test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_test.add(test318.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:740:12: ( options {k=2; } : c1= COMMA test )*
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);

                if ( (LA114_0==COMMA) ) {
                    int LA114_1 = input.LA(2);

                    if ( (LA114_1==BACKQUOTE) ) {
                        alt114=1;
                    }
                    else if ( (LA114_1==LPAREN||LA114_1==NAME||LA114_1==NOT||(LA114_1>=PLUS && LA114_1<=MINUS)||(LA114_1>=TILDE && LA114_1<=LBRACK)||LA114_1==LCURLY||(LA114_1>=INT && LA114_1<=STRING)||LA114_1==194) ) {
                        alt114=1;
                    }


                }


                switch (alt114) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:740:29: c1= COMMA test
            	    {
            	    c1=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_testlist6329); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMA.add(c1);

            	    pushFollow(FOLLOW_test_in_testlist6331);
            	    test319=test();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_test.add(test319.getTree());

            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:740:45: (c2= COMMA )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==COMMA) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:740:46: c2= COMMA
                    {
                    c2=(Token)input.LT(1);
                    match(input,COMMA,FOLLOW_COMMA_in_testlist6338); if (failed) return retval;
                    if ( backtracking==0 ) stream_COMMA.add(c2);


                    }
                    break;

            }


            // AST REWRITE
            // elements: test, test
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 741:6: -> { $c1 != null || $c2 != null }? ^( Tuple ^( Elts ( test )+ ) )
            if ( c1 != null || c2 != null ) {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:741:41: ^( Tuple ^( Elts ( test )+ ) )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Tuple, "Tuple"), root_1);

                // /Users/frank/tmp/trunk/jython/grammar/Python.g:741:49: ^( Elts ( test )+ )
                {
                PythonTree root_2 = (PythonTree)adaptor.nil();
                root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Elts, "Elts"), root_2);

                if ( !(stream_test.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_test.hasNext() ) {
                    adaptor.addChild(root_2, stream_test.next());

                }
                stream_test.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 742:6: -> test
            {
                adaptor.addChild(root_0, stream_test.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end testlist

    public static class dictmaker_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dictmaker
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:749:1: dictmaker : test COLON test ( options {k=2; } : COMMA test COLON test )* ( COMMA )? -> ( test )+ ;
    public final dictmaker_return dictmaker() throws RecognitionException {
        dictmaker_return retval = new dictmaker_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token COLON321=null;
        Token COMMA323=null;
        Token COLON325=null;
        Token COMMA327=null;
        test_return test320 = null;

        test_return test322 = null;

        test_return test324 = null;

        test_return test326 = null;


        PythonTree COLON321_tree=null;
        PythonTree COMMA323_tree=null;
        PythonTree COLON325_tree=null;
        PythonTree COMMA327_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:749:11: ( test COLON test ( options {k=2; } : COMMA test COLON test )* ( COMMA )? -> ( test )+ )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:749:13: test COLON test ( options {k=2; } : COMMA test COLON test )* ( COMMA )?
            {
            pushFollow(FOLLOW_test_in_dictmaker6386);
            test320=test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_test.add(test320.getTree());
            COLON321=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_dictmaker6388); if (failed) return retval;
            if ( backtracking==0 ) stream_COLON.add(COLON321);

            pushFollow(FOLLOW_test_in_dictmaker6390);
            test322=test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_test.add(test322.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:750:13: ( options {k=2; } : COMMA test COLON test )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==COMMA) ) {
                    int LA116_1 = input.LA(2);

                    if ( (LA116_1==LPAREN||LA116_1==NAME||LA116_1==NOT||(LA116_1>=PLUS && LA116_1<=MINUS)||(LA116_1>=TILDE && LA116_1<=LBRACK)||LA116_1==LCURLY||(LA116_1>=BACKQUOTE && LA116_1<=STRING)||LA116_1==194) ) {
                        alt116=1;
                    }


                }


                switch (alt116) {
            	case 1 :
            	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:750:29: COMMA test COLON test
            	    {
            	    COMMA323=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_dictmaker6412); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMA.add(COMMA323);

            	    pushFollow(FOLLOW_test_in_dictmaker6414);
            	    test324=test();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_test.add(test324.getTree());
            	    COLON325=(Token)input.LT(1);
            	    match(input,COLON,FOLLOW_COLON_in_dictmaker6416); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COLON.add(COLON325);

            	    pushFollow(FOLLOW_test_in_dictmaker6418);
            	    test326=test();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_test.add(test326.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:750:53: ( COMMA )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==COMMA) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:750:54: COMMA
                    {
                    COMMA327=(Token)input.LT(1);
                    match(input,COMMA,FOLLOW_COMMA_in_dictmaker6423); if (failed) return retval;
                    if ( backtracking==0 ) stream_COMMA.add(COMMA327);


                    }
                    break;

            }


            // AST REWRITE
            // elements: test
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 751:10: -> ( test )+
            {
                if ( !(stream_test.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_test.hasNext() ) {
                    adaptor.addChild(root_0, stream_test.next());

                }
                stream_test.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dictmaker

    public static class classdef_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start classdef
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:755:1: classdef : 'class' NAME ( LPAREN ( testlist )? RPAREN )? COLON suite -> ^( ClassDef ^( Name NAME ) ( ^( Bases testlist ) )? ^( Body suite ) ) ;
    public final classdef_return classdef() throws RecognitionException {
        classdef_return retval = new classdef_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal328=null;
        Token NAME329=null;
        Token LPAREN330=null;
        Token RPAREN332=null;
        Token COLON333=null;
        testlist_return testlist331 = null;

        suite_return suite334 = null;


        PythonTree string_literal328_tree=null;
        PythonTree NAME329_tree=null;
        PythonTree LPAREN330_tree=null;
        PythonTree RPAREN332_tree=null;
        PythonTree COLON333_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_195=new RewriteRuleTokenStream(adaptor,"token 195");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        RewriteRuleSubtreeStream stream_testlist=new RewriteRuleSubtreeStream(adaptor,"rule testlist");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:755:9: ( 'class' NAME ( LPAREN ( testlist )? RPAREN )? COLON suite -> ^( ClassDef ^( Name NAME ) ( ^( Bases testlist ) )? ^( Body suite ) ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:755:11: 'class' NAME ( LPAREN ( testlist )? RPAREN )? COLON suite
            {
            string_literal328=(Token)input.LT(1);
            match(input,195,FOLLOW_195_in_classdef6458); if (failed) return retval;
            if ( backtracking==0 ) stream_195.add(string_literal328);

            NAME329=(Token)input.LT(1);
            match(input,NAME,FOLLOW_NAME_in_classdef6460); if (failed) return retval;
            if ( backtracking==0 ) stream_NAME.add(NAME329);

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:755:24: ( LPAREN ( testlist )? RPAREN )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==LPAREN) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:755:25: LPAREN ( testlist )? RPAREN
                    {
                    LPAREN330=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_classdef6463); if (failed) return retval;
                    if ( backtracking==0 ) stream_LPAREN.add(LPAREN330);

                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:755:32: ( testlist )?
                    int alt118=2;
                    int LA118_0 = input.LA(1);

                    if ( (LA118_0==LPAREN||LA118_0==NAME||LA118_0==NOT||(LA118_0>=PLUS && LA118_0<=MINUS)||(LA118_0>=TILDE && LA118_0<=LBRACK)||LA118_0==LCURLY||(LA118_0>=BACKQUOTE && LA118_0<=STRING)||LA118_0==194) ) {
                        alt118=1;
                    }
                    switch (alt118) {
                        case 1 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:755:32: testlist
                            {
                            pushFollow(FOLLOW_testlist_in_classdef6465);
                            testlist331=testlist();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_testlist.add(testlist331.getTree());

                            }
                            break;

                    }

                    RPAREN332=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_classdef6468); if (failed) return retval;
                    if ( backtracking==0 ) stream_RPAREN.add(RPAREN332);


                    }
                    break;

            }

            COLON333=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_classdef6472); if (failed) return retval;
            if ( backtracking==0 ) stream_COLON.add(COLON333);

            pushFollow(FOLLOW_suite_in_classdef6474);
            suite334=suite();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_suite.add(suite334.getTree());

            // AST REWRITE
            // elements: NAME, testlist, suite
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 756:5: -> ^( ClassDef ^( Name NAME ) ( ^( Bases testlist ) )? ^( Body suite ) )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:756:8: ^( ClassDef ^( Name NAME ) ( ^( Bases testlist ) )? ^( Body suite ) )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(ClassDef, "ClassDef"), root_1);

                // /Users/frank/tmp/trunk/jython/grammar/Python.g:756:19: ^( Name NAME )
                {
                PythonTree root_2 = (PythonTree)adaptor.nil();
                root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Name, "Name"), root_2);

                adaptor.addChild(root_2, stream_NAME.next());

                adaptor.addChild(root_1, root_2);
                }
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:756:32: ( ^( Bases testlist ) )?
                if ( stream_testlist.hasNext() ) {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:756:32: ^( Bases testlist )
                    {
                    PythonTree root_2 = (PythonTree)adaptor.nil();
                    root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Bases, "Bases"), root_2);

                    adaptor.addChild(root_2, stream_testlist.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_testlist.reset();
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:756:51: ^( Body suite )
                {
                PythonTree root_2 = (PythonTree)adaptor.nil();
                root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Body, "Body"), root_2);

                adaptor.addChild(root_2, stream_suite.next());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end classdef

    public static class arglist_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start arglist
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:760:1: arglist : ( argument ( COMMA argument )* ( COMMA ( STAR starargs= test ( COMMA DOUBLESTAR kwargs= test )? | DOUBLESTAR kwargs= test )? )? -> ^( Args ( argument )+ ) ( ^( StarArgs $starargs) )? ( ^( KWArgs $kwargs) )? | STAR starargs= test ( COMMA DOUBLESTAR kwargs= test )? -> ^( StarArgs $starargs) ( ^( KWArgs $kwargs) )? | DOUBLESTAR kwargs= test -> ^( KWArgs $kwargs) );
    public final arglist_return arglist() throws RecognitionException {
        arglist_return retval = new arglist_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token COMMA336=null;
        Token COMMA338=null;
        Token STAR339=null;
        Token COMMA340=null;
        Token DOUBLESTAR341=null;
        Token DOUBLESTAR342=null;
        Token STAR343=null;
        Token COMMA344=null;
        Token DOUBLESTAR345=null;
        Token DOUBLESTAR346=null;
        test_return starargs = null;

        test_return kwargs = null;

        argument_return argument335 = null;

        argument_return argument337 = null;


        PythonTree COMMA336_tree=null;
        PythonTree COMMA338_tree=null;
        PythonTree STAR339_tree=null;
        PythonTree COMMA340_tree=null;
        PythonTree DOUBLESTAR341_tree=null;
        PythonTree DOUBLESTAR342_tree=null;
        PythonTree STAR343_tree=null;
        PythonTree COMMA344_tree=null;
        PythonTree DOUBLESTAR345_tree=null;
        PythonTree DOUBLESTAR346_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOUBLESTAR=new RewriteRuleTokenStream(adaptor,"token DOUBLESTAR");
        RewriteRuleSubtreeStream stream_argument=new RewriteRuleSubtreeStream(adaptor,"rule argument");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:760:9: ( argument ( COMMA argument )* ( COMMA ( STAR starargs= test ( COMMA DOUBLESTAR kwargs= test )? | DOUBLESTAR kwargs= test )? )? -> ^( Args ( argument )+ ) ( ^( StarArgs $starargs) )? ( ^( KWArgs $kwargs) )? | STAR starargs= test ( COMMA DOUBLESTAR kwargs= test )? -> ^( StarArgs $starargs) ( ^( KWArgs $kwargs) )? | DOUBLESTAR kwargs= test -> ^( KWArgs $kwargs) )
            int alt125=3;
            switch ( input.LA(1) ) {
            case LPAREN:
            case NAME:
            case NOT:
            case PLUS:
            case MINUS:
            case TILDE:
            case LBRACK:
            case LCURLY:
            case BACKQUOTE:
            case INT:
            case LONGINT:
            case FLOAT:
            case COMPLEX:
            case STRING:
            case 194:
                {
                alt125=1;
                }
                break;
            case STAR:
                {
                alt125=2;
                }
                break;
            case DOUBLESTAR:
                {
                alt125=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("760:1: arglist : ( argument ( COMMA argument )* ( COMMA ( STAR starargs= test ( COMMA DOUBLESTAR kwargs= test )? | DOUBLESTAR kwargs= test )? )? -> ^( Args ( argument )+ ) ( ^( StarArgs $starargs) )? ( ^( KWArgs $kwargs) )? | STAR starargs= test ( COMMA DOUBLESTAR kwargs= test )? -> ^( StarArgs $starargs) ( ^( KWArgs $kwargs) )? | DOUBLESTAR kwargs= test -> ^( KWArgs $kwargs) );", 125, 0, input);

                throw nvae;
            }

            switch (alt125) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:760:11: argument ( COMMA argument )* ( COMMA ( STAR starargs= test ( COMMA DOUBLESTAR kwargs= test )? | DOUBLESTAR kwargs= test )? )?
                    {
                    pushFollow(FOLLOW_argument_in_arglist6517);
                    argument335=argument();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_argument.add(argument335.getTree());
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:760:20: ( COMMA argument )*
                    loop120:
                    do {
                        int alt120=2;
                        int LA120_0 = input.LA(1);

                        if ( (LA120_0==COMMA) ) {
                            int LA120_1 = input.LA(2);

                            if ( (LA120_1==LPAREN||LA120_1==NAME||LA120_1==NOT||(LA120_1>=PLUS && LA120_1<=MINUS)||(LA120_1>=TILDE && LA120_1<=LBRACK)||LA120_1==LCURLY||(LA120_1>=BACKQUOTE && LA120_1<=STRING)||LA120_1==194) ) {
                                alt120=1;
                            }


                        }


                        switch (alt120) {
                    	case 1 :
                    	    // /Users/frank/tmp/trunk/jython/grammar/Python.g:760:21: COMMA argument
                    	    {
                    	    COMMA336=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_arglist6520); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_COMMA.add(COMMA336);

                    	    pushFollow(FOLLOW_argument_in_arglist6522);
                    	    argument337=argument();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_argument.add(argument337.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop120;
                        }
                    } while (true);

                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:761:11: ( COMMA ( STAR starargs= test ( COMMA DOUBLESTAR kwargs= test )? | DOUBLESTAR kwargs= test )? )?
                    int alt123=2;
                    int LA123_0 = input.LA(1);

                    if ( (LA123_0==COMMA) ) {
                        alt123=1;
                    }
                    switch (alt123) {
                        case 1 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:761:13: COMMA ( STAR starargs= test ( COMMA DOUBLESTAR kwargs= test )? | DOUBLESTAR kwargs= test )?
                            {
                            COMMA338=(Token)input.LT(1);
                            match(input,COMMA,FOLLOW_COMMA_in_arglist6538); if (failed) return retval;
                            if ( backtracking==0 ) stream_COMMA.add(COMMA338);

                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:762:13: ( STAR starargs= test ( COMMA DOUBLESTAR kwargs= test )? | DOUBLESTAR kwargs= test )?
                            int alt122=3;
                            int LA122_0 = input.LA(1);

                            if ( (LA122_0==STAR) ) {
                                alt122=1;
                            }
                            else if ( (LA122_0==DOUBLESTAR) ) {
                                alt122=2;
                            }
                            switch (alt122) {
                                case 1 :
                                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:762:15: STAR starargs= test ( COMMA DOUBLESTAR kwargs= test )?
                                    {
                                    STAR339=(Token)input.LT(1);
                                    match(input,STAR,FOLLOW_STAR_in_arglist6554); if (failed) return retval;
                                    if ( backtracking==0 ) stream_STAR.add(STAR339);

                                    pushFollow(FOLLOW_test_in_arglist6558);
                                    starargs=test();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_test.add(starargs.getTree());
                                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:762:34: ( COMMA DOUBLESTAR kwargs= test )?
                                    int alt121=2;
                                    int LA121_0 = input.LA(1);

                                    if ( (LA121_0==COMMA) ) {
                                        alt121=1;
                                    }
                                    switch (alt121) {
                                        case 1 :
                                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:762:35: COMMA DOUBLESTAR kwargs= test
                                            {
                                            COMMA340=(Token)input.LT(1);
                                            match(input,COMMA,FOLLOW_COMMA_in_arglist6561); if (failed) return retval;
                                            if ( backtracking==0 ) stream_COMMA.add(COMMA340);

                                            DOUBLESTAR341=(Token)input.LT(1);
                                            match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_arglist6563); if (failed) return retval;
                                            if ( backtracking==0 ) stream_DOUBLESTAR.add(DOUBLESTAR341);

                                            pushFollow(FOLLOW_test_in_arglist6567);
                                            kwargs=test();
                                            _fsp--;
                                            if (failed) return retval;
                                            if ( backtracking==0 ) stream_test.add(kwargs.getTree());

                                            }
                                            break;

                                    }


                                    }
                                    break;
                                case 2 :
                                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:763:15: DOUBLESTAR kwargs= test
                                    {
                                    DOUBLESTAR342=(Token)input.LT(1);
                                    match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_arglist6585); if (failed) return retval;
                                    if ( backtracking==0 ) stream_DOUBLESTAR.add(DOUBLESTAR342);

                                    pushFollow(FOLLOW_test_in_arglist6589);
                                    kwargs=test();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_test.add(kwargs.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: argument, kwargs, starargs
                    // token labels: 
                    // rule labels: starargs, kwargs, retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_starargs=new RewriteRuleSubtreeStream(adaptor,"token starargs",starargs!=null?starargs.tree:null);
                    RewriteRuleSubtreeStream stream_kwargs=new RewriteRuleSubtreeStream(adaptor,"token kwargs",kwargs!=null?kwargs.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 766:8: -> ^( Args ( argument )+ ) ( ^( StarArgs $starargs) )? ( ^( KWArgs $kwargs) )?
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:766:11: ^( Args ( argument )+ )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Args, "Args"), root_1);

                        if ( !(stream_argument.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_argument.hasNext() ) {
                            adaptor.addChild(root_1, stream_argument.next());

                        }
                        stream_argument.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:766:29: ( ^( StarArgs $starargs) )?
                        if ( stream_starargs.hasNext() ) {
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:766:29: ^( StarArgs $starargs)
                            {
                            PythonTree root_1 = (PythonTree)adaptor.nil();
                            root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(StarArgs, "StarArgs"), root_1);

                            adaptor.addChild(root_1, stream_starargs.next());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_starargs.reset();
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:766:52: ( ^( KWArgs $kwargs) )?
                        if ( stream_kwargs.hasNext() ) {
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:766:52: ^( KWArgs $kwargs)
                            {
                            PythonTree root_1 = (PythonTree)adaptor.nil();
                            root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(KWArgs, "KWArgs"), root_1);

                            adaptor.addChild(root_1, stream_kwargs.next());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_kwargs.reset();

                    }

                    }

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:767:13: STAR starargs= test ( COMMA DOUBLESTAR kwargs= test )?
                    {
                    STAR343=(Token)input.LT(1);
                    match(input,STAR,FOLLOW_STAR_in_arglist6663); if (failed) return retval;
                    if ( backtracking==0 ) stream_STAR.add(STAR343);

                    pushFollow(FOLLOW_test_in_arglist6667);
                    starargs=test();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_test.add(starargs.getTree());
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:767:32: ( COMMA DOUBLESTAR kwargs= test )?
                    int alt124=2;
                    int LA124_0 = input.LA(1);

                    if ( (LA124_0==COMMA) ) {
                        alt124=1;
                    }
                    switch (alt124) {
                        case 1 :
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:767:33: COMMA DOUBLESTAR kwargs= test
                            {
                            COMMA344=(Token)input.LT(1);
                            match(input,COMMA,FOLLOW_COMMA_in_arglist6670); if (failed) return retval;
                            if ( backtracking==0 ) stream_COMMA.add(COMMA344);

                            DOUBLESTAR345=(Token)input.LT(1);
                            match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_arglist6672); if (failed) return retval;
                            if ( backtracking==0 ) stream_DOUBLESTAR.add(DOUBLESTAR345);

                            pushFollow(FOLLOW_test_in_arglist6676);
                            kwargs=test();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_test.add(kwargs.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: kwargs, starargs
                    // token labels: 
                    // rule labels: starargs, kwargs, retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_starargs=new RewriteRuleSubtreeStream(adaptor,"token starargs",starargs!=null?starargs.tree:null);
                    RewriteRuleSubtreeStream stream_kwargs=new RewriteRuleSubtreeStream(adaptor,"token kwargs",kwargs!=null?kwargs.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 768:8: -> ^( StarArgs $starargs) ( ^( KWArgs $kwargs) )?
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:768:11: ^( StarArgs $starargs)
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(StarArgs, "StarArgs"), root_1);

                        adaptor.addChild(root_1, stream_starargs.next());

                        adaptor.addChild(root_0, root_1);
                        }
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:768:33: ( ^( KWArgs $kwargs) )?
                        if ( stream_kwargs.hasNext() ) {
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:768:33: ^( KWArgs $kwargs)
                            {
                            PythonTree root_1 = (PythonTree)adaptor.nil();
                            root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(KWArgs, "KWArgs"), root_1);

                            adaptor.addChild(root_1, stream_kwargs.next());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_kwargs.reset();

                    }

                    }

                    }
                    break;
                case 3 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:769:13: DOUBLESTAR kwargs= test
                    {
                    DOUBLESTAR346=(Token)input.LT(1);
                    match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_arglist6716); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOUBLESTAR.add(DOUBLESTAR346);

                    pushFollow(FOLLOW_test_in_arglist6720);
                    kwargs=test();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_test.add(kwargs.getTree());

                    // AST REWRITE
                    // elements: kwargs
                    // token labels: 
                    // rule labels: kwargs, retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_kwargs=new RewriteRuleSubtreeStream(adaptor,"token kwargs",kwargs!=null?kwargs.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 770:8: -> ^( KWArgs $kwargs)
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:770:11: ^( KWArgs $kwargs)
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(KWArgs, "KWArgs"), root_1);

                        adaptor.addChild(root_1, stream_kwargs.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end arglist

    public static class argument_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start argument
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:774:1: argument : t1= test ( ( ASSIGN t2= test ) -> ^( Keyword ^( Arg $t1) ( ^( Value $t2) )? ) | gen_for -> ^( GenFor $t1 gen_for ) | -> ^( Arg $t1) ) ;
    public final argument_return argument() throws RecognitionException {
        argument_return retval = new argument_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token ASSIGN347=null;
        test_return t1 = null;

        test_return t2 = null;

        gen_for_return gen_for348 = null;


        PythonTree ASSIGN347_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_gen_for=new RewriteRuleSubtreeStream(adaptor,"rule gen_for");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:774:10: (t1= test ( ( ASSIGN t2= test ) -> ^( Keyword ^( Arg $t1) ( ^( Value $t2) )? ) | gen_for -> ^( GenFor $t1 gen_for ) | -> ^( Arg $t1) ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:774:12: t1= test ( ( ASSIGN t2= test ) -> ^( Keyword ^( Arg $t1) ( ^( Value $t2) )? ) | gen_for -> ^( GenFor $t1 gen_for ) | -> ^( Arg $t1) )
            {
            pushFollow(FOLLOW_test_in_argument6756);
            t1=test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_test.add(t1.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:775:10: ( ( ASSIGN t2= test ) -> ^( Keyword ^( Arg $t1) ( ^( Value $t2) )? ) | gen_for -> ^( GenFor $t1 gen_for ) | -> ^( Arg $t1) )
            int alt126=3;
            switch ( input.LA(1) ) {
            case ASSIGN:
                {
                alt126=1;
                }
                break;
            case 188:
                {
                alt126=2;
                }
                break;
            case RPAREN:
            case COMMA:
                {
                alt126=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("775:10: ( ( ASSIGN t2= test ) -> ^( Keyword ^( Arg $t1) ( ^( Value $t2) )? ) | gen_for -> ^( GenFor $t1 gen_for ) | -> ^( Arg $t1) )", 126, 0, input);

                throw nvae;
            }

            switch (alt126) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:775:12: ( ASSIGN t2= test )
                    {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:775:12: ( ASSIGN t2= test )
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:775:13: ASSIGN t2= test
                    {
                    ASSIGN347=(Token)input.LT(1);
                    match(input,ASSIGN,FOLLOW_ASSIGN_in_argument6770); if (failed) return retval;
                    if ( backtracking==0 ) stream_ASSIGN.add(ASSIGN347);

                    pushFollow(FOLLOW_test_in_argument6774);
                    t2=test();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_test.add(t2.getTree());

                    }


                    // AST REWRITE
                    // elements: t1, t2
                    // token labels: 
                    // rule labels: t1, retval, t2
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_t1=new RewriteRuleSubtreeStream(adaptor,"token t1",t1!=null?t1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_t2=new RewriteRuleSubtreeStream(adaptor,"token t2",t2!=null?t2.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 775:29: -> ^( Keyword ^( Arg $t1) ( ^( Value $t2) )? )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:775:32: ^( Keyword ^( Arg $t1) ( ^( Value $t2) )? )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Keyword, "Keyword"), root_1);

                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:775:42: ^( Arg $t1)
                        {
                        PythonTree root_2 = (PythonTree)adaptor.nil();
                        root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Arg, "Arg"), root_2);

                        adaptor.addChild(root_2, stream_t1.next());

                        adaptor.addChild(root_1, root_2);
                        }
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:775:53: ( ^( Value $t2) )?
                        if ( stream_t2.hasNext() ) {
                            // /Users/frank/tmp/trunk/jython/grammar/Python.g:775:53: ^( Value $t2)
                            {
                            PythonTree root_2 = (PythonTree)adaptor.nil();
                            root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Value, "Value"), root_2);

                            adaptor.addChild(root_2, stream_t2.next());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_t2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:776:12: gen_for
                    {
                    pushFollow(FOLLOW_gen_for_in_argument6809);
                    gen_for348=gen_for();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_gen_for.add(gen_for348.getTree());

                    // AST REWRITE
                    // elements: t1, gen_for
                    // token labels: 
                    // rule labels: t1, retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_t1=new RewriteRuleSubtreeStream(adaptor,"token t1",t1!=null?t1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 776:20: -> ^( GenFor $t1 gen_for )
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:776:23: ^( GenFor $t1 gen_for )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(GenFor, "GenFor"), root_1);

                        adaptor.addChild(root_1, stream_t1.next());
                        adaptor.addChild(root_1, stream_gen_for.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 3 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:777:12: 
                    {

                    // AST REWRITE
                    // elements: t1
                    // token labels: 
                    // rule labels: t1, retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_t1=new RewriteRuleSubtreeStream(adaptor,"token t1",t1!=null?t1.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 777:12: -> ^( Arg $t1)
                    {
                        // /Users/frank/tmp/trunk/jython/grammar/Python.g:777:15: ^( Arg $t1)
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Arg, "Arg"), root_1);

                        adaptor.addChild(root_1, stream_t1.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end argument

    public static class list_iter_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start list_iter
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:782:1: list_iter : ( list_for | list_if );
    public final list_iter_return list_iter() throws RecognitionException {
        list_iter_return retval = new list_iter_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        list_for_return list_for349 = null;

        list_if_return list_if350 = null;



        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:782:11: ( list_for | list_if )
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==188) ) {
                alt127=1;
            }
            else if ( (LA127_0==184) ) {
                alt127=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("782:1: list_iter : ( list_for | list_if );", 127, 0, input);

                throw nvae;
            }
            switch (alt127) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:782:13: list_for
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_list_for_in_list_iter6870);
                    list_for349=list_for();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, list_for349.getTree());

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:783:13: list_if
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_list_if_in_list_iter6884);
                    list_if350=list_if();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, list_if350.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end list_iter

    public static class list_for_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start list_for
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:787:1: list_for : 'for' exprlist 'in' testlist ( list_iter )? -> ^( ListFor ^( Target exprlist ) ^( Iter testlist ) ( ^( Ifs list_iter ) )? ) ;
    public final list_for_return list_for() throws RecognitionException {
        list_for_return retval = new list_for_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal351=null;
        Token string_literal353=null;
        exprlist_return exprlist352 = null;

        testlist_return testlist354 = null;

        list_iter_return list_iter355 = null;


        PythonTree string_literal351_tree=null;
        PythonTree string_literal353_tree=null;
        RewriteRuleTokenStream stream_188=new RewriteRuleTokenStream(adaptor,"token 188");
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleSubtreeStream stream_list_iter=new RewriteRuleSubtreeStream(adaptor,"rule list_iter");
        RewriteRuleSubtreeStream stream_testlist=new RewriteRuleSubtreeStream(adaptor,"rule testlist");
        RewriteRuleSubtreeStream stream_exprlist=new RewriteRuleSubtreeStream(adaptor,"rule exprlist");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:787:10: ( 'for' exprlist 'in' testlist ( list_iter )? -> ^( ListFor ^( Target exprlist ) ^( Iter testlist ) ( ^( Ifs list_iter ) )? ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:787:12: 'for' exprlist 'in' testlist ( list_iter )?
            {
            string_literal351=(Token)input.LT(1);
            match(input,188,FOLLOW_188_in_list_for6904); if (failed) return retval;
            if ( backtracking==0 ) stream_188.add(string_literal351);

            pushFollow(FOLLOW_exprlist_in_list_for6906);
            exprlist352=exprlist();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprlist.add(exprlist352.getTree());
            string_literal353=(Token)input.LT(1);
            match(input,182,FOLLOW_182_in_list_for6908); if (failed) return retval;
            if ( backtracking==0 ) stream_182.add(string_literal353);

            pushFollow(FOLLOW_testlist_in_list_for6910);
            testlist354=testlist();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_testlist.add(testlist354.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:787:41: ( list_iter )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==184||LA128_0==188) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:787:42: list_iter
                    {
                    pushFollow(FOLLOW_list_iter_in_list_for6913);
                    list_iter355=list_iter();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_list_iter.add(list_iter355.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: list_iter, exprlist, testlist
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 788:9: -> ^( ListFor ^( Target exprlist ) ^( Iter testlist ) ( ^( Ifs list_iter ) )? )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:788:12: ^( ListFor ^( Target exprlist ) ^( Iter testlist ) ( ^( Ifs list_iter ) )? )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(ListFor, "ListFor"), root_1);

                // /Users/frank/tmp/trunk/jython/grammar/Python.g:788:22: ^( Target exprlist )
                {
                PythonTree root_2 = (PythonTree)adaptor.nil();
                root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Target, "Target"), root_2);

                adaptor.addChild(root_2, stream_exprlist.next());

                adaptor.addChild(root_1, root_2);
                }
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:788:41: ^( Iter testlist )
                {
                PythonTree root_2 = (PythonTree)adaptor.nil();
                root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Iter, "Iter"), root_2);

                adaptor.addChild(root_2, stream_testlist.next());

                adaptor.addChild(root_1, root_2);
                }
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:788:58: ( ^( Ifs list_iter ) )?
                if ( stream_list_iter.hasNext() ) {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:788:58: ^( Ifs list_iter )
                    {
                    PythonTree root_2 = (PythonTree)adaptor.nil();
                    root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Ifs, "Ifs"), root_2);

                    adaptor.addChild(root_2, stream_list_iter.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_list_iter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end list_for

    public static class list_if_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start list_if
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:792:1: list_if : 'if' test ( list_iter )? -> ^( ListIf ^( Target test ) ( Ifs list_iter )? ) ;
    public final list_if_return list_if() throws RecognitionException {
        list_if_return retval = new list_if_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal356=null;
        test_return test357 = null;

        list_iter_return list_iter358 = null;


        PythonTree string_literal356_tree=null;
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleSubtreeStream stream_list_iter=new RewriteRuleSubtreeStream(adaptor,"rule list_iter");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:792:9: ( 'if' test ( list_iter )? -> ^( ListIf ^( Target test ) ( Ifs list_iter )? ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:792:11: 'if' test ( list_iter )?
            {
            string_literal356=(Token)input.LT(1);
            match(input,184,FOLLOW_184_in_list_if6967); if (failed) return retval;
            if ( backtracking==0 ) stream_184.add(string_literal356);

            pushFollow(FOLLOW_test_in_list_if6969);
            test357=test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_test.add(test357.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:792:21: ( list_iter )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==184||LA129_0==188) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:792:22: list_iter
                    {
                    pushFollow(FOLLOW_list_iter_in_list_if6972);
                    list_iter358=list_iter();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_list_iter.add(list_iter358.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: test, list_iter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 793:8: -> ^( ListIf ^( Target test ) ( Ifs list_iter )? )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:793:11: ^( ListIf ^( Target test ) ( Ifs list_iter )? )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(ListIf, "ListIf"), root_1);

                // /Users/frank/tmp/trunk/jython/grammar/Python.g:793:20: ^( Target test )
                {
                PythonTree root_2 = (PythonTree)adaptor.nil();
                root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Target, "Target"), root_2);

                adaptor.addChild(root_2, stream_test.next());

                adaptor.addChild(root_1, root_2);
                }
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:793:35: ( Ifs list_iter )?
                if ( stream_list_iter.hasNext() ) {
                    adaptor.addChild(root_1, adaptor.create(Ifs, "Ifs"));
                    adaptor.addChild(root_1, stream_list_iter.next());

                }
                stream_list_iter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end list_if

    public static class gen_iter_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start gen_iter
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:797:1: gen_iter : ( gen_for | gen_if );
    public final gen_iter_return gen_iter() throws RecognitionException {
        gen_iter_return retval = new gen_iter_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        gen_for_return gen_for359 = null;

        gen_if_return gen_if360 = null;



        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:797:9: ( gen_for | gen_if )
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==188) ) {
                alt130=1;
            }
            else if ( (LA130_0==184) ) {
                alt130=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("797:1: gen_iter : ( gen_for | gen_if );", 130, 0, input);

                throw nvae;
            }
            switch (alt130) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:797:11: gen_for
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_gen_for_in_gen_iter7017);
                    gen_for359=gen_for();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, gen_for359.getTree());

                    }
                    break;
                case 2 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:798:11: gen_if
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_gen_if_in_gen_iter7029);
                    gen_if360=gen_if();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, gen_if360.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end gen_iter

    public static class gen_for_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start gen_for
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:802:1: gen_for : 'for' exprlist 'in' or_test ( gen_iter )? -> ^( GenFor ^( Target exprlist ) ^( Iter or_test ) ( ^( Ifs gen_iter ) )? ) ;
    public final gen_for_return gen_for() throws RecognitionException {
        gen_for_return retval = new gen_for_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal361=null;
        Token string_literal363=null;
        exprlist_return exprlist362 = null;

        or_test_return or_test364 = null;

        gen_iter_return gen_iter365 = null;


        PythonTree string_literal361_tree=null;
        PythonTree string_literal363_tree=null;
        RewriteRuleTokenStream stream_188=new RewriteRuleTokenStream(adaptor,"token 188");
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleSubtreeStream stream_or_test=new RewriteRuleSubtreeStream(adaptor,"rule or_test");
        RewriteRuleSubtreeStream stream_gen_iter=new RewriteRuleSubtreeStream(adaptor,"rule gen_iter");
        RewriteRuleSubtreeStream stream_exprlist=new RewriteRuleSubtreeStream(adaptor,"rule exprlist");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:802:8: ( 'for' exprlist 'in' or_test ( gen_iter )? -> ^( GenFor ^( Target exprlist ) ^( Iter or_test ) ( ^( Ifs gen_iter ) )? ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:802:10: 'for' exprlist 'in' or_test ( gen_iter )?
            {
            string_literal361=(Token)input.LT(1);
            match(input,188,FOLLOW_188_in_gen_for7046); if (failed) return retval;
            if ( backtracking==0 ) stream_188.add(string_literal361);

            pushFollow(FOLLOW_exprlist_in_gen_for7048);
            exprlist362=exprlist();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprlist.add(exprlist362.getTree());
            string_literal363=(Token)input.LT(1);
            match(input,182,FOLLOW_182_in_gen_for7050); if (failed) return retval;
            if ( backtracking==0 ) stream_182.add(string_literal363);

            pushFollow(FOLLOW_or_test_in_gen_for7052);
            or_test364=or_test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_or_test.add(or_test364.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:802:38: ( gen_iter )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==184||LA131_0==188) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:802:38: gen_iter
                    {
                    pushFollow(FOLLOW_gen_iter_in_gen_for7054);
                    gen_iter365=gen_iter();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_gen_iter.add(gen_iter365.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: gen_iter, or_test, exprlist
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 803:7: -> ^( GenFor ^( Target exprlist ) ^( Iter or_test ) ( ^( Ifs gen_iter ) )? )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:803:10: ^( GenFor ^( Target exprlist ) ^( Iter or_test ) ( ^( Ifs gen_iter ) )? )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(GenFor, "GenFor"), root_1);

                // /Users/frank/tmp/trunk/jython/grammar/Python.g:803:19: ^( Target exprlist )
                {
                PythonTree root_2 = (PythonTree)adaptor.nil();
                root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Target, "Target"), root_2);

                adaptor.addChild(root_2, stream_exprlist.next());

                adaptor.addChild(root_1, root_2);
                }
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:803:38: ^( Iter or_test )
                {
                PythonTree root_2 = (PythonTree)adaptor.nil();
                root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Iter, "Iter"), root_2);

                adaptor.addChild(root_2, stream_or_test.next());

                adaptor.addChild(root_1, root_2);
                }
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:803:54: ( ^( Ifs gen_iter ) )?
                if ( stream_gen_iter.hasNext() ) {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:803:54: ^( Ifs gen_iter )
                    {
                    PythonTree root_2 = (PythonTree)adaptor.nil();
                    root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Ifs, "Ifs"), root_2);

                    adaptor.addChild(root_2, stream_gen_iter.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_gen_iter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end gen_for

    public static class gen_if_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start gen_if
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:807:1: gen_if : 'if' test ( gen_iter )? -> ^( GenIf ^( Target test ) ( ^( Ifs gen_iter ) )? ) ;
    public final gen_if_return gen_if() throws RecognitionException {
        gen_if_return retval = new gen_if_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal366=null;
        test_return test367 = null;

        gen_iter_return gen_iter368 = null;


        PythonTree string_literal366_tree=null;
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleSubtreeStream stream_gen_iter=new RewriteRuleSubtreeStream(adaptor,"rule gen_iter");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:807:7: ( 'if' test ( gen_iter )? -> ^( GenIf ^( Target test ) ( ^( Ifs gen_iter ) )? ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:807:9: 'if' test ( gen_iter )?
            {
            string_literal366=(Token)input.LT(1);
            match(input,184,FOLLOW_184_in_gen_if7102); if (failed) return retval;
            if ( backtracking==0 ) stream_184.add(string_literal366);

            pushFollow(FOLLOW_test_in_gen_if7104);
            test367=test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_test.add(test367.getTree());
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:807:19: ( gen_iter )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==184||LA132_0==188) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:807:19: gen_iter
                    {
                    pushFollow(FOLLOW_gen_iter_in_gen_if7106);
                    gen_iter368=gen_iter();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_gen_iter.add(gen_iter368.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: gen_iter, test
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 808:6: -> ^( GenIf ^( Target test ) ( ^( Ifs gen_iter ) )? )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:808:9: ^( GenIf ^( Target test ) ( ^( Ifs gen_iter ) )? )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(GenIf, "GenIf"), root_1);

                // /Users/frank/tmp/trunk/jython/grammar/Python.g:808:17: ^( Target test )
                {
                PythonTree root_2 = (PythonTree)adaptor.nil();
                root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Target, "Target"), root_2);

                adaptor.addChild(root_2, stream_test.next());

                adaptor.addChild(root_1, root_2);
                }
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:808:32: ( ^( Ifs gen_iter ) )?
                if ( stream_gen_iter.hasNext() ) {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:808:32: ^( Ifs gen_iter )
                    {
                    PythonTree root_2 = (PythonTree)adaptor.nil();
                    root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Ifs, "Ifs"), root_2);

                    adaptor.addChild(root_2, stream_gen_iter.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_gen_iter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end gen_if

    public static class yield_expr_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start yield_expr
    // /Users/frank/tmp/trunk/jython/grammar/Python.g:812:1: yield_expr : 'yield' ( testlist )? -> ^( Yield ( ^( Value testlist ) )? ) ;
    public final yield_expr_return yield_expr() throws RecognitionException {
        yield_expr_return retval = new yield_expr_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal369=null;
        testlist_return testlist370 = null;


        PythonTree string_literal369_tree=null;
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleSubtreeStream stream_testlist=new RewriteRuleSubtreeStream(adaptor,"rule testlist");
        try {
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:812:12: ( 'yield' ( testlist )? -> ^( Yield ( ^( Value testlist ) )? ) )
            // /Users/frank/tmp/trunk/jython/grammar/Python.g:812:14: 'yield' ( testlist )?
            {
            string_literal369=(Token)input.LT(1);
            match(input,196,FOLLOW_196_in_yield_expr7147); if (failed) return retval;
            if ( backtracking==0 ) stream_196.add(string_literal369);

            // /Users/frank/tmp/trunk/jython/grammar/Python.g:812:22: ( testlist )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==LPAREN||LA133_0==NAME||LA133_0==NOT||(LA133_0>=PLUS && LA133_0<=MINUS)||(LA133_0>=TILDE && LA133_0<=LBRACK)||LA133_0==LCURLY||(LA133_0>=BACKQUOTE && LA133_0<=STRING)||LA133_0==194) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:812:22: testlist
                    {
                    pushFollow(FOLLOW_testlist_in_yield_expr7149);
                    testlist370=testlist();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_testlist.add(testlist370.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: testlist
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (PythonTree)adaptor.nil();
            // 813:11: -> ^( Yield ( ^( Value testlist ) )? )
            {
                // /Users/frank/tmp/trunk/jython/grammar/Python.g:813:14: ^( Yield ( ^( Value testlist ) )? )
                {
                PythonTree root_1 = (PythonTree)adaptor.nil();
                root_1 = (PythonTree)adaptor.becomeRoot(adaptor.create(Yield, "Yield"), root_1);

                // /Users/frank/tmp/trunk/jython/grammar/Python.g:813:22: ( ^( Value testlist ) )?
                if ( stream_testlist.hasNext() ) {
                    // /Users/frank/tmp/trunk/jython/grammar/Python.g:813:22: ^( Value testlist )
                    {
                    PythonTree root_2 = (PythonTree)adaptor.nil();
                    root_2 = (PythonTree)adaptor.becomeRoot(adaptor.create(Value, "Value"), root_2);

                    adaptor.addChild(root_2, stream_testlist.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_testlist.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end yield_expr

    // $ANTLR start synpred1
    public final void synpred1_fragment() throws RecognitionException {   
        // /Users/frank/tmp/trunk/jython/grammar/Python.g:399:7: ( test COMMA )
        // /Users/frank/tmp/trunk/jython/grammar/Python.g:399:8: test COMMA
        {
        pushFollow(FOLLOW_test_in_synpred12528);
        test();
        _fsp--;
        if (failed) return ;
        match(input,COMMA,FOLLOW_COMMA_in_synpred12530); if (failed) return ;

        }
    }
    // $ANTLR end synpred1

    // $ANTLR start synpred2
    public final void synpred2_fragment() throws RecognitionException {   
        // /Users/frank/tmp/trunk/jython/grammar/Python.g:579:7: ( 'if' or_test 'else' )
        // /Users/frank/tmp/trunk/jython/grammar/Python.g:579:8: 'if' or_test 'else'
        {
        match(input,184,FOLLOW_184_in_synpred24544); if (failed) return ;
        pushFollow(FOLLOW_or_test_in_synpred24546);
        or_test();
        _fsp--;
        if (failed) return ;
        match(input,185,FOLLOW_185_in_synpred24548); if (failed) return ;

        }
    }
    // $ANTLR end synpred2

    // $ANTLR start synpred3
    public final void synpred3_fragment() throws RecognitionException {   
        // /Users/frank/tmp/trunk/jython/grammar/Python.g:718:13: ( test COLON )
        // /Users/frank/tmp/trunk/jython/grammar/Python.g:718:14: test COLON
        {
        pushFollow(FOLLOW_test_in_synpred35994);
        test();
        _fsp--;
        if (failed) return ;
        match(input,COLON,FOLLOW_COLON_in_synpred35996); if (failed) return ;

        }
    }
    // $ANTLR end synpred3

    // $ANTLR start synpred4
    public final void synpred4_fragment() throws RecognitionException {   
        // /Users/frank/tmp/trunk/jython/grammar/Python.g:719:13: ( COLON )
        // /Users/frank/tmp/trunk/jython/grammar/Python.g:719:14: COLON
        {
        match(input,COLON,FOLLOW_COLON_in_synpred46066); if (failed) return ;

        }
    }
    // $ANTLR end synpred4

    // $ANTLR start synpred5
    public final void synpred5_fragment() throws RecognitionException {   
        // /Users/frank/tmp/trunk/jython/grammar/Python.g:728:12: ( expr COMMA )
        // /Users/frank/tmp/trunk/jython/grammar/Python.g:728:13: expr COMMA
        {
        pushFollow(FOLLOW_expr_in_synpred56185);
        expr();
        _fsp--;
        if (failed) return ;
        match(input,COMMA,FOLLOW_COMMA_in_synpred56187); if (failed) return ;

        }
    }
    // $ANTLR end synpred5

    public final boolean synpred4() {
        backtracking++;
        int start = input.mark();
        try {
            synpred4_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred2() {
        backtracking++;
        int start = input.mark();
        try {
            synpred2_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred3() {
        backtracking++;
        int start = input.mark();
        try {
            synpred3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred1() {
        backtracking++;
        int start = input.mark();
        try {
            synpred1_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred5() {
        backtracking++;
        int start = input.mark();
        try {
            synpred5_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }


    protected DFA32 dfa32 = new DFA32(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA107 dfa107 = new DFA107(this);
    static final String DFA32_eotS =
        "\u00f5\uffff";
    static final String DFA32_eofS =
        "\u00f5\uffff";
    static final String DFA32_minS =
        "\5\153\12\0\1\153\1\0\3\153\13\0\2\153\12\0\1\153\1\0\1\153\12\0"+
        "\2\153\13\0\12\uffff\1\157\4\0\2\uffff\47\0\14\uffff\32\0\10\uffff"+
        "\15\0\2\uffff\15\0\10\uffff\32\0\12\uffff\2\0";
    static final String DFA32_maxS =
        "\1\u00c2\4\u009f\12\0\1\162\1\0\3\u009f\13\0\2\u009f\12\0\1\u009f"+
        "\1\0\1\u009f\12\0\2\u009f\13\0\12\uffff\1\163\4\0\2\uffff\47\0\14"+
        "\uffff\32\0\10\uffff\15\0\2\uffff\15\0\10\uffff\32\0\12\uffff\2"+
        "\0";
    static final String DFA32_acceptS =
        "\105\uffff\1\1\1\2\1\1\1\2\1\1\1\2\1\1\1\2\1\1\1\2\5\uffff\1\1\1"+
        "\2\47\uffff\1\1\1\2\1\1\1\2\1\1\1\2\1\1\1\2\1\1\1\2\1\1\1\2\32\uffff"+
        "\1\1\1\2\1\1\1\2\1\1\1\2\1\1\1\2\15\uffff\1\1\1\2\15\uffff\1\1\1"+
        "\2\1\1\1\2\1\1\1\2\1\1\1\2\32\uffff\1\1\1\2\1\1\1\2\1\1\1\2\1\1"+
        "\1\2\1\1\1\2\2\uffff";
    static final String DFA32_specialS =
        "\5\uffff\1\50\1\10\1\25\1\13\1\33\1\22\1\65\1\32\1\5\1\36\1\uffff"+
        "\1\35\3\uffff\1\42\1\7\1\12\1\63\1\31\1\21\1\51\1\57\1\1\1\52\1"+
        "\4\2\uffff\1\43\1\17\1\26\1\64\1\53\1\2\1\34\1\45\1\30\1\15\1\uffff"+
        "\1\54\1\uffff\1\44\1\11\1\14\1\62\1\46\1\56\1\55\1\0\1\27\1\16\2"+
        "\uffff\1\37\1\41\1\6\1\24\1\61\1\3\1\60\1\40\1\47\1\20\1\23\u00b0"+
        "\uffff}>";
    static final String[] DFA32_transitionS = {
            "\1\5\1\uffff\1\11\26\uffff\1\1\13\uffff\1\2\1\3\3\uffff\1\4"+
            "\1\6\1\uffff\1\7\1\uffff\1\10\1\12\1\13\1\14\1\15\1\16\42\uffff"+
            "\1\17",
            "\1\24\1\uffff\1\30\26\uffff\1\20\13\uffff\1\21\1\22\3\uffff"+
            "\1\23\1\25\1\uffff\1\26\1\uffff\1\27\1\31\1\32\1\33\1\34\1\35",
            "\1\41\1\uffff\1\45\42\uffff\1\36\1\37\3\uffff\1\40\1\42\1\uffff"+
            "\1\43\1\uffff\1\44\1\46\1\47\1\50\1\51\1\52",
            "\1\56\1\uffff\1\62\42\uffff\1\53\1\54\3\uffff\1\55\1\57\1\uffff"+
            "\1\60\1\uffff\1\61\1\63\1\64\1\65\1\66\1\67",
            "\1\73\1\uffff\1\77\42\uffff\1\70\1\71\3\uffff\1\72\1\74\1\uffff"+
            "\1\75\1\uffff\1\76\1\100\1\101\1\102\1\103\1\104",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\120\1\uffff\1\117\1\uffff\1\123\1\uffff\1\121\1\122",
            "\1\uffff",
            "\1\131\1\uffff\1\135\42\uffff\1\126\1\127\3\uffff\1\130\1\132"+
            "\1\uffff\1\133\1\uffff\1\134\1\136\1\137\1\140\1\141\1\142",
            "\1\146\1\uffff\1\152\42\uffff\1\143\1\144\3\uffff\1\145\1\147"+
            "\1\uffff\1\150\1\uffff\1\151\1\153\1\154\1\155\1\156\1\157",
            "\1\163\1\uffff\1\167\42\uffff\1\160\1\161\3\uffff\1\162\1\164"+
            "\1\uffff\1\165\1\uffff\1\166\1\170\1\171\1\172\1\173\1\174",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u008c\1\uffff\1\u0090\42\uffff\1\u0089\1\u008a\3\uffff\1"+
            "\u008b\1\u008d\1\uffff\1\u008e\1\uffff\1\u008f\1\u0091\1\u0092"+
            "\1\u0093\1\u0094\1\u0095",
            "\1\u0099\1\uffff\1\u009d\42\uffff\1\u0096\1\u0097\3\uffff\1"+
            "\u0098\1\u009a\1\uffff\1\u009b\1\uffff\1\u009c\1\u009e\1\u009f"+
            "\1\u00a0\1\u00a1\1\u00a2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u00ae\1\uffff\1\u00b2\42\uffff\1\u00ab\1\u00ac\3\uffff\1"+
            "\u00ad\1\u00af\1\uffff\1\u00b0\1\uffff\1\u00b1\1\u00b3\1\u00b4"+
            "\1\u00b5\1\u00b6\1\u00b7",
            "\1\uffff",
            "\1\u00bd\1\uffff\1\u00c1\42\uffff\1\u00ba\1\u00bb\3\uffff\1"+
            "\u00bc\1\u00be\1\uffff\1\u00bf\1\uffff\1\u00c0\1\u00c2\1\u00c3"+
            "\1\u00c4\1\u00c5\1\u00c6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u00d2\1\uffff\1\u00d6\42\uffff\1\u00cf\1\u00d0\3\uffff\1"+
            "\u00d1\1\u00d3\1\uffff\1\u00d4\1\uffff\1\u00d5\1\u00d7\1\u00d8"+
            "\1\u00d9\1\u00da\1\u00db",
            "\1\u00df\1\uffff\1\u00e3\42\uffff\1\u00dc\1\u00dd\3\uffff\1"+
            "\u00de\1\u00e0\1\uffff\1\u00e1\1\uffff\1\u00e2\1\u00e4\1\u00e5"+
            "\1\u00e6\1\u00e7\1\u00e8",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\123\1\u00f4\2\uffff\1\u00f3",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_eotS);
    static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_eofS);
    static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_minS);
    static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_maxS);
    static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_acceptS);
    static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_specialS);
    static final short[][] DFA32_transition;

    static {
        int numStates = DFA32_transitionS.length;
        DFA32_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA32_transition[i] = DFA.unpackEncodedString(DFA32_transitionS[i]);
        }
    }

    class DFA32 extends DFA {

        public DFA32(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 32;
            this.eot = DFA32_eot;
            this.eof = DFA32_eof;
            this.min = DFA32_min;
            this.max = DFA32_max;
            this.accept = DFA32_accept;
            this.special = DFA32_special;
            this.transition = DFA32_transition;
        }
        public String getDescription() {
            return "398:1: printlist returns [boolean newline] : ( ( test COMMA )=> test ( options {k=2; } : COMMA test )* (trailcomma= COMMA )? -> ^( Elts ( test )+ ) | test -> ^( Elts test ) );";
        }
        public int specialStateTransition(int s, IntStream input) throws NoViableAltException {
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA32_53 = input.LA(1);

                         
                        int index32_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index32_53);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA32_28 = input.LA(1);

                         
                        int index32_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 133;}

                        else if ( (true) ) {s = 134;}

                         
                        input.seek(index32_28);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA32_38 = input.LA(1);

                         
                        int index32_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index32_38);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA32_63 = input.LA(1);

                         
                        int index32_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index32_63);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA32_30 = input.LA(1);

                         
                        int index32_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 135;}

                        else if ( (true) ) {s = 136;}

                         
                        input.seek(index32_30);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA32_13 = input.LA(1);

                         
                        int index32_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index32_13);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA32_60 = input.LA(1);

                         
                        int index32_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 237;}

                        else if ( (true) ) {s = 238;}

                         
                        input.seek(index32_60);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA32_21 = input.LA(1);

                         
                        int index32_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 127;}

                        else if ( (true) ) {s = 128;}

                         
                        input.seek(index32_21);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA32_6 = input.LA(1);

                         
                        int index32_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index32_6);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA32_47 = input.LA(1);

                         
                        int index32_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 201;}

                        else if ( (true) ) {s = 202;}

                         
                        input.seek(index32_47);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA32_22 = input.LA(1);

                         
                        int index32_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 129;}

                        else if ( (true) ) {s = 130;}

                         
                        input.seek(index32_22);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA32_8 = input.LA(1);

                         
                        int index32_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index32_8);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA32_48 = input.LA(1);

                         
                        int index32_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 203;}

                        else if ( (true) ) {s = 204;}

                         
                        input.seek(index32_48);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA32_42 = input.LA(1);

                         
                        int index32_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index32_42);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA32_55 = input.LA(1);

                         
                        int index32_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index32_55);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA32_34 = input.LA(1);

                         
                        int index32_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 165;}

                        else if ( (true) ) {s = 166;}

                         
                        input.seek(index32_34);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA32_67 = input.LA(1);

                         
                        int index32_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index32_67);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA32_25 = input.LA(1);

                         
                        int index32_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 133;}

                        else if ( (true) ) {s = 134;}

                         
                        input.seek(index32_25);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA32_10 = input.LA(1);

                         
                        int index32_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index32_10);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA32_68 = input.LA(1);

                         
                        int index32_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index32_68);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA32_61 = input.LA(1);

                         
                        int index32_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 239;}

                        else if ( (true) ) {s = 240;}

                         
                        input.seek(index32_61);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA32_7 = input.LA(1);

                         
                        int index32_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 73;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index32_7);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA32_35 = input.LA(1);

                         
                        int index32_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 167;}

                        else if ( (true) ) {s = 168;}

                         
                        input.seek(index32_35);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA32_54 = input.LA(1);

                         
                        int index32_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index32_54);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA32_41 = input.LA(1);

                         
                        int index32_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index32_41);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA32_24 = input.LA(1);

                         
                        int index32_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 133;}

                        else if ( (true) ) {s = 134;}

                         
                        input.seek(index32_24);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA32_12 = input.LA(1);

                         
                        int index32_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index32_12);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA32_9 = input.LA(1);

                         
                        int index32_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index32_9);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA32_39 = input.LA(1);

                         
                        int index32_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index32_39);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA32_16 = input.LA(1);

                         
                        int index32_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 84;}

                        else if ( (true) ) {s = 85;}

                         
                        input.seek(index32_16);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA32_14 = input.LA(1);

                         
                        int index32_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index32_14);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA32_58 = input.LA(1);

                         
                        int index32_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 233;}

                        else if ( (true) ) {s = 234;}

                         
                        input.seek(index32_58);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA32_65 = input.LA(1);

                         
                        int index32_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index32_65);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA32_59 = input.LA(1);

                         
                        int index32_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 235;}

                        else if ( (true) ) {s = 236;}

                         
                        input.seek(index32_59);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA32_20 = input.LA(1);

                         
                        int index32_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 125;}

                        else if ( (true) ) {s = 126;}

                         
                        input.seek(index32_20);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA32_33 = input.LA(1);

                         
                        int index32_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 163;}

                        else if ( (true) ) {s = 164;}

                         
                        input.seek(index32_33);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA32_46 = input.LA(1);

                         
                        int index32_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 199;}

                        else if ( (true) ) {s = 200;}

                         
                        input.seek(index32_46);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA32_40 = input.LA(1);

                         
                        int index32_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index32_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA32_50 = input.LA(1);

                         
                        int index32_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index32_50);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA32_66 = input.LA(1);

                         
                        int index32_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index32_66);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA32_5 = input.LA(1);

                         
                        int index32_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index32_5);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA32_26 = input.LA(1);

                         
                        int index32_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 133;}

                        else if ( (true) ) {s = 134;}

                         
                        input.seek(index32_26);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA32_29 = input.LA(1);

                         
                        int index32_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 133;}

                        else if ( (true) ) {s = 134;}

                         
                        input.seek(index32_29);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA32_37 = input.LA(1);

                         
                        int index32_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index32_37);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA32_44 = input.LA(1);

                         
                        int index32_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 184;}

                        else if ( (true) ) {s = 185;}

                         
                        input.seek(index32_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA32_52 = input.LA(1);

                         
                        int index32_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index32_52);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA32_51 = input.LA(1);

                         
                        int index32_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index32_51);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA32_27 = input.LA(1);

                         
                        int index32_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 133;}

                        else if ( (true) ) {s = 134;}

                         
                        input.seek(index32_27);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA32_64 = input.LA(1);

                         
                        int index32_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index32_64);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA32_62 = input.LA(1);

                         
                        int index32_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 241;}

                        else if ( (true) ) {s = 242;}

                         
                        input.seek(index32_62);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA32_49 = input.LA(1);

                         
                        int index32_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 205;}

                        else if ( (true) ) {s = 206;}

                         
                        input.seek(index32_49);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA32_23 = input.LA(1);

                         
                        int index32_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 131;}

                        else if ( (true) ) {s = 132;}

                         
                        input.seek(index32_23);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA32_36 = input.LA(1);

                         
                        int index32_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 169;}

                        else if ( (true) ) {s = 170;}

                         
                        input.seek(index32_36);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA32_11 = input.LA(1);

                         
                        int index32_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index32_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (backtracking>0) {failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 32, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA41_eotS =
        "\4\uffff";
    static final String DFA41_eofS =
        "\4\uffff";
    static final String DFA41_minS =
        "\2\155\2\uffff";
    static final String DFA41_maxS =
        "\1\156\1\u00b1\2\uffff";
    static final String DFA41_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA41_specialS =
        "\4\uffff}>";
    static final String[] DFA41_transitionS = {
            "\1\2\1\1",
            "\1\2\1\1\102\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA41_eot = DFA.unpackEncodedString(DFA41_eotS);
    static final short[] DFA41_eof = DFA.unpackEncodedString(DFA41_eofS);
    static final char[] DFA41_min = DFA.unpackEncodedStringToUnsignedChars(DFA41_minS);
    static final char[] DFA41_max = DFA.unpackEncodedStringToUnsignedChars(DFA41_maxS);
    static final short[] DFA41_accept = DFA.unpackEncodedString(DFA41_acceptS);
    static final short[] DFA41_special = DFA.unpackEncodedString(DFA41_specialS);
    static final short[][] DFA41_transition;

    static {
        int numStates = DFA41_transitionS.length;
        DFA41_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA41_transition[i] = DFA.unpackEncodedString(DFA41_transitionS[i]);
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;
        }
        public String getDescription() {
            return "466:21: ( ( DOT )* dotted_name | ( DOT )+ )";
        }
    }
    static final String DFA107_eotS =
        "\u00f9\uffff";
    static final String DFA107_eofS =
        "\u00f9\uffff";
    static final String DFA107_minS =
        "\1\153\1\uffff\4\153\12\0\1\153\1\uffff\1\0\3\153\13\0\2\153\12"+
        "\0\1\153\1\0\1\153\12\0\2\153\13\0\13\uffff\1\157\4\0\2\uffff\47"+
        "\0\15\uffff\32\0\10\uffff\15\0\2\uffff\15\0\10\uffff\32\0\12\uffff"+
        "\2\0";
    static final String DFA107_maxS =
        "\1\u00c2\1\uffff\4\u009f\12\0\1\162\1\uffff\1\0\3\u009f\13\0\2\u009f"+
        "\12\0\1\u009f\1\0\1\u009f\12\0\2\u009f\13\0\13\uffff\1\163\4\0\2"+
        "\uffff\47\0\15\uffff\32\0\10\uffff\15\0\2\uffff\15\0\10\uffff\32"+
        "\0\12\uffff\2\0";
    static final String DFA107_acceptS =
        "\1\uffff\1\1\17\uffff\1\3\65\uffff\1\2\1\4\1\2\1\4\1\2\1\4\1\2\1"+
        "\4\1\2\1\4\1\2\5\uffff\1\2\1\4\47\uffff\1\2\1\4\1\2\1\4\1\2\1\4"+
        "\1\2\1\4\1\2\1\4\2\2\1\4\32\uffff\1\2\1\4\1\2\1\4\1\2\1\4\1\2\1"+
        "\4\15\uffff\1\2\1\4\15\uffff\1\2\1\4\1\2\1\4\1\2\1\4\1\2\1\4\32"+
        "\uffff\1\2\1\4\1\2\1\4\1\2\1\4\1\2\1\4\1\2\1\4\2\uffff";
    static final String DFA107_specialS =
        "\1\15\5\uffff\1\13\1\24\1\34\1\1\1\63\1\47\1\53\1\17\1\41\1\14\2"+
        "\uffff\1\30\3\uffff\1\46\1\6\1\27\1\2\1\36\1\43\1\55\1\12\1\64\1"+
        "\31\1\7\2\uffff\1\50\1\25\1\35\1\62\1\10\1\4\1\54\1\60\1\40\1\57"+
        "\1\uffff\1\3\1\uffff\1\51\1\5\1\33\1\61\1\56\1\42\1\37\1\65\1\44"+
        "\1\16\2\uffff\1\32\1\11\1\23\1\26\1\0\1\45\1\66\1\52\1\20\1\22\1"+
        "\21\u00b2\uffff}>";
    static final String[] DFA107_transitionS = {
            "\1\6\1\uffff\1\12\1\1\1\21\24\uffff\1\2\13\uffff\1\3\1\4\3\uffff"+
            "\1\5\1\7\1\uffff\1\10\1\uffff\1\11\1\13\1\14\1\15\1\16\1\17"+
            "\42\uffff\1\20",
            "",
            "\1\26\1\uffff\1\32\26\uffff\1\22\13\uffff\1\23\1\24\3\uffff"+
            "\1\25\1\27\1\uffff\1\30\1\uffff\1\31\1\33\1\34\1\35\1\36\1\37",
            "\1\43\1\uffff\1\47\42\uffff\1\40\1\41\3\uffff\1\42\1\44\1\uffff"+
            "\1\45\1\uffff\1\46\1\50\1\51\1\52\1\53\1\54",
            "\1\60\1\uffff\1\64\42\uffff\1\55\1\56\3\uffff\1\57\1\61\1\uffff"+
            "\1\62\1\uffff\1\63\1\65\1\66\1\67\1\70\1\71",
            "\1\75\1\uffff\1\101\42\uffff\1\72\1\73\3\uffff\1\74\1\76\1\uffff"+
            "\1\77\1\uffff\1\100\1\102\1\103\1\104\1\105\1\106",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\123\1\uffff\1\122\1\uffff\1\126\1\uffff\1\124\1\125",
            "",
            "\1\uffff",
            "\1\134\1\uffff\1\140\42\uffff\1\131\1\132\3\uffff\1\133\1\135"+
            "\1\uffff\1\136\1\uffff\1\137\1\141\1\142\1\143\1\144\1\145",
            "\1\151\1\uffff\1\155\42\uffff\1\146\1\147\3\uffff\1\150\1\152"+
            "\1\uffff\1\153\1\uffff\1\154\1\156\1\157\1\160\1\161\1\162",
            "\1\166\1\uffff\1\172\42\uffff\1\163\1\164\3\uffff\1\165\1\167"+
            "\1\uffff\1\170\1\uffff\1\171\1\173\1\174\1\175\1\176\1\177",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u0090\1\uffff\1\u0094\42\uffff\1\u008d\1\u008e\3\uffff\1"+
            "\u008f\1\u0091\1\uffff\1\u0092\1\uffff\1\u0093\1\u0095\1\u0096"+
            "\1\u0097\1\u0098\1\u0099",
            "\1\u009d\1\uffff\1\u00a1\42\uffff\1\u009a\1\u009b\3\uffff\1"+
            "\u009c\1\u009e\1\uffff\1\u009f\1\uffff\1\u00a0\1\u00a2\1\u00a3"+
            "\1\u00a4\1\u00a5\1\u00a6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u00b2\1\uffff\1\u00b6\42\uffff\1\u00af\1\u00b0\3\uffff\1"+
            "\u00b1\1\u00b3\1\uffff\1\u00b4\1\uffff\1\u00b5\1\u00b7\1\u00b8"+
            "\1\u00b9\1\u00ba\1\u00bb",
            "\1\uffff",
            "\1\u00c1\1\uffff\1\u00c5\42\uffff\1\u00be\1\u00bf\3\uffff\1"+
            "\u00c0\1\u00c2\1\uffff\1\u00c3\1\uffff\1\u00c4\1\u00c6\1\u00c7"+
            "\1\u00c8\1\u00c9\1\u00ca",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u00d6\1\uffff\1\u00da\42\uffff\1\u00d3\1\u00d4\3\uffff\1"+
            "\u00d5\1\u00d7\1\uffff\1\u00d8\1\uffff\1\u00d9\1\u00db\1\u00dc"+
            "\1\u00dd\1\u00de\1\u00df",
            "\1\u00e3\1\uffff\1\u00e7\42\uffff\1\u00e0\1\u00e1\3\uffff\1"+
            "\u00e2\1\u00e4\1\uffff\1\u00e5\1\uffff\1\u00e6\1\u00e8\1\u00e9"+
            "\1\u00ea\1\u00eb\1\u00ec",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\126\1\u00f8\2\uffff\1\u00f7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA107_eot = DFA.unpackEncodedString(DFA107_eotS);
    static final short[] DFA107_eof = DFA.unpackEncodedString(DFA107_eofS);
    static final char[] DFA107_min = DFA.unpackEncodedStringToUnsignedChars(DFA107_minS);
    static final char[] DFA107_max = DFA.unpackEncodedStringToUnsignedChars(DFA107_maxS);
    static final short[] DFA107_accept = DFA.unpackEncodedString(DFA107_acceptS);
    static final short[] DFA107_special = DFA.unpackEncodedString(DFA107_specialS);
    static final short[][] DFA107_transition;

    static {
        int numStates = DFA107_transitionS.length;
        DFA107_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA107_transition[i] = DFA.unpackEncodedString(DFA107_transitionS[i]);
        }
    }

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = DFA107_eot;
            this.eof = DFA107_eof;
            this.min = DFA107_min;
            this.max = DFA107_max;
            this.accept = DFA107_accept;
            this.special = DFA107_special;
            this.transition = DFA107_transition;
        }
        public String getDescription() {
            return "717:1: subscript : ( DOT DOT DOT -> Ellipsis | ( test COLON )=>t1= test ( COLON (t2= test )? ( sliceop )? )? -> ^( Subscript ^( Lower $t1) ( ^( Upper COLON ( ^( UpperOp $t2) )? ) )? ( sliceop )? ) | ( COLON )=> COLON ( test )? ( sliceop )? -> ^( Subscript ( ^( Upper COLON ( ^( UpperOp test ) )? ) )? ( sliceop )? ) | test -> ^( Index test ) );";
        }
        public int specialStateTransition(int s, IntStream input) throws NoViableAltException {
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA107_64 = input.LA(1);

                         
                        int index107_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 245;}

                        else if ( (true) ) {s = 246;}

                         
                        input.seek(index107_64);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA107_9 = input.LA(1);

                         
                        int index107_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 77;}

                        else if ( (true) ) {s = 78;}

                         
                        input.seek(index107_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA107_25 = input.LA(1);

                         
                        int index107_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 134;}

                        else if ( (true) ) {s = 135;}

                         
                        input.seek(index107_25);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA107_46 = input.LA(1);

                         
                        int index107_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 188;}

                        else if ( (true) ) {s = 189;}

                         
                        input.seek(index107_46);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA107_40 = input.LA(1);

                         
                        int index107_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 79;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index107_40);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA107_49 = input.LA(1);

                         
                        int index107_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 205;}

                        else if ( (true) ) {s = 206;}

                         
                        input.seek(index107_49);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA107_23 = input.LA(1);

                         
                        int index107_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 130;}

                        else if ( (true) ) {s = 131;}

                         
                        input.seek(index107_23);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA107_32 = input.LA(1);

                         
                        int index107_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 139;}

                        else if ( (true) ) {s = 140;}

                         
                        input.seek(index107_32);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA107_39 = input.LA(1);

                         
                        int index107_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 79;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index107_39);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA107_61 = input.LA(1);

                         
                        int index107_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 239;}

                        else if ( (true) ) {s = 240;}

                         
                        input.seek(index107_61);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA107_29 = input.LA(1);

                         
                        int index107_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 136;}

                        else if ( (true) ) {s = 137;}

                         
                        input.seek(index107_29);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA107_6 = input.LA(1);

                         
                        int index107_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index107_6);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA107_15 = input.LA(1);

                         
                        int index107_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 81;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index107_15);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA107_0 = input.LA(1);

                         
                        int index107_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA107_0==DOT) ) {s = 1;}

                        else if ( (LA107_0==NOT) ) {s = 2;}

                        else if ( (LA107_0==PLUS) ) {s = 3;}

                        else if ( (LA107_0==MINUS) ) {s = 4;}

                        else if ( (LA107_0==TILDE) ) {s = 5;}

                        else if ( (LA107_0==LPAREN) ) {s = 6;}

                        else if ( (LA107_0==LBRACK) ) {s = 7;}

                        else if ( (LA107_0==LCURLY) ) {s = 8;}

                        else if ( (LA107_0==BACKQUOTE) ) {s = 9;}

                        else if ( (LA107_0==NAME) ) {s = 10;}

                        else if ( (LA107_0==INT) ) {s = 11;}

                        else if ( (LA107_0==LONGINT) ) {s = 12;}

                        else if ( (LA107_0==FLOAT) ) {s = 13;}

                        else if ( (LA107_0==COMPLEX) ) {s = 14;}

                        else if ( (LA107_0==STRING) ) {s = 15;}

                        else if ( (LA107_0==194) ) {s = 16;}

                        else if ( (LA107_0==COLON) && (synpred4())) {s = 17;}

                         
                        input.seek(index107_0);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA107_57 = input.LA(1);

                         
                        int index107_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 81;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index107_57);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA107_13 = input.LA(1);

                         
                        int index107_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 79;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index107_13);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA107_68 = input.LA(1);

                         
                        int index107_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 79;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index107_68);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA107_70 = input.LA(1);

                         
                        int index107_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 81;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index107_70);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA107_69 = input.LA(1);

                         
                        int index107_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 79;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index107_69);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA107_62 = input.LA(1);

                         
                        int index107_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 241;}

                        else if ( (true) ) {s = 242;}

                         
                        input.seek(index107_62);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA107_7 = input.LA(1);

                         
                        int index107_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 73;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index107_7);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA107_36 = input.LA(1);

                         
                        int index107_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 169;}

                        else if ( (true) ) {s = 170;}

                         
                        input.seek(index107_36);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA107_63 = input.LA(1);

                         
                        int index107_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 243;}

                        else if ( (true) ) {s = 244;}

                         
                        input.seek(index107_63);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA107_24 = input.LA(1);

                         
                        int index107_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 132;}

                        else if ( (true) ) {s = 133;}

                         
                        input.seek(index107_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA107_18 = input.LA(1);

                         
                        int index107_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 87;}

                        else if ( (true) ) {s = 88;}

                         
                        input.seek(index107_18);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA107_31 = input.LA(1);

                         
                        int index107_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 136;}

                        else if ( (true) ) {s = 137;}

                         
                        input.seek(index107_31);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA107_60 = input.LA(1);

                         
                        int index107_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 237;}

                        else if ( (true) ) {s = 238;}

                         
                        input.seek(index107_60);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA107_50 = input.LA(1);

                         
                        int index107_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 207;}

                        else if ( (true) ) {s = 208;}

                         
                        input.seek(index107_50);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA107_8 = input.LA(1);

                         
                        int index107_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 75;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index107_8);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA107_37 = input.LA(1);

                         
                        int index107_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 171;}

                        else if ( (true) ) {s = 172;}

                         
                        input.seek(index107_37);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA107_26 = input.LA(1);

                         
                        int index107_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 136;}

                        else if ( (true) ) {s = 137;}

                         
                        input.seek(index107_26);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA107_54 = input.LA(1);

                         
                        int index107_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 81;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index107_54);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA107_43 = input.LA(1);

                         
                        int index107_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 81;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index107_43);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA107_14 = input.LA(1);

                         
                        int index107_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 79;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index107_14);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA107_53 = input.LA(1);

                         
                        int index107_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 81;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index107_53);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA107_27 = input.LA(1);

                         
                        int index107_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 138;}

                        else if ( (true) ) {s = 137;}

                         
                        input.seek(index107_27);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA107_56 = input.LA(1);

                         
                        int index107_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 79;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index107_56);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA107_65 = input.LA(1);

                         
                        int index107_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 81;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index107_65);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA107_22 = input.LA(1);

                         
                        int index107_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 128;}

                        else if ( (true) ) {s = 129;}

                         
                        input.seek(index107_22);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA107_11 = input.LA(1);

                         
                        int index107_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 81;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index107_11);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA107_35 = input.LA(1);

                         
                        int index107_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 167;}

                        else if ( (true) ) {s = 168;}

                         
                        input.seek(index107_35);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA107_48 = input.LA(1);

                         
                        int index107_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 203;}

                        else if ( (true) ) {s = 204;}

                         
                        input.seek(index107_48);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA107_67 = input.LA(1);

                         
                        int index107_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 81;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index107_67);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA107_12 = input.LA(1);

                         
                        int index107_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 79;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index107_12);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA107_41 = input.LA(1);

                         
                        int index107_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 79;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index107_41);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA107_28 = input.LA(1);

                         
                        int index107_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 138;}

                        else if ( (true) ) {s = 137;}

                         
                        input.seek(index107_28);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA107_52 = input.LA(1);

                         
                        int index107_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 81;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index107_52);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA107_44 = input.LA(1);

                         
                        int index107_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 81;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index107_44);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA107_42 = input.LA(1);

                         
                        int index107_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 79;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index107_42);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA107_51 = input.LA(1);

                         
                        int index107_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 209;}

                        else if ( (true) ) {s = 210;}

                         
                        input.seek(index107_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA107_38 = input.LA(1);

                         
                        int index107_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 173;}

                        else if ( (true) ) {s = 174;}

                         
                        input.seek(index107_38);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA107_10 = input.LA(1);

                         
                        int index107_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 79;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index107_10);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA107_30 = input.LA(1);

                         
                        int index107_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 136;}

                        else if ( (true) ) {s = 137;}

                         
                        input.seek(index107_30);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA107_55 = input.LA(1);

                         
                        int index107_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 79;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index107_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA107_66 = input.LA(1);

                         
                        int index107_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 81;}

                        else if ( (true) ) {s = 80;}

                         
                        input.seek(index107_66);
                        if ( s>=0 ) return s;
                        break;
            }
            if (backtracking>0) {failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 107, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_NEWLINE_in_single_input796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_stmt_in_single_input814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_stmt_in_single_input831 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_NEWLINE_in_single_input833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWLINE_in_file_input858 = new BitSet(new long[]{0x0000000000000002L,0x00002E0000000000L,0xB9B7FE00FD630010L,0x000000000000001CL});
    public static final BitSet FOLLOW_stmt_in_file_input862 = new BitSet(new long[]{0x0000000000000002L,0x00002E0000000000L,0xB9B7FE00FD630010L,0x000000000000001CL});
    public static final BitSet FOLLOW_NEWLINE_in_eval_input907 = new BitSet(new long[]{0x0000000000000000L,0x00002A0000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_testlist_in_eval_input912 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_NEWLINE_in_eval_input915 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_decorator_in_decorators938 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_AT_in_decorator958 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_dotted_attr_in_decorator960 = new BitSet(new long[]{0x0000000000000000L,0x00000A0000000000L});
    public static final BitSet FOLLOW_LPAREN_in_decorator977 = new BitSet(new long[]{0x0000000000000000L,0x0006380000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_arglist_in_decorator979 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_decorator982 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_NEWLINE_in_decorator1038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_dotted_attr1060 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_dotted_attr1063 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_NAME_in_dotted_attr1066 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});
    public static final BitSet FOLLOW_decorators_in_funcdef1082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_169_in_funcdef1085 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_NAME_in_funcdef1087 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_parameters_in_funcdef1089 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_funcdef1091 = new BitSet(new long[]{0x0000000000000000L,0x00002A0000000000L,0x00B7FC00FD630010L,0x0000000000000014L});
    public static final BitSet FOLLOW_suite_in_funcdef1093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_parameters1149 = new BitSet(new long[]{0x0000000000000000L,0x0006380000000000L});
    public static final BitSet FOLLOW_varargslist_in_parameters1152 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_parameters1156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defparameter_in_varargslist1194 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_varargslist1204 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L});
    public static final BitSet FOLLOW_defparameter_in_varargslist1206 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_varargslist1225 = new BitSet(new long[]{0x0000000000000002L,0x0006000000000000L});
    public static final BitSet FOLLOW_STAR_in_varargslist1247 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_NAME_in_varargslist1251 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_varargslist1254 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_varargslist1256 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_NAME_in_varargslist1260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_varargslist1284 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_NAME_in_varargslist1288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_varargslist1380 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_NAME_in_varargslist1384 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_varargslist1387 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_varargslist1389 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_NAME_in_varargslist1393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_varargslist1440 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_NAME_in_varargslist1444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fpdef_in_defparameter1488 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L});
    public static final BitSet FOLLOW_ASSIGN_in_defparameter1491 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_defparameter1493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_fpdef1520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_fpdef1532 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L});
    public static final BitSet FOLLOW_fplist_in_fpdef1534 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_fpdef1536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fpdef_in_fplist1567 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_fplist1577 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L});
    public static final BitSet FOLLOW_fpdef_in_fplist1579 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_fplist1584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_stmt_in_stmt1623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_stmt_in_stmt1632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_small_stmt_in_simple_stmt1647 = new BitSet(new long[]{0x0000000000000000L,0x0010020000000000L});
    public static final BitSet FOLLOW_SEMI_in_simple_stmt1657 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00B7FC00FD630010L,0x0000000000000014L});
    public static final BitSet FOLLOW_small_stmt_in_simple_stmt1659 = new BitSet(new long[]{0x0000000000000000L,0x0010020000000000L});
    public static final BitSet FOLLOW_SEMI_in_simple_stmt1664 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_NEWLINE_in_simple_stmt1668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_stmt_in_small_stmt1706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_print_stmt_in_small_stmt1721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_del_stmt_in_small_stmt1736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pass_stmt_in_small_stmt1751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_flow_stmt_in_small_stmt1766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_stmt_in_small_stmt1781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_stmt_in_small_stmt1796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exec_stmt_in_small_stmt1811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assert_stmt_in_small_stmt1826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt1849 = new BitSet(new long[]{0x0000000000000002L,0xFFE8000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_augassign_in_expr_stmt1866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_yield_expr_in_expr_stmt1868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_augassign_in_expr_stmt1897 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt1901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assigns_in_expr_stmt1932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assign_testlist_in_assigns2017 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L});
    public static final BitSet FOLLOW_assign_yield_in_assigns2026 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L});
    public static final BitSet FOLLOW_ASSIGN_in_assign_testlist2048 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_testlist_in_assign_testlist2050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGN_in_assign_yield2079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_yield_expr_in_assign_yield2081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_augassign0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_print_stmt2277 = new BitSet(new long[]{0x0000000000000002L,0x0000280000000000L,0x00000000FD630012L,0x0000000000000004L});
    public static final BitSet FOLLOW_printlist_in_print_stmt2296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHTSHIFT_in_print_stmt2372 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_printlist_in_print_stmt2376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_printlist2535 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_printlist2546 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_printlist2548 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_printlist2555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_printlist2583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_del_stmt2611 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630000L});
    public static final BitSet FOLLOW_exprlist2_in_del_stmt2613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_pass_stmt2648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_flow_stmt2681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_flow_stmt2695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_flow_stmt2709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_raise_stmt_in_flow_stmt2723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yield_stmt_in_flow_stmt2737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_break_stmt2757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_continue_stmt2792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_return_stmt2833 = new BitSet(new long[]{0x0000000000000002L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_testlist_in_return_stmt2836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yield_expr_in_yield_stmt2883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_raise_stmt2903 = new BitSet(new long[]{0x0000000000000002L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_raise_stmt2908 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_raise_stmt2911 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_raise_stmt2915 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_raise_stmt2918 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_raise_stmt2922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_name_in_import_stmt2988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_from_in_import_stmt3004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_import_name3026 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_dotted_as_names_in_import_name3028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_import_from3069 = new BitSet(new long[]{0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_DOT_in_import_from3072 = new BitSet(new long[]{0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_dotted_name_in_import_from3075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_DOT_in_import_from3079 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_177_in_import_from3083 = new BitSet(new long[]{0x0000000000000000L,0x0002280000000000L});
    public static final BitSet FOLLOW_STAR_in_import_from3100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_as_names_in_import_from3158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_import_from3216 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_import_as_names_in_import_from3218 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_import_from3220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_as_name_in_import_as_names3297 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_import_as_names3300 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_import_as_name_in_import_as_names3303 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_import_as_names3308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_import_as_name3339 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_179_in_import_as_name3342 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_NAME_in_import_as_name3346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dotted_name_in_dotted_as_name3405 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_179_in_dotted_as_name3408 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_NAME_in_dotted_as_name3412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dotted_as_name_in_dotted_as_names3468 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_dotted_as_names3471 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_dotted_as_name_in_dotted_as_names3474 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_NAME_in_dotted_name3501 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_dotted_name3504 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_NAME_in_dotted_name3506 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});
    public static final BitSet FOLLOW_180_in_global_stmt3530 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_NAME_in_global_stmt3532 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_global_stmt3535 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_NAME_in_global_stmt3537 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_181_in_exec_stmt3581 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630000L});
    public static final BitSet FOLLOW_expr_in_exec_stmt3583 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_182_in_exec_stmt3586 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_exec_stmt3590 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_exec_stmt3593 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_exec_stmt3597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_assert_stmt3654 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_assert_stmt3658 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_assert_stmt3661 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_assert_stmt3665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_compound_stmt3721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_compound_stmt3739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_compound_stmt3757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_in_compound_stmt3775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_stmt_in_compound_stmt3793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_funcdef_in_compound_stmt3811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classdef_in_compound_stmt3829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_if_stmt3852 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_if_stmt3854 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_if_stmt3856 = new BitSet(new long[]{0x0000000000000000L,0x00002A0000000000L,0x00B7FC00FD630010L,0x0000000000000014L});
    public static final BitSet FOLLOW_suite_in_if_stmt3860 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0600000000000000L});
    public static final BitSet FOLLOW_elif_clause_in_if_stmt3862 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0600000000000000L});
    public static final BitSet FOLLOW_185_in_if_stmt3867 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_if_stmt3869 = new BitSet(new long[]{0x0000000000000000L,0x00002A0000000000L,0x00B7FC00FD630010L,0x0000000000000014L});
    public static final BitSet FOLLOW_suite_in_if_stmt3873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_elif_clause3920 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_elif_clause3922 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_elif_clause3924 = new BitSet(new long[]{0x0000000000000000L,0x00002A0000000000L,0x00B7FC00FD630010L,0x0000000000000014L});
    public static final BitSet FOLLOW_suite_in_elif_clause3926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_while_stmt3969 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_while_stmt3971 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_while_stmt3973 = new BitSet(new long[]{0x0000000000000000L,0x00002A0000000000L,0x00B7FC00FD630010L,0x0000000000000014L});
    public static final BitSet FOLLOW_suite_in_while_stmt3977 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_185_in_while_stmt3980 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_while_stmt3982 = new BitSet(new long[]{0x0000000000000000L,0x00002A0000000000L,0x00B7FC00FD630010L,0x0000000000000014L});
    public static final BitSet FOLLOW_suite_in_while_stmt3986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_for_stmt4042 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630000L});
    public static final BitSet FOLLOW_exprlist_in_for_stmt4044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_182_in_for_stmt4046 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_testlist_in_for_stmt4048 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_for_stmt4050 = new BitSet(new long[]{0x0000000000000000L,0x00002A0000000000L,0x00B7FC00FD630010L,0x0000000000000014L});
    public static final BitSet FOLLOW_suite_in_for_stmt4054 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_185_in_for_stmt4057 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_for_stmt4059 = new BitSet(new long[]{0x0000000000000000L,0x00002A0000000000L,0x00B7FC00FD630010L,0x0000000000000014L});
    public static final BitSet FOLLOW_suite_in_for_stmt4063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_try_stmt4129 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_try_stmt4131 = new BitSet(new long[]{0x0000000000000000L,0x00002A0000000000L,0x00B7FC00FD630010L,0x0000000000000014L});
    public static final BitSet FOLLOW_suite_in_try_stmt4135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_except_clause_in_try_stmt4151 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x4200000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_185_in_try_stmt4155 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_try_stmt4157 = new BitSet(new long[]{0x0000000000000000L,0x00002A0000000000L,0x00B7FC00FD630010L,0x0000000000000014L});
    public static final BitSet FOLLOW_suite_in_try_stmt4161 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_try_stmt4166 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_try_stmt4168 = new BitSet(new long[]{0x0000000000000000L,0x00002A0000000000L,0x00B7FC00FD630010L,0x0000000000000014L});
    public static final BitSet FOLLOW_suite_in_try_stmt4172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_try_stmt4235 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_try_stmt4237 = new BitSet(new long[]{0x0000000000000000L,0x00002A0000000000L,0x00B7FC00FD630010L,0x0000000000000014L});
    public static final BitSet FOLLOW_suite_in_try_stmt4241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_with_stmt4303 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_with_stmt4305 = new BitSet(new long[]{0x0000000000000000L,0x0000A00000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_with_var_in_with_stmt4308 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_with_stmt4312 = new BitSet(new long[]{0x0000000000000000L,0x00002A0000000000L,0x00B7FC00FD630010L,0x0000000000000014L});
    public static final BitSet FOLLOW_suite_in_with_stmt4314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_with_var4357 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630000L});
    public static final BitSet FOLLOW_expr_in_with_var4365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_except_clause4383 = new BitSet(new long[]{0x0000000000000000L,0x0000A80000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_except_clause4388 = new BitSet(new long[]{0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_COMMA_in_except_clause4391 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_except_clause4395 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_except_clause4401 = new BitSet(new long[]{0x0000000000000000L,0x00002A0000000000L,0x00B7FC00FD630010L,0x0000000000000014L});
    public static final BitSet FOLLOW_suite_in_except_clause4403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_stmt_in_suite4498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWLINE_in_suite4508 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_INDENT_in_suite4511 = new BitSet(new long[]{0x0000000000000000L,0x00002C0000000000L,0xB9B7FE00FD630010L,0x000000000000001CL});
    public static final BitSet FOLLOW_stmt_in_suite4514 = new BitSet(new long[]{0x0000000000000020L,0x00002C0000000000L,0xB9B7FE00FD630010L,0x000000000000001CL});
    public static final BitSet FOLLOW_DEDENT_in_suite4518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_or_test_in_test4535 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_184_in_test4553 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L});
    public static final BitSet FOLLOW_or_test_in_test4557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_185_in_test4559 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_test4561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambdef_in_test4617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_test_in_or_test4633 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_OR_in_or_test4636 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L});
    public static final BitSet FOLLOW_and_test_in_or_test4639 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_not_test_in_and_test4659 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_AND_in_and_test4662 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L});
    public static final BitSet FOLLOW_not_test_in_and_test4665 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_NOT_in_not_test4686 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L});
    public static final BitSet FOLLOW_not_test_in_not_test4689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comparison_in_not_test4702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_comparison4720 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000FF0L,0x0000000000000002L});
    public static final BitSet FOLLOW_comp_op_in_comparison4723 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630000L});
    public static final BitSet FOLLOW_expr_in_comparison4726 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000FF0L,0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_in_comp_op4745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_in_comp_op4757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUAL_in_comp_op4769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATEREQUAL_in_comp_op4781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESSEQUAL_in_comp_op4793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALT_NOTEQUAL_in_comp_op4805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOTEQUAL_in_comp_op4817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_comp_op4829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_comp_op4841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_182_in_comp_op4843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_comp_op4859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_comp_op4871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_NOT_in_comp_op4873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xor_expr_in_expr4895 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_VBAR_in_expr4898 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630000L});
    public static final BitSet FOLLOW_xor_expr_in_expr4901 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_and_expr_in_xor_expr4918 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_CIRCUMFLEX_in_xor_expr4921 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630000L});
    public static final BitSet FOLLOW_and_expr_in_xor_expr4924 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_shift_expr_in_and_expr4945 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_AMPER_in_and_expr4948 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630000L});
    public static final BitSet FOLLOW_shift_expr_in_and_expr4951 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_arith_expr_in_shift_expr4972 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008002L});
    public static final BitSet FOLLOW_LEFTSHIFT_in_shift_expr4976 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630000L});
    public static final BitSet FOLLOW_RIGHTSHIFT_in_shift_expr4979 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630000L});
    public static final BitSet FOLLOW_arith_expr_in_shift_expr4983 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008002L});
    public static final BitSet FOLLOW_term_in_arith_expr5005 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000030000L});
    public static final BitSet FOLLOW_PLUS_in_arith_expr5009 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630000L});
    public static final BitSet FOLLOW_MINUS_in_arith_expr5012 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630000L});
    public static final BitSet FOLLOW_term_in_arith_expr5016 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000030000L});
    public static final BitSet FOLLOW_factor_in_term5029 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x00000000001C0000L});
    public static final BitSet FOLLOW_STAR_in_term5033 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630000L});
    public static final BitSet FOLLOW_SLASH_in_term5038 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630000L});
    public static final BitSet FOLLOW_PERCENT_in_term5043 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630000L});
    public static final BitSet FOLLOW_DOUBLESLASH_in_term5048 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630000L});
    public static final BitSet FOLLOW_factor_in_term5053 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x00000000001C0000L});
    public static final BitSet FOLLOW_PLUS_in_factor5070 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630000L});
    public static final BitSet FOLLOW_factor_in_factor5072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_factor5091 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630000L});
    public static final BitSet FOLLOW_factor_in_factor5093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_factor5112 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630000L});
    public static final BitSet FOLLOW_factor_in_factor5114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_power_in_factor5133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atom_in_power5150 = new BitSet(new long[]{0x0000000000000002L,0x0004480000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_trailer_in_power5153 = new BitSet(new long[]{0x0000000000000002L,0x0004480000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_power5166 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630000L});
    public static final BitSet FOLLOW_factor_in_power5169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_atom5191 = new BitSet(new long[]{0x0000000000000000L,0x0000380000000000L,0x00000000FD630010L,0x0000000000000014L});
    public static final BitSet FOLLOW_yield_expr_in_atom5203 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_testlist_gexp_in_atom5225 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_atom5268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_atom5277 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FDE30010L,0x0000000000000004L});
    public static final BitSet FOLLOW_listmaker_in_atom5287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_RBRACK_in_atom5324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_atom5333 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FF630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_dictmaker_in_atom5336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RCURLY_in_atom5340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BACKQUOTE_in_atom5362 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_testlist_in_atom5364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_BACKQUOTE_in_atom5366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_atom5383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_atom5402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONGINT_in_atom5419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_atom5436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPLEX_in_atom5453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_atom5471 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_test_in_listmaker5497 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_list_for_in_listmaker5514 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_listmaker5548 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_listmaker5550 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_listmaker5582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_testlist_gexp5608 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_testlist_gexp5624 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_testlist_gexp5626 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_testlist_gexp5633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gen_for_in_testlist_gexp5745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_lambdef5782 = new BitSet(new long[]{0x0000000000000000L,0x0006A80000000000L});
    public static final BitSet FOLLOW_varargslist_in_lambdef5785 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_lambdef5789 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_lambdef5791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_trailer5831 = new BitSet(new long[]{0x0000000000000000L,0x0006380000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_arglist_in_trailer5834 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_trailer5838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_trailer5863 = new BitSet(new long[]{0x0000000000000000L,0x0000E80000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_subscriptlist_in_trailer5865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_RBRACK_in_trailer5867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_trailer5887 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_NAME_in_trailer5890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subscript_in_subscriptlist5910 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_subscriptlist5920 = new BitSet(new long[]{0x0000000000000000L,0x0000E80000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_subscript_in_subscriptlist5922 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_subscriptlist5927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_subscript5971 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_subscript5973 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_DOT_in_subscript5975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_subscript6003 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_subscript6006 = new BitSet(new long[]{0x0000000000000002L,0x0000A80000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_subscript6011 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_sliceop_in_subscript6016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_subscript6071 = new BitSet(new long[]{0x0000000000000002L,0x0000A80000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_subscript6074 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_sliceop_in_subscript6079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_subscript6118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_sliceop6146 = new BitSet(new long[]{0x0000000000000002L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_sliceop6149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_exprlist6192 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_exprlist6203 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630000L});
    public static final BitSet FOLLOW_expr_in_exprlist6205 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_exprlist6210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_exprlist6238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_exprlist26258 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_exprlist26269 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630000L});
    public static final BitSet FOLLOW_expr_in_exprlist26271 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_exprlist26276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_testlist6316 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_testlist6329 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_testlist6331 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_testlist6338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_dictmaker6386 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_dictmaker6388 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_dictmaker6390 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_dictmaker6412 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_dictmaker6414 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_dictmaker6416 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_dictmaker6418 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_dictmaker6423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_classdef6458 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_NAME_in_classdef6460 = new BitSet(new long[]{0x0000000000000000L,0x0000880000000000L});
    public static final BitSet FOLLOW_LPAREN_in_classdef6463 = new BitSet(new long[]{0x0000000000000000L,0x0000380000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_testlist_in_classdef6465 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_classdef6468 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_classdef6472 = new BitSet(new long[]{0x0000000000000000L,0x00002A0000000000L,0x00B7FC00FD630010L,0x0000000000000014L});
    public static final BitSet FOLLOW_suite_in_classdef6474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argument_in_arglist6517 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_arglist6520 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_argument_in_arglist6522 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_arglist6538 = new BitSet(new long[]{0x0000000000000002L,0x0006000000000000L});
    public static final BitSet FOLLOW_STAR_in_arglist6554 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_arglist6558 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_arglist6561 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_arglist6563 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_arglist6567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_arglist6585 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_arglist6589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_arglist6663 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_arglist6667 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_arglist6670 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_arglist6672 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_arglist6676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_arglist6716 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_arglist6720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_argument6756 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_ASSIGN_in_argument6770 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_argument6774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gen_for_in_argument6809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_for_in_list_iter6870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_if_in_list_iter6884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_list_for6904 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630000L});
    public static final BitSet FOLLOW_exprlist_in_list_for6906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_182_in_list_for6908 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_testlist_in_list_for6910 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1100000000000000L});
    public static final BitSet FOLLOW_list_iter_in_list_for6913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_list_if6967 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_list_if6969 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1100000000000000L});
    public static final BitSet FOLLOW_list_iter_in_list_if6972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gen_for_in_gen_iter7017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gen_if_in_gen_iter7029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_gen_for7046 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630000L});
    public static final BitSet FOLLOW_exprlist_in_gen_for7048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_182_in_gen_for7050 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L});
    public static final BitSet FOLLOW_or_test_in_gen_for7052 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1100000000000000L});
    public static final BitSet FOLLOW_gen_iter_in_gen_for7054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_gen_if7102 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_test_in_gen_if7104 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1100000000000000L});
    public static final BitSet FOLLOW_gen_iter_in_gen_if7106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_yield_expr7147 = new BitSet(new long[]{0x0000000000000002L,0x0000280000000000L,0x00000000FD630010L,0x0000000000000004L});
    public static final BitSet FOLLOW_testlist_in_yield_expr7149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_synpred12528 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred12530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_synpred24544 = new BitSet(new long[]{0x0000000000000000L,0x0000280000000000L,0x00000000FD630010L});
    public static final BitSet FOLLOW_or_test_in_synpred24546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_185_in_synpred24548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_synpred35994 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_COLON_in_synpred35996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_synpred46066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_synpred56185 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred56187 = new BitSet(new long[]{0x0000000000000002L});

}
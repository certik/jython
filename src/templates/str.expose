# setup
type_name: str
type_class: PyString
# exposed methods
expose_index_getitem: seq_>
expose_meth: seq_> __getslice__ ooo?
#
expose_binary: __ne__ __eq__
expose_meth: :b __contains__ o
expose_meth: :i __len__
expose_meth: __add__ o
expose_meth: __mul__ o
expose_meth: __reduce__
expose_meth: __rmul__ o
expose_meth: __str__
expose_meth: __unicode__
expose_meth: __hash__
 `ideleg`(hashCode);
expose_meth: __repr__
 `sdeleg`(toString);
expose_meth: :s capitalize
expose_meth: :s center i
expose_meth: :i count s i? i?
expose_meth: :s decode s? s?
expose_meth: :s encode s? s?
expose_meth: :b endswith s i? i?
expose_meth: :s expandtabs i?
expose_meth: :i find s i? i?
expose_meth: :i index s i? i?
expose_meth: :b isalnum
expose_meth: :b isalpha
expose_meth: :b isdecimal
expose_meth: :b isdigit
expose_meth: :b islower
expose_meth: :b isnumeric
expose_meth: :b isspace
expose_meth: :b istitle
expose_meth: :b isunicode
expose_meth: :b isupper
expose_meth: join o
    String result = self.str_join(arg0);
    //XXX: do we really need to check self?
    if (self instanceof PyUnicode || arg0 instanceof PyUnicode) {
        return new PyUnicode(result);
    } else {
        return new PyString(result);
    }
expose_meth: :s ljust i
expose_meth: :s lower
expose_meth: :s lstrip S?
expose_meth: :s replace s s i?
expose_meth: :i rfind s i? i?
expose_meth: :i rindex s i? i?
expose_meth: :s rjust i
expose_meth: :s rstrip S?
expose_meth: :o split S? i?
expose_meth: :o splitlines b?
expose_meth: :b startswith s i? i?
expose_meth: :s strip S?
expose_meth: :s swapcase
expose_meth: :s title
expose_meth: :s translate s s?
expose_meth: :s upper
expose_meth: :s zfill i
expose_new_immutable:
#expose_meth: :b __nonzero__

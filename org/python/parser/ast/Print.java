// Autogenerated AST node
package org.python.parser.ast;
import org.python.parser.SimpleNode;
import java.io.DataOutputStream;
import java.io.IOException;

public class Print extends stmtType {
    public exprType dest;
    public exprType[] value;
    public boolean nl;

    public Print(exprType dest, exprType[] value, boolean nl) {
        this.dest = dest;
        this.value = value;
        this.nl = nl;
    }

    public Print(exprType dest, exprType[] value, boolean nl, SimpleNode
    parent) {
        this(dest, value, nl);
        this.beginLine = parent.beginLine;
        this.beginColumn = parent.beginColumn;
    }

    public String toString() {
        StringBuffer sb = new StringBuffer("Print[");
        sb.append("dest=");
        sb.append(dumpThis(this.dest));
        sb.append(", ");
        sb.append("value=");
        sb.append(dumpThis(this.value));
        sb.append(", ");
        sb.append("nl=");
        sb.append(dumpThis(this.nl));
        sb.append("]");
        return sb.toString();
    }

    public void pickle(DataOutputStream ostream) throws IOException {
        pickleThis(12, ostream);
        pickleThis(this.dest, ostream);
        pickleThis(this.value, ostream);
        pickleThis(this.nl, ostream);
    }

    public Object accept(VisitorIF visitor) throws Exception {
        return visitor.visitPrint(this);
    }

    public void traverse(VisitorIF visitor) throws Exception {
        if (dest != null)
            dest.accept(visitor);
        if (value != null) {
            for (int i = 0; i < value.length; i++) {
                if (value[i] != null)
                    value[i].accept(visitor);
            }
        }
    }

}

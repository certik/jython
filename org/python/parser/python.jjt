// -*- java -*-
// Copyright © Corporation for National Research Initiatives

options
{
    // only non-defaults are given here.
    NODE_SCOPE_HOOK = true;                  // call jjtree*NodeScope()
    NODE_FACTORY = true;
    NODE_USES_PARSER = true;
    STATIC = false;                          // multiple parsers
    COMMON_TOKEN_ACTION = true;              // CommonTokenAction(Token)
//    DEBUG_PARSER = true;
//    DEBUG_TOKEN_MANAGER = true;
    USER_CHAR_STREAM = true;
    UNICODE_INPUT = true;
}


PARSER_BEGIN(PythonGrammar)
package org.python.parser;
import org.python.parser.ast.modType;

public class PythonGrammar
{
    public IParserHost hostLiteralMkr;

    void jjtreeOpenNodeScope(Node n) {
        Token t = getToken(1);
        jjtree.pushNodePos(t.beginLine, t.beginColumn);
    }

    void jjtreeCloseNodeScope(Node n) {
        jjtree.setNodePos();
    }

    Object makeInt(String s, int radix) {
        if (s.endsWith("L") || s.endsWith("l")) {
            s = s.substring(0, s.length()-1);
            return hostLiteralMkr.newLong(new java.math.BigInteger(s, radix));
        }
        int ndigits = s.length();
        int i=0;
        while (i < ndigits && s.charAt(i) == '0')
            i++;
        if ((ndigits - i) > 11) {
            return hostLiteralMkr.newLong(new java.math.BigInteger(s, radix));
        }

        long l = Long.valueOf(s, radix).longValue();
        if (l > 0xffffffffl || (radix == 10 && l > Integer.MAX_VALUE)) {
            return hostLiteralMkr.newLong(new java.math.BigInteger(s, radix));
        }
        return hostLiteralMkr.newInteger((int) l);
    }

    Object makeFloat(String s) {
        return hostLiteralMkr.newFloat(Double.valueOf(s).doubleValue());
    }

    Object makeLong(String s) {
        return hostLiteralMkr.newLong(s);
    }

    Object makeComplex(String s) {
        s = s.substring(0, s.length() - 1);
        return hostLiteralMkr.newImaginary(Double.valueOf(s).doubleValue());
    }

    String makeString(String s, int quotes) {
        //System.out.println("string: "+s);
        char quoteChar = s.charAt(0);
        int start=0;
        boolean ustring = false;
        if (quoteChar == 'u' || quoteChar == 'U') {
            ustring = true;
            start++;
        }
        quoteChar = s.charAt(start);
        if (quoteChar == 'r' || quoteChar == 'R') {
            return s.substring(quotes+start+1, s.length()-quotes);
        } else {
            StringBuffer sb = new StringBuffer(s.length());
            char[] ca = s.toCharArray();
            int n = ca.length-quotes;
            int i=quotes+start;
            int last_i=i;

            return hostLiteralMkr.decode_UnicodeEscape(s, i, n, "strict", ustring);
        }
    }

    // ! maximal currently used LOOKAHEAD is 3
    private static final int MAX_LOOKAHEAD = 3;

    public boolean partial_valid_sentence(Throwable t) {
        if (t instanceof TokenMgrError) {
           // check whether EOF condition inside multi-line string,
           // or just after newline continuation inside a string (*NLC states)
           TokenMgrError e = (TokenMgrError)t;
           switch(e.lexState) {
           case IN_STRING1NLC:
           case IN_STRING2NLC:
           case IN_STRING13:
           case IN_STRING23:
               return e.EOFSeen;
           default:
               return false;
           }
        }
        if (!(t instanceof ParseException))
            return false;
        try {
            ParseException e = (ParseException)t;
            int tok = getNextToken().kind;
            if (tok == EOF) return true; // all tokens eaten

            // or check whether remaing tokens partially fullfill lookahead
            // expectations

            int[][] expected = e.expectedTokenSequences;

            if (expected == null) return false;

            int[] ahead = new int[MAX_LOOKAHEAD-1];

            int i = 0;
            for(;;) {
                ahead[i] = tok;
                i++;
                tok = getNextToken().kind;
                if (tok == EOF) break;
                if (i >= MAX_LOOKAHEAD-1) return false;
            }

            int nahead = i;

        next_expected:
            for(int j = 0; j<expected.length; j++) {
                int[] cand = expected[j];

                if (cand.length <= nahead ) continue next_expected;

                for(int k = 0; k < nahead; k++)
                    if (ahead[k] != cand[k])
                        continue next_expected;
                return true;
            }

            return false;
        } catch (TokenMgrError e1) {
            return false;
        }
    }

   // constructors taking a IParserHost impl

   public PythonGrammar(CharStream stream,IParserHost host) {
       this(stream);
       hostLiteralMkr = host;
   }

   public PythonGrammar(PythonGrammarTokenManager tm,
                        IParserHost host)
   {
        this(tm);
        hostLiteralMkr = host;
   }

}


PARSER_END(PythonGrammar)

TOKEN_MGR_DECLS:
{
    int indentation[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    int level = 0;
    int dedents = 0;
    int parens = 0;
    int indent;

    boolean expect_indent = false;

    boolean compound = false;

    public boolean single_input = false;

    // parsing of partial sentence (interactive) mode
    public boolean partial = false;
    // control whether empty new lines on EOF force sentence closing NEWLINE even if indent
    // is expected,i.e. classic behavior at jython prompt (different from codeop behavior)
    public boolean stdprompt = false;

    public boolean generator_allowed = false;

    static Token addDedent(Token previous) {
        Token t = new Token();
        t.kind = DEDENT;
        t.beginLine = previous.beginLine;
        t.endLine = previous.endLine;
        t.beginColumn = previous.beginColumn;
        t.endColumn = previous.endColumn;
        t.image = "<DEDENT>";
        t.specialToken = null;
        t.next = null;
        previous.next = t;
        return t;
    }

    void CommonTokenAction(Token t) {
        /*
           if not partial: EOF is expanded to token sequences comprising
               if single_input: [NEWLINE] necessary DEDENT NEWLINE (afterward EOF)
               otherwise      : [NEWLINE] necessary DEDENT EOF
           if partial: EOF expansion happens only if EOF preceded by empty line (etc),
           i.e. lexer is in MAYBE_FORCE_NEWLINE_IF_EOF state
        */
        if (t.kind == EOF) {
            // System.out.println("EOF: "+single_input+", "+curLexState+", "+level);
            if (!partial || curLexState == MAYBE_FORCE_NEWLINE_IF_EOF) {
                if (curLexState == DEFAULT) {
                    t.kind = NEWLINE;
                }
                else {
                    t.kind = DEDENT;
                    if (level >= 0) level -= 1;
                }
                while (level >= 0) {
                    level--;
                    t = addDedent(t);
                }
                if (!single_input) {
                    t.kind = EOF;
                    t.image = "<EOF>";
                } else {
                    t.kind = NEWLINE;
                    t.image = "<FORCENL>";
                    single_input = false;
                }
            }
        } else if (t.kind == YIELD) {
            if (!generator_allowed) {
                t.kind = NAME;
            }
        }
    }

    void indenting(int ind) {
        indent = ind;
        if (indent == indentation[level])
            SwitchTo(INDENTATION_UNCHANGED);
        else
            SwitchTo(INDENTING);
    }
}


SKIP :
{
    <SPACE: " ">
|   "\t"
|   "\014"
|   <CONTINUATION: ("\\") ("\r\n"|"\n"|"\r")>
|   <NEWLINE1: ("\r\n"|"\n"|"\r")>
        {
            if (parens == 0) {
                indent = 0;
                input_stream.backup(1);
                if (level == 0)
                    SwitchTo(FORCE_NEWLINE1);
                else
                    SwitchTo(FORCE_NEWLINE2);
            }
        }
}


<FORCE_NEWLINE1> TOKEN :
{ <NEWLINE: ("\n" | "\r")> : INDENTATION_UNCHANGED }


<FORCE_NEWLINE2> TOKEN :
{ <NEWLINE2: ("\n" | "\r")> { matchedToken.kind = NEWLINE; }: INDENTING }


// causes expected warning
<MAYBE_FORCE_NEWLINE_IF_EOF> SKIP :
{
    <""> { indenting(0); }
}

<INDENTING, INDENTATION_UNCHANGED> SKIP :
{
    "\t"
        { indenting((indent/8+1)*8); }
|   " "
        { indenting(indent+1); }
|   "\014"
        { indenting(0); }
|   <CRLF1: ("\r\n" | "\n" | "\r")>
        {
            //System.out.println("empty line");
            // if partial single_input (interactive) mode,
            // empty line (indent==0), and no parens open
            // or indentetion expected (if stdprompt == true, ovveride last cond)
            // consider forcing sentence closing NEWLINE if EOF
            if (partial && single_input && indent == 0 &&
                           parens == 0  && (stdprompt || !expect_indent)) {
                //System.out.println("force newline");
                //backup a character!
                // - input_stream.backup(1); -
                SwitchTo(MAYBE_FORCE_NEWLINE_IF_EOF);
            }
            else
                indenting(0);
        }
}


<INDENTATION_UNCHANGED> SKIP :
{
    <""> : DEFAULT
}


<INDENTING> TOKEN :
{
    <DEDENT: "">
        {
            if (indent > indentation[level]) {
                level++;
                indentation[level] = indent;
                matchedToken.kind=INDENT;
                matchedToken.image = "<INDENT>";
            }
            else if (level > 0) {
                Token t = matchedToken;
                level -= 1;
                while (level > 0 && indent < indentation[level]) {
                    level--;
                    t = addDedent(t);
                }
                if (indent != indentation[level]) {
                    throw new TokenMgrError("inconsistent dedent",
                                            t.endLine, t.endColumn);
                }
                t.next = null;
            }
        } : DEFAULT
}


<UNREACHABLE> TOKEN :
{
    < INDENT:"<INDENT>">
//|     < DEDENT:"<DEDENT>">
}


<DEFAULT> SPECIAL_TOKEN: /* COMMENTS */
{
    <TRAILING_COMMENT: "#" (~["\n","\r"])* >
}

<INDENTING, INDENTATION_UNCHANGED> SPECIAL_TOKEN: /* COMMENTS */
{
    <SINGLE_LINE_COMMENT: "#" (~["\n","\r"])* ("\r\n" | "\n" | "\r")> {
        indenting(0);
    }
}


TOKEN : /* SEPARATORS */
{
    < LPAREN: "(" > {parens++;}
|   < RPAREN: ")" > {parens--;}
|   < LBRACE: "{" > {parens++;}
|   < RBRACE: "}" > {parens--;}
|   < LBRACKET: "[" > {parens++;}
|   < RBRACKET: "]" > {parens--;}
|   < SEMICOLON: ";" >
|   < COMMA: "," >
|   < DOT: "." >
|   < COLON: ":" >
}


TOKEN : /* OPERATORS */
{
    < PLUS: "+" >
|   < MINUS: "-" >
|   < MULTIPLY: "*" >
|   < DIVIDE: "/" >
|   < FLOORDIVIDE: "//" >
|   < POWER: "**" >
|   < LSHIFT: "<<" >
|   < RSHIFT: ">>" >
|   < MODULO: "%" >
|   < NOT: "~" >
|   < XOR: "^" >
|   < OR: "|" >
|   < AND: "&" >
|   < EQUAL: "=" >
|   < GREATER: ">" >
|   < LESS: "<" >
|   < EQEQUAL: "==" >
|   < EQLESS: "<=" >
|   < EQGREATER: ">=" >
|   < LESSGREATER: "<>" >
|   < NOTEQUAL: "!=" >
|   < PLUSEQ: "+=" >
|   < MINUSEQ: "-=" >
|   < MULTIPLYEQ: "*=" >
|   < DIVIDEEQ: "/=" >
|   < FLOORDIVIDEEQ: "//=" >
|   < MODULOEQ: "%=" >
|   < ANDEQ: "&=" >
|   < OREQ: "|=" >
|   < XOREQ: "^=" >
|   < LSHIFTEQ: "<<=" >
|   < RSHIFTEQ: ">>=" >
|   < POWEREQ: "**=" >
}

TOKEN : /* KEYWORDS */
{
    < OR_BOOL: "or" >
|   < AND_BOOL: "and" >
|   < NOT_BOOL: "not" >
|   < IS: "is" >
|   < IN: "in" >
|   < LAMBDA: "lambda" >
|   < IF: "if" >
|   < ELSE: "else" >
|   < ELIF: "elif" >
|   < WHILE: "while" >
|   < FOR: "for" >
|   < TRY: "try" >
|   < EXCEPT: "except" >
|   < DEF: "def" >
|   < CLASS: "class" >
|   < FINALLY: "finally" >
|   < PRINT: "print" >
|   < PASS: "pass" >
|   < BREAK: "break" >
|   < CONTINUE: "continue" >
|   < RETURN: "return" >
|   < YIELD: "yield" >
|   < IMPORT: "import" >
|   < FROM: "from" >
|   < DEL: "del" >
|   < RAISE: "raise" >
|   < GLOBAL: "global" >
|   < EXEC: "exec" >
|   < ASSERT: "assert" >
|   < AS: "as" >
}


TOKEN : /* Python identifiers */
{
    < NAME: <LETTER> ( <LETTER> | <DIGIT>)* >
|   < #LETTER: ["_","a"-"z","A"-"Z"] >
}


TOKEN : /* Numeric literals */
{
    < DECNUMBER:
        ["1"-"9"] (["0"-"9"])* (["l", "L"])?
      | "0"
      >
|   < HEXNUMBER: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ (["l","L"])? >
|   < OCTNUMBER: "0" (["0"-"7"])* (["l","L"])? >
|
    < FLOAT:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
      | "." (["0"-"9"])+ (<EXPONENT>)?
      | (["0"-"9"])+ <EXPONENT>
      >
|   < COMPLEX: (<DECNUMBER> | <FLOAT> | "0" <DECNUMBER> ) ["j", "J"]>
|   < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|   < #DIGIT: ["0" - "9"] >
}

/*TOKEN : { <STRING: (["r", "R"])? ["'", "\"", "'''", "\"\"\""] >
    {
        int nquotes = matchedToken.image.length() > 2 ? 3 : 1;
        char quote = matchedToken.image.charAt(matchedToken.image.length()-1);

    }
}*/


MORE : /* Strings */
{
    < (["u", "U"])? (["r", "R"])? "'" > :  IN_STRING11
|   < (["u", "U"])? (["r", "R"])? "\"" > :  IN_STRING21
|   < (["u", "U"])? (["r", "R"])? "'''" > :  IN_STRING13
|   < (["u", "U"])? (["r", "R"])? "\"\"\"" > :  IN_STRING23
}

<IN_STRING11> TOKEN : { <SINGLE_STRING: "'"> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_STRING21> TOKEN : { <SINGLE_STRING2: "\""> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_STRING13> TOKEN : { <TRIPLE_STRING: "'''"> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_STRING23> TOKEN : { <TRIPLE_STRING2: "\"\"\""> {
    matchedToken.image = image.toString(); } : DEFAULT}

<IN_STRING11> MORE:
{
    <"\\\r\n">           { image.setLength(image.length()-3); } : IN_STRING1NLC
|   <("\\" ("\n"|"\r"))> { image.setLength(image.length()-2); } : IN_STRING1NLC
}

<IN_STRING21> MORE:
{
    <"\\\r\n">           { image.setLength(image.length()-3); } : IN_STRING2NLC
|   <("\\" ("\n"|"\r"))> { image.setLength(image.length()-2); } : IN_STRING2NLC
}

<IN_STRING1NLC> MORE:
{
 <""> : IN_STRING11
}

<IN_STRING2NLC> MORE:
{
 <""> : IN_STRING21
}

<IN_STRING11> MORE: { <("\\" ("\\"|"'")) | ~["\n","\r"]> }
<IN_STRING21> MORE: { <("\\" ("\\"|"\"")) | ~["\n","\r"]> }

<IN_STRING13, IN_STRING23> MORE:
{
    <"\r\n"> {
        int l = image.length();
        image.setLength(l-1);
        image.setCharAt(l-2, '\n');
    }
|   <"\n">
|   <"\r"> { image.setCharAt(image.length()-1, '\n'); }
|   <~["\n","\r"]>
|   <"\\" ~["\n","\r"]>
}


//single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE
// apparently CPython coalesces newlines, we don't
modType single_input(): {
    token_source.single_input=true;
}
{
    (LOOKAHEAD(2) <NEWLINE>)* [(simple_stmt() | compound_stmt() <NEWLINE>)] (<NEWLINE>)* <EOF>
    { return (modType) jjtree.popNode(); }
}

//file_input: (NEWLINE | stmt)* ENDMARKER
modType file_input(): {token_source.single_input=false;}
{
    (<NEWLINE> | stmt())* <EOF>
    { return (modType) jjtree.popNode(); }
}

//eval_input: NEWLINE* testlist NEWLINE* ENDMARKER
modType eval_input(): {token_source.single_input=false;}
{
    (<NEWLINE>)* SmartTestList() (<NEWLINE>)* <EOF>
    { return (modType) jjtree.popNode(); }
}

//funcdef: 'def' NAME parameters ':' suite
void funcdef(): {}
{ <DEF> AnyName() parameters() <COLON> suite() }

//parameters: '(' [varargslist] ')'
void parameters() #void: {}
{ <LPAREN> [varargslist()] <RPAREN> }

//varargslist: (fpdef ['=' test] ',')* ('*' NAME [',' ('**'|'*' '*') NAME] | ('**'|'*' '*') NAME) | fpdef ['=' test] (',' fpdef ['=' test])* [',']
void varargslist() #void: {}
{
    defaultarg() (LOOKAHEAD(2) <COMMA> defaultarg())*
        [LOOKAHEAD(3) <COMMA> ExtraArgList()]
        [LOOKAHEAD(2) <COMMA> ExtraKeywordList()]
        [<COMMA>]
|   ( LOOKAHEAD(2) ExtraArgList() [<COMMA> ExtraKeywordList()]
    | ExtraKeywordList()
    )
}

void ExtraArgList(): {}
{ <MULTIPLY> Name() }

void ExtraKeywordList(): {}
{ (<POWER>|<MULTIPLY> <MULTIPLY>) Name() }

void defaultarg(): {}
{ fpdef() [<EQUAL> test()] }

//fpdef: NAME | '(' fplist ')'
void fpdef() #void: {}
{ Name() | <LPAREN> fplist() <RPAREN> }

//fplist: fpdef (',' fpdef)* [',']
void fplist() #tuple: {}
{ fpdef() (LOOKAHEAD(2) <COMMA> fpdef())* [<COMMA>] }


//stmt: simple_stmt | compound_stmt
void stmt() #void: {}
{ simple_stmt() | compound_stmt() }

//simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE
void simple_stmt() #void: {}
{ small_stmt() (LOOKAHEAD(2) <SEMICOLON> small_stmt())* [<SEMICOLON>] <NEWLINE>
}

//small_stmt: expr_stmt | print_stmt  | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt
void small_stmt() #void: {}
{
    expr_stmt()
|   print_stmt()
|   del_stmt()
|   pass_stmt()
|   flow_stmt()
|   import_stmt()
|   global_stmt()
|   exec_stmt()
|   assert_stmt()
}

//expr_stmt: testlist (augassign testlist | ('=' testlist)*)
void expr_stmt() #void: {}
{
    SmartTestList() (
    <PLUSEQ> SmartTestList() #aug_plus(2)
|   <MINUSEQ> SmartTestList() #aug_minus(2)
|   <MULTIPLYEQ> SmartTestList() #aug_multiply(2)
|   <DIVIDEEQ> SmartTestList() #aug_divide(2)
|   <FLOORDIVIDEEQ> SmartTestList() #aug_floordivide(2)
|   <MODULOEQ> SmartTestList() #aug_modulo(2)
|   <ANDEQ> SmartTestList() #aug_and(2)
|   <OREQ> SmartTestList() #aug_or(2)
|   <XOREQ> SmartTestList() #aug_xor(2)
|   <LSHIFTEQ> SmartTestList() #aug_lshift(2)
|   <RSHIFTEQ> SmartTestList() #aug_rshift(2)
|   <POWEREQ> SmartTestList() #aug_power(2)
|   (<EQUAL> SmartTestList())* #expr_stmt(jjtree.nodeArity()+1)
    )
}

//print_stmt: 'print' (test ',')* [test] | 'print' '>>' test (, test)+ [,]
void print_stmt() #void: {}
{
    LOOKAHEAD(2) <PRINT> <RSHIFT> (test()
        [ (LOOKAHEAD(2) <COMMA> test())+ [Comma()] ]
        )#printext_stmt
|   LOOKAHEAD(2) <PRINT> (test() (LOOKAHEAD(2) <COMMA> test())* [Comma()]
        )#print_stmt
|   <PRINT>
        #print_stmt
}


//del_stmt: 'del' exprlist
void del_stmt(): {}
{ <DEL> exprlist() }

//pass_stmt: 'pass'
void pass_stmt(): {}
{ <PASS> }

//flow_stmt: break_stmt | continue_stmt | return_stmt | yield_stmt | raise_stmt
void flow_stmt() #void: {}
{
    <BREAK> #break_stmt(0)
|   <CONTINUE> #continue_stmt(0)
|   return_stmt()
|   yield_stmt()
|   raise_stmt()
}

//return_stmt: 'return' [testlist]
void return_stmt(): {}
{ <RETURN> [SmartTestList()] }

//yield_stmt: 'yield' [testlist]
void yield_stmt(): {}
{ <YIELD> SmartTestList() }

//raise_stmt: 'raise' [test [',' test [',' test]]]
void raise_stmt(): {}
{ <RAISE> [test() [<COMMA> test() [<COMMA> test()]]] }

//import_stmt: 'import' dotted_name (',' dotted_name)* | 'from' dotted_name 'import' ('*' | NAME (',' NAME)*)
void import_stmt() #void: {}
{ <IMPORT> Import() | <FROM> ImportFrom() }

void Import(): {}
{ dotted_as_name() (<COMMA> dotted_as_name())* }

void ImportFrom(): { String mod; String name; }
{
    mod=dotted_name() <IMPORT> (
        <MULTIPLY> | (name=import_as_name() (<COMMA> import_as_name())*)
            { if (mod.equals("__future__") && name.equals("generators"))
                token_source.generator_allowed = true;
            }
        )
}

//dotted_as_name: dotted_name [NAME NAME]
void dotted_as_name(): {}
{ dotted_name() [<AS> Name()] }

//dotted_name: NAME ('.' NAME)*
String dotted_name(): { Token t; StringBuffer sb = new StringBuffer(); }
{ t=AnyName() { sb.append(t.image); }
    (<DOT> t=AnyName() { sb.append("." + t.image); } )*
        { return sb.toString(); }
}

//import_as_name: NAME [NAME NAME]
String import_as_name(): { Token t; }
{ t=AnyName() [<AS> Name()] { return t.image; } }

//global_stmt: 'global' NAME (',' NAME)*
void global_stmt(): {}
{ <GLOBAL> Name() (<COMMA> Name())* }

//exec_stmt: 'exec' expr ['in' test [',' test]]
void exec_stmt(): {}
{ <EXEC> expr() [<IN> test() [<COMMA> test()]] }

//assert_stmt: 'assert' test [',' test]
void assert_stmt(): {}
{ <ASSERT> test() [<COMMA> test()] }

//compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | funcdef | classdef
void compound_stmt() #void : { token_source.compound = true; }
{if_stmt() | while_stmt() | for_stmt() | try_stmt()  | funcdef() | classdef()}

//if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]
void if_stmt(): {}
{
    <IF> test() <COLON> suite()
         (<ELIF> test() <COLON> suite())* [ <ELSE> <COLON> suite()]
}

//while_stmt: 'while' test ':' suite ['else' ':' suite]
void while_stmt(): {}
{ <WHILE> test() <COLON> suite() [<ELSE> <COLON> suite()] }

//for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]
void for_stmt(): {}
{ <FOR> exprlist() <IN> SmartTestList() <COLON> suite()
       [<ELSE> <COLON> suite()]
}

//try_stmt: ('try' ':' suite (except_clause ':' suite)+ #diagram:break
//           ['else' ':' suite] | 'try' ':' suite 'finally' ':' suite)
void try_stmt() #void: {}
{ <TRY> <COLON> suite() (
    ((except_clause())+ [<ELSE> <COLON> suite()])
        #try_stmt(jjtree.nodeArity()+1)
    | <FINALLY> <COLON> suite()
        #tryfinally_stmt(jjtree.nodeArity()+1))
}

//except_clause: 'except' [test [',' test]]
void except_clause(): {}
{ <EXCEPT> [test() [<COMMA> test()]] <COLON> suite() }

//suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT
void suite(): {}
{ simple_stmt() |  <NEWLINE>
                   { token_source.expect_indent = true; } <INDENT> { token_source.expect_indent = false; } (stmt())+ <DEDENT> }


//test: and_test ('or' and_test)* | lambdef
void test() #or_boolean(>1): {}
{ lambdef() | and_test() (<OR_BOOL> and_test())* }

//and_test: not_test ('and' not_test)*
void and_test() #and_boolean(>1): {}
{ not_test() (<AND_BOOL> not_test())* }

//not_test: 'not' not_test | comparison
void not_test() #void: {}
{ <NOT_BOOL> not_test() #not_1op(1) | comparison() }

//comparison: expr (comp_op expr)*
void comparison() #void: {}
{ (expr() (comp_op() expr())*) #comparision(>1) }


//comp_op: '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'in'|'is'|'is' 'not'
void comp_op() #void: {}
{
    <LESS> #less_cmp(0)
|   <GREATER> #greater_cmp(0)
|   <EQEQUAL> #equal_cmp(0)
|   <EQGREATER> #greater_equal_cmp(0)
|   <EQLESS> #less_equal_cmp(0)
|   <LESSGREATER> #notequal_cmp(0)
|   <NOTEQUAL> #notequal_cmp(0)
|   <IN> #in_cmp(0)
|   <NOT_BOOL> <IN> #not_in_cmp(0)
|   LOOKAHEAD(2) <IS> <NOT_BOOL> #is_not_cmp(0)
|   <IS> #is_cmp(0)
}

//expr: xor_expr ('|' xor_expr)*
void expr() #void : {}
{ xor_expr() (<OR> xor_expr() #or_2op(2))* }

//xor_expr: and_expr ('^' and_expr)*
void xor_expr() #void : {}
{ and_expr() (<XOR> and_expr() #xor_2op(2))* }

//and_expr: shift_expr ('&' shift_expr)*
void and_expr() #void : {}
{ shift_expr() (<AND> shift_expr() #and_2op(2))* }

//shift_expr: arith_expr (('<<'|'>>') arith_expr)*
void shift_expr() #void : {}
{
    arith_expr() (<LSHIFT> arith_expr() #lshift_2op(2)
|   <RSHIFT> arith_expr() #rshift_2op(2) )*
}

//arith_expr: term (('+'|'-') term)*
void arith_expr() #void : {}
{
    term() (<PLUS> term() #add_2op(2)
|   <MINUS> term() #sub_2op(2) )*
}

//term: factor (('*'|'/'|'%') factor)*
void term() #void : {}
{
    factor()  ( <MULTIPLY> factor() #mul_2op(2)
|   <DIVIDE> factor() #div_2op(2)
|   <FLOORDIVIDE> factor() #floordiv_2op(2)
|   <MODULO> factor() #mod_2op(2) )*
}

//factor: ('+'|'-'|'~') factor | power
void factor() #void: {}
{
    <PLUS> factor() #pos_1op(1)
|   <MINUS> factor() #neg_1op(1)
|   <NOT> factor() #invert_1op(1)
|   power()
} /*Modified, no recursion*/

//power: atom trailer* ('**' factor)*
void power() #void: {}
{ atomtrailer() (LOOKAHEAD(2) <POWER> factor() #pow_2op(2))* }

//trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME
void atomtrailer() #void: {}
{
    atom() (LOOKAHEAD(2) <LPAREN> <RPAREN> #Call_Op(1)
|   (<LPAREN> arglist() <RPAREN>) #Call_Op(jjtree.nodeArity()+1)
|   <LBRACKET> subscriptlist() <RBRACKET> #Index_Op(2)
|   <DOT> AnyName() #Dot_Op(2) )*
}


//atom: '(' [testlist] ')' | '[' [testlist] ']' | '{' [dictmaker] '}' | '`' testlist '`' | NAME | NUMBER | STRING+
void atom() #void: {}
{
    LOOKAHEAD(2) (  <LPAREN> <RPAREN> ) #tuple
|   ( <LPAREN> [SmartTestList()] <RPAREN> )
|   ( <LBRACKET> [listmaker()] <RBRACKET> ) #list
|   ( <LBRACE> [dictmaker()] <RBRACE> ) #dictionary
|   "`" SmartTestList() "`" #str_1op(1)
|   Name()
|   Number()
|   String() (String() #strjoin(2))*
}


//lambdef: 'lambda' [varargslist] ':' test
void lambdef():{}
{ <LAMBDA> [varargslist()] <COLON> test() }

//subscriptlist: subscript (',' subscript)* [',']
void subscriptlist() #void: {}
{ (subscript() (LOOKAHEAD(2) <COMMA> subscript())* [Comma()]) #subscriptlist(>1) }

//subscript: '.' '.' '.' | test | [test] ':' [test] [sliceop]
void subscript() #void: {}
{
    <DOT> <DOT> <DOT> #Ellipses
|   (test() (slice())?) #Slice
|   slice() #Slice(>0)
}

//sliceop: ':' [test]
void slice() #void: {}
{ Colon() [test()] (Colon() [test()])? }

void Colon(): {} {<COLON>}
void Comma(): {} {<COMMA>}

//exprlist: expr (',' expr)* [',']
void exprlist() #void: {}
{ (expr() (LOOKAHEAD(2) <COMMA> expr())* [Comma()]) #tuple(>1) }

//testlist: test (',' test)* [',']
void SmartTestList() #void: {}
{ (test() (LOOKAHEAD(2) <COMMA> test())* [Comma()]) #tuple(>1) }

//testlist: test (',' test)* [',']
void testlist() #void: {}
{ test() (LOOKAHEAD(2) <COMMA> test())* [<COMMA>]}

//dictmaker: test ':' test (',' test ':' test)* [',']
void dictmaker() #void: {}
{test() <COLON> test() (LOOKAHEAD(2) <COMMA> test() <COLON> test())* [<COMMA>]}

//listmaker: test ( list_for | (',' test)* [','] )
void listmaker() #void: {}
{ test() ( (list_for())+ | (LOOKAHEAD(2) <COMMA> test())* [Comma()] #tuple(>1)) }

//list_iter: [list_for | list_if]
//void list_iter() #void: {}
//{ [ (list_for() | list_if()) ] }

//list_for: 'for' exprlist 'in' testlist list_iter
void list_for(): {}
{ <FOR> exprlist() <IN> SmartTestList() (list_if())* }

//list_if: 'if' test list_iter
void list_if() #void: {}
{ <IF> test() }


//classdef: 'class' NAME ['(' testlist ')'] ':' suite
void classdef(): {}
{<CLASS> Name() [<LPAREN> testlist() <RPAREN>] <COLON> suite()}

//arglist: (argument ',')*
//              (argument [',']| '*' test [',' '**' test] | '**' test)
void arglist() #void: {}
{
    normalargs() [<COMMA>
    [LOOKAHEAD(2) ExtraArgValueList()
    [ <COMMA> ExtraKeywordValueList() ] | ExtraKeywordValueList()]]
|   [LOOKAHEAD(2) ExtraArgValueList()
    [ <COMMA> ExtraKeywordValueList() ] | ExtraKeywordValueList()]
}

void normalargs() #void: {}
{ argument() (LOOKAHEAD(2) <COMMA> argument())* }

void ExtraArgValueList(): {}
{ <MULTIPLY> test() }

void ExtraKeywordValueList(): {}
{ (<POWER>|<MULTIPLY> <MULTIPLY>) test() }


//argument: [test '='] test     # Really [keyword '='] test
void argument() #void: {}
{ ([LOOKAHEAD(2) AnyName() <EQUAL>] test()) #Keyword(>1) }


void Number() #Num :
{
    Token t;
}
{
    (
        t=<HEXNUMBER> {
            String s = t.image.substring(2, t.image.length());
            jjtThis.setImage(makeInt(s, 16));
        } {}
    )
|   (
        t=<OCTNUMBER> { jjtThis.setImage(makeInt(t.image, 8)); } {}
    )
|   (
        t=<DECNUMBER> { jjtThis.setImage(makeInt(t.image, 10)); } {}
    )
|   (
        t=<FLOAT> { jjtThis.setImage(makeFloat(t.image)); } {}
    )
|   (
        t=<COMPLEX> { jjtThis.setImage(makeComplex(t.image)); } {}
    )
}

void Complex(): {}
{ <FLOAT>   }

void Name() #Name:
{
    Token t;
}
{
    t = <NAME> { jjtThis.setImage(t.image); } {}
|   t = <AS> { jjtThis.setImage(t.image); } {}
}

void String() #void :
{
    Token t;
}
{
    ( t=<SINGLE_STRING> { jjtThis.setImage(makeString(t.image, 1)); } {} )#String
|   ( t=<SINGLE_STRING2> { jjtThis.setImage(makeString(t.image, 1)); } {} )#String
|   ( t=<TRIPLE_STRING> { jjtThis.setImage(makeString(t.image, 3)); } {} )#String
|   ( t=<TRIPLE_STRING2> { jjtThis.setImage(makeString(t.image, 3)); } {} )#String
}

Token AnyName() #void:
{
    Token t;
}
{
    ( t= <NAME> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <OR_BOOL> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <AND_BOOL> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <NOT_BOOL> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <IS> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <IN> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <LAMBDA> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <IF> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <ELSE> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <ELIF> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <WHILE> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <FOR> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <TRY> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <EXCEPT> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <DEF> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <CLASS> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <FINALLY> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <PRINT> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <PASS> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <BREAK> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <CONTINUE> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <RETURN> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <YIELD> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <IMPORT> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <FROM> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <DEL> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <RAISE> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <GLOBAL> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <EXEC> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <ASSERT> { jjtThis.setImage(t.image); return t; } {} )#Name
|   ( t = <AS> { jjtThis.setImage(t.image); return t; } {} )#Name
}

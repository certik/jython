/* Generated By:JJTree&JavaCC: Do not edit this line. PythonGrammarTokenManager.java */
package org.python.parser;

public class PythonGrammarTokenManager implements PythonGrammarConstants
{
    int indentation[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    int level = 0;
    int dedents = 0;
    int parens = 0;
    int indent;
    boolean seen_eof = false;
    boolean single_input = false;
    boolean compound = false;
    public boolean forcedNewline = false;

    static Token addDedent(Token previous) {
        Token t = new Token();
        t.kind = DEDENT;
        t.beginLine = previous.beginLine;
        t.endLine = previous.endLine;
        t.beginColumn = previous.beginColumn;
        t.endColumn = previous.endColumn;
        t.image = "<DEDENT>";
        t.specialToken = null;
        t.next = null;
        previous.next = t;
        return t;
    }

    void CommonTokenAction(Token t) {
        if (t.kind == EOF) {
            //System.out.println("EOF: "+single_input+", "+curLexState);
            if (!single_input) {
                if (curLexState == DEFAULT) {
                    t.kind = NEWLINE;
                }
                else {
                    t.kind = DEDENT;
                    level -= 1;
                }
                while (level-- >= 0)
                    t = addDedent(t);
                //t = addDedent(t);
                t.kind = EOF;
                t.image = "<EOF>";
            }
        }
    }
private final int jjStopStringLiteralDfa_10(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 110;
            return -1;
         }
         return -1;
      case 1:
         if ((active1 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_10(int pos, long active0, long active1)
{
   return jjMoveNfa_10(jjStopStringLiteralDfa_10(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_10(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_10(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_10()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 108);
      case 13:
         jjmatchedKind = 109;
         return jjMoveStringLiteralDfa1_10(0x80000000000L);
      case 34:
         return jjMoveStringLiteralDfa1_10(0x4000000000L);
      default :
         return jjMoveNfa_10(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_10(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         break;
      case 34:
         return jjMoveStringLiteralDfa2_10(active1, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_10(0, 0L, active1);
}
private final int jjMoveStringLiteralDfa2_10(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_10(0, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 34:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(2, 102);
         break;
      default :
         break;
   }
   return jjStartNfa_10(1, 0L, active1);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_10(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 110)
                     kind = 110;
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 111)
                     kind = 111;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 110)
                     kind = 110;
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if (kind > 111)
                     kind = 111;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 110)
                     kind = 110;
                  break;
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 111)
                     kind = 111;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_8(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 106;
            return 2;
         }
         return -1;
      case 1:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_8(int pos, long active0, long active1)
{
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_8(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_8(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_8()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 100);
      case 92:
         return jjMoveStringLiteralDfa1_8(0x8000000000L);
      default :
         return jjMoveNfa_8(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_8(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa2_8(active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_8(0, 0L, active1);
}
private final int jjMoveStringLiteralDfa2_8(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_8(0, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(2, 103);
         break;
      default :
         break;
   }
   return jjStartNfa_8(1, 0L, active1);
}
private final int jjMoveNfa_8(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 106)
                     kind = 106;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 104)
                        kind = 104;
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 106)
                        kind = 106;
                  }
                  break;
               case 3:
                  if (curChar == 34 && kind > 106)
                     kind = 106;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 106)
                     kind = 106;
                  if (curChar == 92)
                     jjAddStates(0, 1);
                  break;
               case 2:
                  if (curChar == 92 && kind > 106)
                     kind = 106;
                  break;
               case 1:
                  if (curChar == 92)
                     jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 106)
                     kind = 106;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                     kind = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 60:
         return jjMoveStringLiteralDfa1_6(0x8000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_6(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa2_6(active0, 0x8000L);
      default :
         return 2;
   }
}
private final int jjMoveStringLiteralDfa2_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa3_6(active0, 0x8000L);
      default :
         return 3;
   }
}
private final int jjMoveStringLiteralDfa3_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa4_6(active0, 0x8000L);
      default :
         return 4;
   }
}
private final int jjMoveStringLiteralDfa4_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa5_6(active0, 0x8000L);
      default :
         return 5;
   }
}
private final int jjMoveStringLiteralDfa5_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa6_6(active0, 0x8000L);
      default :
         return 6;
   }
}
private final int jjMoveStringLiteralDfa6_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa7_6(active0, 0x8000L);
      default :
         return 7;
   }
}
private final int jjMoveStringLiteralDfa7_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(7, 15);
         break;
      default :
         return 8;
   }
   return 8;
}
private final int jjStopStringLiteralDfa_9(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 110;
            return -1;
         }
         return -1;
      case 1:
         if ((active1 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 110;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_9(int pos, long active0, long active1)
{
   return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_9(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_9(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_9()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 108);
      case 13:
         jjmatchedKind = 109;
         return jjMoveStringLiteralDfa1_9(0x80000000000L);
      case 39:
         return jjMoveStringLiteralDfa1_9(0x2000000000L);
      default :
         return jjMoveNfa_9(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_9(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         break;
      case 39:
         return jjMoveStringLiteralDfa2_9(active1, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_9(0, 0L, active1);
}
private final int jjMoveStringLiteralDfa2_9(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_9(0, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 39:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(2, 101);
         break;
      default :
         break;
   }
   return jjStartNfa_9(1, 0L, active1);
}
private final int jjMoveNfa_9(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 110)
                     kind = 110;
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 111)
                     kind = 111;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 110)
                     kind = 110;
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if (kind > 111)
                     kind = 111;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 110)
                     kind = 110;
                  break;
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 111)
                     kind = 111;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 9);
      case 12:
         return jjStopAtPos(0, 11);
      case 32:
         return jjStopAtPos(0, 10);
      default :
         return jjMoveNfa_4(1, 0);
   }
}
private final int jjMoveNfa_4(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAdd(4);
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 10 && kind > 12)
                     kind = 12;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 3:
                  if (curChar != 35)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  kind = 16;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x44000L) != 0L)
         {
            jjmatchedKind = 87;
            return 52;
         }
         if ((active0 & 0xfc00000000000000L) != 0L || (active1 & 0x7bbfffL) != 0L)
         {
            jjmatchedKind = 87;
            return 10;
         }
         if ((active0 & 0x2000000L) != 0L)
            return 15;
         return -1;
      case 1:
         if ((active0 & 0x6400000000000000L) != 0L || (active1 & 0x600001L) != 0L)
            return 10;
         if ((active0 & 0x9800000000000000L) != 0L || (active1 & 0x1ffffeL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 1;
            }
            return 10;
         }
         return -1;
      case 2:
         if ((active0 & 0x1800000000000000L) != 0L || (active1 & 0x200b0L) != 0L)
            return 10;
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x3dff4eL) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 2;
            return 10;
         }
         return -1;
      case 3:
         if ((active1 & 0x110806L) != 0L)
            return 10;
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x2cf748L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 3;
            return 10;
         }
         return -1;
      case 4:
         if ((active1 & 0x41508L) != 0L)
            return 10;
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x28e240L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 4;
            return 10;
         }
         return -1;
      case 5:
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x28c040L) != 0L)
            return 10;
         if ((active1 & 0x2200L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 5;
            return 10;
         }
         return -1;
      case 6:
         if ((active1 & 0x200L) != 0L)
            return 10;
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 6;
            return 10;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 37:
         jjmatchedKind = 34;
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);
      case 38:
         jjmatchedKind = 38;
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 17);
      case 41:
         return jjStopAtPos(0, 18);
      case 42:
         jjmatchedKind = 29;
         return jjMoveStringLiteralDfa1_0(0x202000080000000L, 0x0L);
      case 43:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 24);
      case 45:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 25, 15);
      case 47:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 26);
      case 59:
         return jjStopAtPos(0, 23);
      case 60:
         jjmatchedKind = 41;
         return jjMoveStringLiteralDfa1_0(0x80280100000000L, 0x0L);
      case 61:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
      case 62:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_0(0x100100200000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 21);
      case 93:
         return jjStopAtPos(0, 22);
      case 94:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 96:
         return jjStopAtPos(0, 112);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x600000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2100L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20080L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100046L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10210L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x6000000000000000L, 0x8001L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc00L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x44000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 123:
         return jjStopAtPos(0, 19);
      case 124:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 20);
      case 126:
         return jjStopAtPos(0, 35);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0L);
      case 60:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L);
      case 61:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         break;
      case 62:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x40800L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x24080L);
      case 102:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(1, 64, 10);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80106L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000L);
      case 110:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 62, 10);
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0x2010L);
      case 114:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 58, 10);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x11420L);
      case 115:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 61, 10);
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100040L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(2, 55);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(2, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(2, 57);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40L);
      case 100:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 10);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x101000L);
      case 102:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 71, 10);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4040cL);
      case 108:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 81, 10);
         break;
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2200L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x90000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000L);
      case 114:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 68, 10);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200802L);
      case 116:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 60, 10);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000L);
      case 121:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 69, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1200L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x80000L);
      case 99:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 84, 10);
         break;
      case 101:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 10);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200040L);
      case 102:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 10);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L);
      case 109:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 80, 10);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000L);
      case 115:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 10);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40100L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 10);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 82, 10);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000L);
      case 107:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 10);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20c000L);
      case 115:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 10);
         break;
      case 116:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 10);
         break;
      case 108:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 83, 10);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200L);
      case 110:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 10);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000L);
      case 116:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 70, 10);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 10);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa7_0(active1, 0x2000L);
      case 121:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 73, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, 0L, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(5, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 77, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1);
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 52;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(2, 5);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                  }
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 46)
                     jjCheckNAdd(15);
                  else if (curChar == 35)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAdd(8);
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAddTwoStates(12, 13);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(6, 9);
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 96)
                        kind = 96;
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 95)
                        kind = 95;
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAdd(10);
                  }
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 23;
                  if (curChar == 34)
                  {
                     if (kind > 96)
                        kind = 96;
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 95)
                        kind = 95;
                  }
                  break;
               case 1:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 4)
                     kind = 4;
                  break;
               case 4:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 7:
                  if (curChar != 35)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(8);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(10);
                  break;
               case 11:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(12, 13);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(12, 13);
                  break;
               case 14:
                  if (curChar == 46)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddStates(10, 12);
                  break;
               case 17:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddTwoStates(18, 19);
                  break;
               case 20:
                  if (curChar == 39 && kind > 95)
                     kind = 95;
                  break;
               case 21:
                  if (curChar == 34 && kind > 96)
                     kind = 96;
                  break;
               case 22:
                  if (curChar == 39 && kind > 97)
                     kind = 97;
                  break;
               case 23:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 34 && kind > 98)
                     kind = 98;
                  break;
               case 26:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(2, 5);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if (curChar != 46)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddStates(13, 15);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddStates(13, 15);
                  break;
               case 33:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddTwoStates(34, 19);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(35, 36);
                  break;
               case 37:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddTwoStates(38, 19);
                  break;
               case 39:
                  if (curChar != 48)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddStates(6, 9);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjAddStates(16, 17);
                  break;
               case 44:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddTwoStates(44, 45);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAdd(10);
                  }
                  else if (curChar == 92)
                     jjAddStates(0, 1);
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAddStates(18, 21);
                  else if ((0x20000000200000L & l) != 0L)
                     jjCheckNAddStates(22, 29);
                  break;
               case 52:
               case 10:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(10);
                  break;
               case 8:
                  if (kind > 16)
                     kind = 16;
                  jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(10);
                  break;
               case 13:
                  if ((0x140000001400L & l) != 0L && kind > 89)
                     kind = 89;
                  break;
               case 16:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(30, 31);
                  break;
               case 19:
                  if ((0x40000000400L & l) != 0L && kind > 92)
                     kind = 92;
                  break;
               case 32:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(32, 33);
                  break;
               case 36:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(34, 35);
                  break;
               case 40:
                  if ((0x40000000400L & l) != 0L && kind > 89)
                     kind = 89;
                  break;
               case 41:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if ((0x100000001000L & l) != 0L && kind > 90)
                     kind = 90;
                  break;
               case 45:
                  if ((0x100000001000L & l) != 0L && kind > 91)
                     kind = 91;
                  break;
               case 46:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAddStates(22, 29);
                  break;
               case 47:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 48:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 49:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 50:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(27);
                  break;
               case 51:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAddStates(18, 21);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 8:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjstateSet[jjnewStateCnt++] = 8;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 52 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_7(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 105;
            return 2;
         }
         return -1;
      case 1:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_7(int pos, long active0, long active1)
{
   return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_7(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_7(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 99);
      case 92:
         return jjMoveStringLiteralDfa1_7(0x8000000000L);
      default :
         return jjMoveNfa_7(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_7(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa2_7(active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_7(0, 0L, active1);
}
private final int jjMoveStringLiteralDfa2_7(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_7(0, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(2, 103);
         break;
      default :
         break;
   }
   return jjStartNfa_7(1, 0L, active1);
}
private final int jjMoveNfa_7(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 105)
                     kind = 105;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 104)
                        kind = 104;
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 105)
                        kind = 105;
                  }
                  break;
               case 3:
                  if (curChar == 39 && kind > 105)
                     kind = 105;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 105)
                     kind = 105;
                  if (curChar == 92)
                     jjAddStates(0, 1);
                  break;
               case 2:
                  if (curChar == 92 && kind > 105)
                     kind = 105;
                  break;
               case 1:
                  if (curChar == 92)
                     jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 105)
                     kind = 105;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(0, 0);
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                     kind = 8;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_5(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_5(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 9);
      case 12:
         return jjStopAtPos(0, 11);
      case 32:
         return jjStopAtPos(0, 10);
      default :
         return jjMoveNfa_5(1, 0);
   }
}
private final int jjMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAdd(4);
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 10 && kind > 12)
                     kind = 12;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 3:
                  if (curChar != 35)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  kind = 16;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   2, 3, 29, 30, 35, 36, 40, 41, 44, 45, 15, 16, 19, 31, 32, 19, 
   42, 43, 20, 21, 24, 27, 47, 20, 48, 21, 49, 24, 50, 27, 17, 18, 
   33, 34, 37, 38, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\74\111\116\104\105\116\124\76", null, "\50", "\51", "\173", "\175", 
"\133", "\135", "\73", "\54", "\56", "\72", "\53", "\55", "\52", "\57", "\52\52", 
"\74\74", "\76\76", "\45", "\176", "\136", "\174", "\46", "\75", "\76", "\74", "\75\75", 
"\74\75", "\76\75", "\74\76", "\41\75", "\53\75", "\55\75", "\52\75", "\57\75", 
"\45\75", "\46\75", "\174\75", "\136\75", "\74\74\75", "\76\76\75", "\52\52\75", 
"\157\162", "\141\156\144", "\156\157\164", "\151\163", "\151\156", 
"\154\141\155\142\144\141", "\151\146", "\145\154\163\145", "\145\154\151\146", "\167\150\151\154\145", 
"\146\157\162", "\164\162\171", "\145\170\143\145\160\164", "\144\145\146", 
"\143\154\141\163\163", "\146\151\156\141\154\154\171", "\160\162\151\156\164", "\160\141\163\163", 
"\142\162\145\141\153", "\143\157\156\164\151\156\165\145", "\162\145\164\165\162\156", 
"\151\155\160\157\162\164", "\146\162\157\155", "\144\145\154", "\162\141\151\163\145", 
"\147\154\157\142\141\154", "\145\170\145\143", "\141\163\163\145\162\164", "\141\163", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\140", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "FORCE_NEWLINE1", 
   "FORCE_NEWLINE2", 
   "FORCE_NEWLINE", 
   "INDENTING", 
   "INDENTATION_UNCHANGED", 
   "UNREACHABLE", 
   "IN_STRING11", 
   "IN_STRING21", 
   "IN_STRING13", 
   "IN_STRING23", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 5, 4, 0, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 8, 9, 10, 0, 
   0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffec1c1L, 0x100781effffffL, 
};
static final long[] jjtoSkip = {
   0x13e3eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x10000L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0xff8780000000L, 
};
private ASCII_CharStream input_stream;
private final int[] jjrounds = new int[52];
private final int[] jjstateSet = new int[104];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public PythonGrammarTokenManager(ASCII_CharStream stream)
{
   if (ASCII_CharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public PythonGrammarTokenManager(ASCII_CharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(ASCII_CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 52; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(ASCII_CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 11 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   if (jjmatchedPos < 0)
   {
      t.image = "";
      t.beginLine = t.endLine = input_stream.getBeginLine();
      t.beginColumn = t.endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      t.image = (im == null) ? input_stream.GetImage() : im;
      t.beginLine = input_stream.getBeginLine();
      t.beginColumn = input_stream.getBeginColumn();
      t.endLine = input_stream.getEndLine();
      t.endColumn = input_stream.getEndColumn();
   }
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100001200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 14;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         jjmatchedKind = 13;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         break;
       case 8:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         break;
       case 9:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_9();
         break;
       case 10:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_10();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           CommonTokenAction(matchedToken);
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

final void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 5 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
            if (parens == 0) {
                indent = 0;
                input_stream.backup(1);
                if (level == 0)
                    SwitchTo(FORCE_NEWLINE1);
                else
                    SwitchTo(FORCE_NEWLINE2);
            }
         break;
      case 9 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
            indent = (indent/8+1)*8;
            if (indent == indentation[level])
                SwitchTo(INDENTATION_UNCHANGED);
            else
                SwitchTo(INDENTING);
         break;
      case 10 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
            indent += 1;
            if (indent == indentation[level])
                SwitchTo(INDENTATION_UNCHANGED);
            else
                SwitchTo(INDENTING);
         break;
      case 11 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
            indent = 0;
            if (indent == indentation[level])
                SwitchTo(INDENTATION_UNCHANGED);
            else
                SwitchTo(INDENTING);
         break;
      case 12 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
            if (parens == 0 && single_input && indent==0) {
                //System.out.println("force newline");
                //backup a character!
                forcedNewline = true;
                input_stream.backup(1);
                SwitchTo(FORCE_NEWLINE);
            }
            else {
                //doPrompt();
                indent = 0;
                if (indent == indentation[level])
                    SwitchTo(INDENTATION_UNCHANGED);
                else
                    SwitchTo(INDENTING);
            }
         break;
      case 16 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                                                   indent = 0;
         break;
      default :
         break;
   }
}
final void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 103 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen)));
         jjimageLen = 0;
                           image.setLength(image.length()-3);
         break;
      case 104 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen)));
         jjimageLen = 0;
                           image.setLength(image.length()-2);
         break;
      case 107 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen)));
         jjimageLen = 0;
        int l = image.length();
        image.setLength(l-1);
        image.setCharAt(l-2, '\n');
         break;
      case 109 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen)));
         jjimageLen = 0;
             image.setCharAt(image.length()-1, '\n');
         break;
      default : 
         break;
   }
}
final void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 7 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                              matchedToken.kind = NEWLINE;
         break;
      case 8 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
            Token t1 = matchedToken;
            //System.out.println("final_newline: "+level);
            t1.kind = DEDENT;
            while (level-- > 0)
                t1 = addDedent(t1);
            t1.kind = NEWLINE;
         break;
      case 14 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
            if (indent > indentation[level]) {
                level++;
                indentation[level] = indent;
                matchedToken.kind=INDENT;
                matchedToken.image = "<INDENT>";
            }
            else {
                Token t = matchedToken;
                level -= 1;
                while (level > 0 && indent < indentation[level]) {
                    level--;
                    t = addDedent(t);
                }
                if (indent != indentation[level]) {
                    throw new TokenMgrError("inconsistent dedent",
                                            t.endLine, t.endColumn);
                }
                t.next = null;
            }
         break;
      case 17 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[17]);
         else
            image.append(jjstrLiteralImages[17]);
                     parens++;
         break;
      case 18 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[18]);
         else
            image.append(jjstrLiteralImages[18]);
                     parens--;
         break;
      case 19 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[19]);
         else
            image.append(jjstrLiteralImages[19]);
                     parens++;
         break;
      case 20 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[20]);
         else
            image.append(jjstrLiteralImages[20]);
                     parens--;
         break;
      case 21 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[21]);
         else
            image.append(jjstrLiteralImages[21]);
                       parens++;
         break;
      case 22 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[22]);
         else
            image.append(jjstrLiteralImages[22]);
                       parens--;
         break;
      case 99 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
    matchedToken.image = image.toString();
         break;
      case 100 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
    matchedToken.image = image.toString();
         break;
      case 101 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
    matchedToken.image = image.toString();
         break;
      case 102 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
    matchedToken.image = image.toString();
         break;
      default : 
         break;
   }
}
}

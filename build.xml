<!-- Copyright 2000 Dj Walker-Morgan -->


<project name="jython" default="developer-build" basedir=".">


    <!-- print out some usage hints -->
    <target name="usage" description="prints a short usage">
        <echo>
Use case 1: developer build (in your local jython copy)
-------------------------------------------------------
  - call target 'developer-build' (which is the default for this build.xml)
This build will create directories /build and /dist below basedir.


Use case 2: full build for a release (using svn checkout)
---------------------------------------------------------
  - make sure you have access to the jython subversion repository (https://svn.sourceforge.net/svnroot/jython)
  - make sure you have access and to cpython anonymous cvs (pserver:anonymous@cvs.sourceforge.net:/cvsroot/python)
  - override svn.tag in ant.properties (if necessary)
  - call target 'full-build'
This build will create a working directory named full_build_${svn.tag} at the same
level as your local directories bugtests, jython, sandbox and installer.
It will contain a big jython_${svn.tag}.jar file suitable for installation.

Please be aware:
To build older releases, it may be necessary to use an older build.xml, too (with the corresponding tag).
For example it is not possible to build Release_2_2alpha1 with this version of build.xml.


Use case 3: build only the parser (grammar)
-------------------------------------------
  - override javaccHome in ant.properties (if necessary)
  - call target 'parser'
or:
  - set javaccHome, either on the command line, or inside parser/build.xml
  - call parser/build.xml (default target)
This build will only create files inside org/python/parser.


Note on targets
---------------
The following targets are designed for direct invocation:
  - usage
  - developer-build
  - full-build
  - clean (uses developer-build settings if called directly)
  - parser (uses developer-build settings if called directly)
Following an ant convention, the callable targets have a description attribute.
All other targets may give unpredicted results if called directly.


Where ant.properties are searched
---------------------------------
  1. in user.home
  2. in the same directory as this build.xml file
The first setting of a property wins, further settings are ignored.


Actions for a release
---------------------
  1. determine the new svn tag to be applied to jython
  2. determine the existing cvs tag of the CPython Lib files which should be included
  3. change the following properties in this build.xml, if necessary:
       - svn.tag             (target: full-init)
       - python.cvs.tag      (target: full-init)
       - jdk.target.version  (target: pre-init)
  4. if new CPython .py files should be distributed, add them to build.Lib.include.properties
  5. adjust the public static String version in PySystemState.java
  6. adjust the version strings in target 'version' of this build.xml
  7. check in all the changes
  8. apply the new tag to the jython svn (all projects)
  9. call target 'full-build'



An example ant.properties file:
-------------------------------

# - define the home for javacc (only used for parser grammar)
javaccHome=${basedir}/../externals/javacc-3.2

# - ht2html tool for the doc target (only needed for full-build)
ht2html.dir=${basedir}/../externals/ht2html-2.0

# - define the home of the corresponding CPython version
python.home=c:/Programme/Python/Python22

# - javax.servlet
servlet.jar=c:/workspace/HEAD/CH.obj.commons.core/make_lib/j2ee.jar

# - org.gnu.readline
readline.jar=${basedir}/../externals/external-jars/readline.jar

# - zxJDBC
# (for mysql, see www.mysql.com/downloads/api-jdbc-stable.html)
# (for postgres, see http://jdbc.postgresql.org/)
mysql.jar=${basedir}/../externals/external-jars/mysql-connector-java-3.0.16-ga-bin.jar
postgresql.jar=${basedir}/../externals/external-jars/pg74.215.jdbc2.jar
oracle.jar=C:/workspace/HEAD/for_development/bisdevsrv28/jboss/server/infra/lib/ojdbc14.jar
#informix.jar=

# - option for javac (build.compiler=modern is a global option to use standard jdk 1.3/1.4/1.5)
#build.compiler=modern
#jdk.target.version=1.2
#debug=false
#optimize=off
#deprecation=off

# - the svn tag to build from; only needed for full-build
#svn.tag=Release_2_2alpha2
svn.tag=HEAD

# - the revision; defaults to svn.tag; only needed for full-build
#   (uncomment and indicate the correct revision to do a snapshot build)
#svn.revision=2948

# - the directory containing libsvnjavahl-1.dll (on windows) and svnjavahl.jar; only needed for full-build
# how to get these:
#   - download http://subversion.tigris.org/files/documents/15/31073/svn-win32-1.3.1_javahl.zip (or newer)
#   - unzip the .dll and .jar into javahl.dir
javahl.dir=C:/Programme/Subversion/javahl

# - the directory containing the svnant related .jar files; only needed for full-build
# the following .jar files (probably) are needed:
#   - commons-lang-2.0.jar
#   - jakarta-regexp-1.3.jar
#   - svnant.jar
#   - svnClientAdapter.jar
#   - svnjavahl.jar
# how to get these:
#   - download http://subclipse.tigris.org/files/documents/906/23927/svnant-1.0.0-rc1.zip (or newer)
#   - unzip the jar files from /lib folder to svnant.jar.dir
svnant.jar.dir=${basedir}/../externals/svnant-jars
        </echo>
    </target>


    <!-- developer build -->
    <target name="developer-build"
            depends="developer-build-called, developer-init, post-init, copy-dist"
            description="a local build for developers"
    />


    <!-- full build -->
    <target name="full-build" depends="full-init, post-init, install" description="a full build from svn" />


    <!-- set a property to indicate that target 'developer-build' was really called -->
    <target name="developer-build-called">
        <property name="developer-build-called" value="true" />
    </target>


    <!-- initialize properties common to both developer build and full build -->
    <target name="pre-init">
        <!-- load from .properties file -->
        <echo>loading properties from ${user.home}/ant.properties</echo>
        <property file="${user.home}/ant.properties" />
        <echo>loading properties from ${basedir}/ant.properties</echo>
        <property file="${basedir}/ant.properties" />

        <property name="build.compiler" value="modern" />
        <property name="jdk.target.version" value="1.2" />
        <property name="jdk.source.version" value="1.3" />
        <property name="deprecation" value="off" />
        <property name="debug" value="off" />
        <property name="optimize" value="on" />
        <property name="nowarn" value="false" />

        <!-- classpaths -->
        <path id="main.classpath">
            <pathelement path="${readline.jar}" />
            <pathelement path="${servlet.jar}" />
            <pathelement path="${informix.jar}" />
            <pathelement path="${oracle.jar}" />
            <pathelement path="${mysql.jar}" />
            <pathelement path="${postgresql.jar}" />
            <pathelement path="${jndi.jar}" />
            <pathelement path="${jdbc.jar}" />
            <pathelement path="${java.class.path}" />
        </path>

        <available property="threadlocal.present" classname="java.lang.ThreadLocal" />
        <available property="secureclassloader.present" classname="java.security.SecureClassLoader" />
        <available property="servlet.present" classname="javax.servlet.Servlet" classpath="${servlet.jar}" />
        <available property="readline.present" classname="org.gnu.readline.Readline" classpath="${readline.jar}" />
        <available property="informix.present" classname="com.informix.jdbc.IfxDriver" classpath="${informix.jar}" />
        <available property="mysql.present" classname="org.gjt.mm.mysql.Driver" classpath="${mysql.jar}" />
        <available property="postgresql.present" classname="org.postgresql.Driver" classpath="${postgresql.jar}" />
        <available property="oracle.present" classname="oracle.jdbc.driver.OracleDriver" classpath="${oracle.jar}" />
        <available property="jndi.present" classname="javax.naming.Context" classpath="${jndi.jar}" />
        <available property="javax.sql.present" classname="javax.sql.DataSource" />
        <available property="jdbc30.present" classname="java.sql.ParameterMetaData" />
    </target>


    <!-- init properties for the developer build -->
    <target name="developer-init" depends="pre-init">
        <property name="work.dir" value="${basedir}" />
        <property name="jython.base.dir" value="${basedir}" />
        <property name="source.dir" value="${basedir}/src" />
        <property name="python.lib" value="${python.home}/Lib" />
    </target>


    <!-- init properties for the full build -->
    <target name="full-init" depends="pre-init">
        <!-- use this property to distinguish a full-build from a developer-build -->
        <property name="full-build" value="true" />

        <!-- predefined tags for jython and cpython -->
        <property name="svn.tag" value="HEAD" />
        <property name="python.cvs.tag" value="r223" />

        <!-- revision handling -->
    	<property name="svn.revision" value="${svn.tag}" />

        <property name="work.dir" value="${basedir}/../full_build_${svn.tag}" />
        <property name="svn.checkout.dir" value="${work.dir}/checkout" />
        <property name="jython.base.dir" value="${svn.checkout.dir}/jython" />
        <property name="source.dir" value="${jython.base.dir}/src" />
        <property name="has.repositories.connection" value="true" />
        <property name="python.module" value="python/dist/src/Lib" />
        <property name="python.lib" value="${svn.checkout.dir}/${python.module}" />
        <property name="python.exe" value="${python.home}/python" />
        <condition property="do.checkout" value="true">
            <istrue value="${has.repositories.connection}" />
        </condition>
        <condition property="do.snapshot.build" value="true">
        	<not>
                <equals arg1="${svn.revision}" arg2="${svn.tag}" />
            </not>
        </condition>
    	
        <!-- classpath for svn ant task -->
        <path id="svn.classpath">
            <pathelement path="${java.class.path}" />
            <fileset dir="${svnant.jar.dir}">
              <include name="*.jar"/>
            </fileset>
        </path>
    	<!-- taskdef for svn ant task -->
    	<taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask" classpathref="svn.classpath" />
    </target>


    <target name="post-init">
        <property name="output.dir" value="${work.dir}/build" />
        <property name="dist.dir" value="${work.dir}/dist" />
        <property name="apidoc.dir" value="${dist.dir}/Doc/javadoc" />
        <property name="parser.dir" value="${source.dir}/org/python/parser" />
        <echo>.</echo>
        <echo>Build environment for ${ant.project.name}</echo>
        <echo>(Note: if ${propertyname} is displayed, then the property is not set)</echo>
        <echo>--- optional libraries ---</echo>
        <echo>threadlocal        = '${threadlocal.present}'</echo>
        <echo>secureclassloader  = '${secureclassloader.present}'</echo>
        <echo>servlet            = '${servlet.present}'</echo>
        <echo>readline           = '${readline.present}'</echo>
        <echo>oracle             = '${oracle.present}'</echo>
        <echo>informix           = '${informix.present}'</echo>
        <echo>mysql              = '${mysql.present}'</echo>
        <echo>postgresql         = '${postgresql.present}'</echo>
        <echo>jndi               = '${jndi.present}'</echo>
        <echo>jdbc               = '${javax.sql.present}'</echo>
        <echo>jdbc3.0            = '${jdbc30.present}'</echo>
        <echo>--- properties ---</echo>
        <echo>work.dir           = '${work.dir}'</echo>
        <echo>jython.base.dir    = '${jython.base.dir}'</echo>
        <echo>source.dir         = '${source.dir}'</echo>
        <echo>parser.dir         = '${parser.dir}'</echo>
        <echo>output.dir         = '${output.dir}'</echo>
        <echo>dist.dir           = '${dist.dir}'</echo>
        <echo>apidoc.dir         = '${apidoc.dir}'</echo>
        <echo>python.lib         = '${python.lib}'</echo>
        <echo>javaccHome         = '${javaccHome}'</echo>
        <echo>ht2html.dir        = '${ht2html.dir}'</echo>
        <echo>build.compiler     = '${build.compiler}'</echo>
        <echo>jdk.target.version = '${jdk.target.version}'</echo>
        <echo>jdk.source.version = '${jdk.source.version}'</echo>
        <echo>deprecation        = '${deprecation}'</echo>
        <echo>debug              = '${debug}'</echo>
        <echo>optimize           = '${optimize}'</echo>
        <echo>nowarn             = '${nowarn}'</echo>
        <echo>--- properties (used for full-build only ) ---</echo>
        <echo>python.exe         = '${python.exe}'</echo>
        <echo>svn.tag            = '${svn.tag}'</echo>
        <echo>python.cvs.tag     = '${python.cvs.tag}'</echo>
        <echo>svn.checkout.dir   = '${svn.checkout.dir}'</echo>
    	<echo>javahl.dir         = '${javahl.dir}'</echo>
    	<echo>svnant.jar.dir     = '${svnant.jar.dir}'</echo>
    	<echo>svn.revision       = '${svn.revision}'</echo>
        <echo>do.snapshot.build  = '${do.snapshot.build}'</echo>
        <echo>do.checkout        = '${do.checkout}'</echo>
    </target>


    <!-- delete what's necessary. should correspond to the directories created in prepare  -->
    <!-- if called directly, we use settings as in developer-build -->
    <!-- (at the moment all properties will already be set if we do a full build) -->
    <target name="clean"
            depends="developer-init, post-init, clean-checkout-dir"
            unless="developer-build-called"
            description="clean up build working directories"
    >
        <!-- do not hard delete ${work.dir}, since it could be ${basedir} -->
        <!-- deletes all files and subdirectories of ${output.dir}, without ${output.dir} itself. -->
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${output.dir}" includes="**/*" />
        </delete>
        <!-- deletes all files and subdirectories of ${dist.dir}, without ${dist.dir} itself. -->
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${dist.dir}" includes="**/*" />
        </delete>
        <!-- delete the installation .jar file from ${work.dir}, but no other files -->
        <delete failonerror="false">
            <fileset dir="${work.dir}" includes="jython*.jar" />
        </delete>
    </target>


    <!-- clean svn.checkout.dir if we really checkout -->
    <target name="clean-checkout-dir" if="do.checkout">
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${svn.checkout.dir}" includes="**/*" defaultexcludes="no" />
        </delete>
    </target>


    <!-- create necessary directories -->
    <target name="prepare" depends="prepare-full, prepare-checkout">
        <mkdir dir="${output.dir}" />
        <mkdir dir="${dist.dir}" />
    </target>


    <!-- create directories needed only in full-build -->
    <target name="prepare-full" depends="clean" if="full-build">
        <mkdir dir="${work.dir}" />
        <mkdir dir="${dist.dir}/Doc" />
        <mkdir dir="${apidoc.dir}" />
    </target>


    <!-- create checkout directory if necessary -->
    <target name="prepare-checkout" if="do.checkout">
        <mkdir dir="${svn.checkout.dir}" />
    </target>


    <!-- checkout if so defined -->
    <target name="checkout" depends="prepare" if="do.checkout">
    	<!-- jython and installer:  determine if to checkout from /tags/${svn.tag} (any tag), or /trunk (HEAD) -->
    	<condition property="svn.main.dir" value="trunk">
    		<equals arg1="${svn.tag}" arg2="HEAD" />
    	</condition>
    	<property name="svn.main.dir" value="tags/${svn.tag}" />
        <svn javahl="${javahl.dir}" >
        	<checkout url="https://svn.sourceforge.net/svnroot/jython/${svn.main.dir}/jython" revision="${svn.revision}" destPath="${svn.checkout.dir}/jython" />
        	<checkout url="https://svn.sourceforge.net/svnroot/jython/${svn.main.dir}/installer" revision="${svn.revision}" destPath="${svn.checkout.dir}/installer" />
        </svn> 
    	
        <!-- cpython -->
        <property name="python.cvs.root" value=":pserver:anonymous@cvs.sourceforge.net:/cvsroot/python" />
        <echo>setting python password for anonymous</echo>
        <cvspass cvsroot="${python.cvs.root}" password="" />
        <!-- -r: use the cvs tag, -P: prune empty directories -->
        <property name="python.checkout.options" value="checkout -r ${python.cvs.tag} -P" />
        <property name="python.checkout.command" value="-z3 -d${python.cvs.root} ${python.checkout.options}" />
        <echo>checking out ${python.module} with the following command: ${python.checkout.command} ${python.module}</echo>
        <cvs command="${python.checkout.command} ${python.module}" dest="${svn.checkout.dir}" />
    </target>

	<!-- change the version string, if so defined: used for snapshot builds -->
	<!-- the following replacements have to be updated if the version strings in PySystemState.java change -->
	<target name="version" depends="checkout" if="do.snapshot.build" >
		<property name="replace.value.version" value='version = "2.2a${svn.revision}"' />
		<replace file="${source.dir}/org/python/core/PySystemState.java" token='version = "2.2a1"' value="${replace.value.version}" />
		<replace file="${source.dir}/org/python/core/PySystemState.java" token="PY_RELEASE_LEVEL = 0x0A" value="PY_RELEASE_LEVEL = 0xAA" />
		<property name="replace.value.serial" value="PY_RELEASE_SERIAL = ${svn.revision}" />
		<replace file="${source.dir}/org/python/core/PySystemState.java" token="PY_RELEASE_SERIAL = 1" value="${replace.value.serial}" />
	</target>

    <!-- separate build.xml for parser grammar -->
    <!-- we use settings as in developer-build - at the moment all properties will already be set if we do a full build -->
    <target name="parser" depends="developer-init, post-init, prepare" if="javaccHome" description="the grammar build">
        <echo>processing ${parser.dir}/build.xml</echo>
        <ant dir="${parser.dir}" />
    </target>


    <!-- compile java sources -->
    <target name="compile" depends="version, parser">
        <javac srcdir="${source.dir}/"
               destdir="${output.dir}/"
               target="${jdk.target.version}"
               source="${jdk.source.version}"
               debug="${debug}"
               optimize="${optimize}"
               deprecation="${deprecation}"
               nowarn="${nowarn}"
        >
            <exclude name="org/python/parser/python.java" />
            <exclude name="**/PyServlet.java" unless="servlet.present" />
            <exclude name="**/ReadlineConsole.java" unless="readline.present" />
            <exclude name="**/handler/InformixDataHandler.java" unless="informix.present" />
            <exclude name="**/handler/MySQLDataHandler.java" unless="mysql.present" />
            <exclude name="**/handler/OracleDataHandler.java" unless="oracle.present" />
            <exclude name="**/handler/PostgresqlDataHandler.java" unless="postgresql.present" />
            <exclude name="**/connect/Lookup.java" unless="jndi.present" />
            <exclude name="**/connect/Lookup.java" unless="javax.sql.present" />
            <exclude name="**/connect/Connectx.java" unless="javax.sql.present" />
            <exclude name="**/JDBC30DataHandler.java" unless="jdbc30.present" />
            <classpath refid="main.classpath" />
        </javac>

        <javac srcdir="${jython.base.dir}/Lib"
               includes="jxxload_help/**"
               destdir="${output.dir}/"
               target="${jdk.target.version}"
               source="${jdk.source.version}"
               debug="${debug}"
               optimize="${optimize}"
               deprecation="${deprecation}"
               nowarn="${nowarn}"
        />

        <!-- java files used by tests -->
        <javac srcdir="${jython.base.dir}/Lib/test/"
               includes="javatests/**"
               destdir="${output.dir}/"
               target="${jdk.target.version}"
               source="${jdk.source.version}"
               debug="${debug}"
               optimize="${optimize}"
               deprecation="${deprecation}"
               nowarn="${nowarn}"
        />

        <copy file="${source.dir}/org/python/modules/ucnhash.dat"
              todir="${output.dir}/org/python/modules"
              preservelastmodified="true"
        />

        <copy todir="${output.dir}/com" preservelastmodified="true">
            <fileset dir="${source.dir}/com">
                <include name="**/*.properties" />
            </fileset>
        </copy>
    </target>


    <!-- build jython.jar -->
    <target name="jar" depends="compile">
        <jar destfile="${dist.dir}/jython.jar"
             basedir="${output.dir}"
             update="true">
          <include name="com/**/*" />
          <include name="org/**/*" />
          <include name="jxxload_help/*" />
          <include name="javatests/*" />
          <manifest>
              <attribute name="Main-Class" value="org.python.util.jython" />
              <attribute name="Built-By" value="${user.name}" />
              <!-- info section. ATTN: no blanks, no '.' in the names -->
              <section name="Build-Info">
                  <attribute name="version" value="${svn.revision}" />
                  <attribute name="svn-build" value="${do.checkout}" />
                  <attribute name="threadlocal" value="${threadlocal.present}" />
                  <attribute name="secureclassloader" value="${secureclassloader.present}" />
                  <attribute name="servlet" value="${servlet.present}" />
                  <attribute name="readline" value="${readline.present}" />
                  <attribute name="oracle" value="${oracle.present}" />
                  <attribute name="informix" value="${informix.present}" />
                  <attribute name="mysql" value="${mysql.present}" />
                  <attribute name="postgresql" value="${postgresql.present}" />
                  <attribute name="jndi" value="${jndi.present}" />
                  <attribute name="jdbc" value="${javax.sql.present}" />
                  <attribute name="jdbc3_0" value="${jdbc30.present}" />
                  <attribute name="build-compiler" value="${build.compiler}" />
                  <attribute name="jdk-target-version" value="${jdk.target.version}" />
                  <attribute name="debug" value="${debug}" />
                  <attribute name="optimize" value="${optimize}" />
              </section>
          </manifest>
        </jar>
    </target>


    <!-- build the .html files using the ht2html tool -->
    <target name="doc" depends="compile" if="full-build">
        <fail unless="ht2html.dir" message="ht2html.dir is not set" />
        <copy todir="${dist.dir}/Doc" preservelastmodified="true">
            <fileset dir="Doc" includes="*.ht, **/*.gif" />
        </copy>
        <!-- Create .html files in Doc -->
        <apply executable="${python.exe}" dir="Doc">
            <env key="PYTHONPATH" path="${jython.base.dir}/Misc/htgen" />
            <arg line="${ht2html.dir}/ht2html.py" />
            <arg line="-s JyLocalGenerator" />
            <fileset dir="${dist.dir}/Doc">
                <include name="*.ht" />
            </fileset>
        </apply>
        <delete>
            <fileset dir="${dist.dir}/Doc" includes="*.ht" />
        </delete>
    </target>


    <!-- javadoc -->
    <target name="javadoc" depends="compile" if="full-build">
        <javadoc sourcepath="${source.dir}"
                 destdir="${apidoc.dir}"
                 source="${jdk.source.version}"
                 public="true"
                 breakiterator="yes"
                 packagenames="org.python.core, org.python.util, com.ziclix.python.sql"
                 windowtitle="Jython API documentation"
                 bottom="&lt;a href='http://www.jython.org' target='_top'>Jython homepage&lt;/a>"
        >
            <classpath refid="main.classpath" />
        </javadoc>
    </target>


    <!-- copy for full distribution -->
    <target name="copy-full" if="full-build">
        <!-- Misc files -->
        <echo>copy misc files from ${jython.base.dir}</echo>
        <copy todir="${dist.dir}" preservelastmodified="true">
            <fileset dir="${jython.base.dir}"
                     includes="ACKNOWLEDGMENTS, build.xml, build.Lib.include.properties, NEWS, LICENSE.txt, README.txt, registry"
            />
        </copy>

        <!-- copy the CPython license -->
        <echo>copy CPython LICENSE from ${python.home} to ${dist.dir}/LICENSE_CPython.txt</echo>
        <!-- +++ TODO: checkout the CPython LICENSE (not: .txt) and copy from there -->
        <copy file="${python.home}/LICENSE.txt" tofile="${dist.dir}/LICENSE_CPython.txt" preservelastmodified="true" />

        <!-- sources: todir has to correspond with installer/**/JarInstaller.java -->
        <echo>copy sources from ${jython.base.dir}</echo>
        <copy todir="${dist.dir}/src/java" preservelastmodified="true">
            <fileset dir="${jython.base.dir}">
              <include name="src/**/*.java" />
              <include name="src/com/**/*.properties" />
              <include name="Lib/jxxload_help/*.java" />
              <include name="Lib/test/javatests/*.java" />
              <include name="src/org/**/ucnhash.dat" />
              <include name="src/org/python/parser/build.xml" />
              <exclude name="src/org/python/parser/python.java" />
            </fileset>
        </copy>

        <!-- The demo files -->
        <echo>copy the demo files from ${jython.base.dir}/Demo</echo>
        <copy todir="${dist.dir}/Demo" preservelastmodified="true">
            <fileset dir="${jython.base.dir}/Demo">
              <include name="**/*.java" />
              <include name="**/*.html" />
              <include name="**/*.py" />
              <include name="**/*.txt" />
              <include name="**/*.xml**" />
              <include name="**/jreload/example.jar" />
              <include name="**/jreload/_xample/Version.class" />
              <exclude name="**/jpywork/**" />
            </fileset>
        </copy>
    </target>


    <!-- copy for distribution -->
    <target name="copy-dist" depends="jar, doc, javadoc, copy-full">
        <!-- Tools: jythonc and freeze -->
        <echo>copy Tools from ${jython.base.dir}/Tools</echo>
        <copy todir="${dist.dir}" preservelastmodified="true">
            <fileset dir="${jython.base.dir}" includes="Tools/**/*.py" />
        </copy>

        <!-- Copy the CPython standard library files -->
        <echo>copy CPython/Lib *.py files from ${python.lib}</echo>
        <copy todir="${dist.dir}/Lib" preservelastmodified="true">
            <fileset dir="${python.lib}" excludes="**/*.pyc, **/*.pyo">
                <patternset>
                    <includesfile name="${jython.base.dir}/build.Lib.include.properties" />
                </patternset>
            </fileset>
        </copy>

        <!-- The jython .py modules: important to overwrite the above CPython .py files -->
        <echo>copy the jython *.py modules from ${jython.base.dir}/Lib</echo>
        <copy todir="${dist.dir}/Lib" preservelastmodified="true" overwrite="true">
            <fileset dir="${jython.base.dir}/Lib" excludes="**/*.class"/>
        </copy>
    </target>


    <!-- wrap the build into the installer -->
    <target name="install" depends="copy-dist">
        <fail unless="svn.tag" message="no svn.tag specified" />
        <property name="install.src.dir" value="${jython.base.dir}/../installer/src/java" />
        <echo>compiling installer from ${install.src.dir}</echo>
        <javac srcdir="${install.src.dir}"
               includes="org/**"
               destdir="${output.dir}/"
               target="${jdk.target.version}"
               source="${jdk.source.version}"
               debug="${debug}"
               optimize="${optimize}"
               deprecation="${deprecation}"
               nowarn="${nowarn}"
        />
        <echo>copy installer classes to ${dist.dir}</echo>
        <copy todir="${dist.dir}" preservelastmodified="true">
            <fileset dir="${output.dir}">
            	<include name="org/python/util/install/**/*.class" />
            	<include name="org/apache/commons/cli/*.class" />
            </fileset>
        </copy>
        <echo>copy installer icon to ${dist.dir}</echo>
        <copy todir="${dist.dir}" preservelastmodified="true">
            <!-- check no /bin directory -->
            <fileset dir="${install.src.dir}" includes="**/*.png" excludes="bin/**" />
        </copy>
        <echo>building installer .jar file</echo>
        <jar destfile="${work.dir}/jython_${svn.revision}.jar" basedir="${dist.dir}" update="true">
            <manifest>
                <attribute name="Main-Class" value="org.python.util.install.Installation" />
                <attribute name="Built-By" value="${user.name}" />
                <!-- section for the install program -->
                <section name="Jython">
                    <attribute name="version" value="${svn.revision}" />
                    <attribute name="exclude-dirs" value="org;META-INF" />
                </section>
                <!-- info section. ATTN: no blanks, no '.' in the names -->
                <section name="Build-Info">
                    <attribute name="svn-build" value="${do.checkout}" />
                    <attribute name="cpython-version" value="${python.cvs.tag}" />
                    <attribute name="threadlocal" value="${threadlocal.present}" />
                    <attribute name="secureclassloader" value="${secureclassloader.present}" />
                    <attribute name="servlet" value="${servlet.present}" />
                    <attribute name="readline" value="${readline.present}" />
                    <attribute name="oracle" value="${oracle.present}" />
                    <attribute name="informix" value="${informix.present}" />
                    <attribute name="mysql" value="${mysql.present}" />
                    <attribute name="postgresql" value="${postgresql.present}" />
                    <attribute name="jndi" value="${jndi.present}" />
                    <attribute name="jdbc" value="${javax.sql.present}" />
                    <attribute name="jdbc3_0" value="${jdbc30.present}" />
                    <attribute name="build-compiler" value="${build.compiler}" />
                    <attribute name="jdk-target-version" value="${jdk.target.version}" />
                    <attribute name="debug" value="${debug}" />
                    <attribute name="optimize" value="${optimize}" />
                </section>
            </manifest>
        </jar>
    </target>


</project>
